<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Android Notes</title>
  <subtitle>学会用不同的角度去看待和理解这个世界，你收获的永远比你想象的更多</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://bxbxbai.gitcafe.io/"/>
  <updated>2016-08-02T14:31:53.000Z</updated>
  <id>http://bxbxbai.gitcafe.io/</id>
  
  <author>
    <name>bxbxbai</name>
    <email>bxbxbai@gmail.com</email>
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>自动检查Android项目dependencies的更新</title>
    <link href="http://bxbxbai.gitcafe.io/2016/08/02/auto-detect-gradle-library/"/>
    <id>http://bxbxbai.gitcafe.io/2016/08/02/auto-detect-gradle-library/</id>
    <published>2016-08-02T09:39:47.000Z</published>
    <updated>2016-08-02T14:31:53.000Z</updated>
    
    <content type="html">&lt;p&gt;使用Gradle编译的Android项目中，&lt;code&gt;build.gradle&lt;/code&gt;中总会依赖很多第三方库，比如：&lt;code&gt;compile &amp;#39;com.google.code.gson:gson:2.6.2&amp;#39;&lt;/code&gt;。而这些第三方库一般的都是在JCenter或MavenCentral上，比如Gson库的网络地址就是：&lt;a href=&quot;http://jcenter.bintray.com/com/google/code/gson/gson/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;http://jcenter.bintray.com/com/google/code/gson/gson/&lt;/a&gt;，这个网页上会列出各个可用版本的Gson库。打开那个网页可以发现，最新的可用Gson库是&lt;code&gt;2.7&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;问题来了，如何让Android Studio自动的去检查项目依赖的第三方库是否有更新呢？&lt;/p&gt;
&lt;h2 id=&quot;方法&quot;&gt;&lt;a href=&quot;#方法&quot; class=&quot;headerlink&quot; title=&quot;方法&quot;&gt;&lt;/a&gt;方法&lt;/h2&gt;&lt;p&gt;方法很简单，就藏在Android Studio里面。首先，打开Android Studio的设置，然后按照下图找到Inspection，选中&lt;strong&gt;Newer Library Version Available&lt;/strong&gt;就可以了&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/img/newer_library.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;然后在Android Studio的菜单&lt;strong&gt;Analyze -&amp;gt; Run Inspections By Name&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/img/enter_inspection.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;然后，选择你要检查的Module，Android Studio就会自动去检查dependencies的更新，最后就会出现下图：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/img/inspection_results.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;最后改写lib的版本号，同步gradle就可以了，是不是很方便！！&lt;/p&gt;
&lt;h2 id=&quot;最后&quot;&gt;&lt;a href=&quot;#最后&quot; class=&quot;headerlink&quot; title=&quot;最后&quot;&gt;&lt;/a&gt;最后&lt;/h2&gt;&lt;p&gt;当然有的人会说，&lt;em&gt;“我可以装一个Android Studio插件来完成这个事情啊”&lt;/em&gt;。但是，既然Android Studio中已经存在了这个功能，我为啥还需要一个插件呢？毕竟IDE的插件多了，会影响启动速度的~&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;使用Gradle编译的Android项目中，&lt;code&gt;build.gradle&lt;/code&gt;中总会依赖很多第三方库，比如：&lt;code&gt;compile &amp;#39;com.google.code.gson:gson:2.6.2&amp;#39;&lt;/code&gt;。而这些第三方库一般的都是
    
    </summary>
    
    
      <category term="Tips" scheme="http://bxbxbai.gitcafe.io/tags/Tips/"/>
    
  </entry>
  
  <entry>
    <title>关于Android 6.0 运行时权限</title>
    <link href="http://bxbxbai.gitcafe.io/2016/05/27/android-runtime-permission/"/>
    <id>http://bxbxbai.gitcafe.io/2016/05/27/android-runtime-permission/</id>
    <published>2016-05-27T08:24:21.000Z</published>
    <updated>2016-08-02T10:13:18.000Z</updated>
    
    <content type="html">&lt;p&gt;Android 6.0 （API level 23） 已经发布很长一段时间了，其中一个很大的改进就是&lt;strong&gt;运行时权限&lt;/strong&gt;。我之前就在知乎回答过一个问题&lt;a href=&quot;https://www.zhihu.com/question/37259597/answer/73552786&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;iPhone 到底爽在哪里？&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;我说，iPhone上的App都是默认下载安装的，然后运行App时需要什么权限就弹窗向我申请，这对用户来说就非常好。因为我不想给App权限就不给，而Android 6.0以前是这样的，我下载了一个App安装，系统就弹出这个App需要使用的全部的权限，就给我看一下，我需要这个App 的话，只能同意所有的权限都给这个App，要么我不安装这个App&lt;/p&gt;
&lt;p&gt;Android 6.0以前的权限管理应该是我对Android最不满的功能，6.0中 Google终于来解决这个问题了。&lt;/p&gt;
&lt;p&gt;下面我就来好好聊聊这个运行时权限管理是怎么回事&lt;/p&gt;
&lt;h2 id=&quot;权限分类&quot;&gt;&lt;a href=&quot;#权限分类&quot; class=&quot;headerlink&quot; title=&quot;权限分类&quot;&gt;&lt;/a&gt;权限分类&lt;/h2&gt;&lt;p&gt;在6.0中Android把所有的权限从&lt;strong&gt;逻辑上&lt;/strong&gt;分成了两类：&lt;a href=&quot;http://developer.android.com/intl/zh-cn/guide/topics/security/permissions.html#normal-dangerous&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;常规（normal）和危险（dangerous）&lt;/a&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;常规权限&lt;/strong&gt;指的是那些不会直接获取你隐私的权限，如果你在AndroidManifest.xml文件中列出了这些权限的话，系统会自动授权给你。&lt;a href=&quot;http://developer.android.com/intl/zh-cn/guide/topics/security/normal-permissions.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;这里是normal权限列表&lt;/a&gt;，有很多&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;危险权限&lt;/strong&gt;就是那些能获取你隐私信息，或者可能会影响你的文件等的操作。比如读取你的联系人、使用你的摄像头和读取你的日历等等&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;权限组&quot;&gt;&lt;a href=&quot;#权限组&quot; class=&quot;headerlink&quot; title=&quot;权限组&quot;&gt;&lt;/a&gt;权限组&lt;/h3&gt;&lt;p&gt;这里是危险权限列表：&lt;br&gt;&lt;img src=&quot;/img/dangerous_permission.png&quot; alt=&quot;此处输入图片的描述&quot;&gt;&lt;/p&gt;
&lt;p&gt;从上图中我们可以看到，Android系统把危险权限分了9大组，这样也是为了简化权限的申请机制。如果你申请了&lt;code&gt;android.permission.READ_CONTACTS&lt;/code&gt;读取联系人的权限，&lt;strong&gt;那么6.0 系统就会把这一组中其他的权限也打包给你&lt;/strong&gt;。我觉得这个和iOS的隐私管理机制非常相似，在iOS系统设置的“&lt;strong&gt;隐私-&amp;gt;通讯录&lt;/strong&gt;”中可以看到，如果你给一个App通讯录的权限，那么这个App既可以读也可以写的&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Android 6.0里面只有危险权限才需要运行时获取的&lt;/strong&gt;&lt;/p&gt;
&lt;h2 id=&quot;申请权限&quot;&gt;&lt;a href=&quot;#申请权限&quot; class=&quot;headerlink&quot; title=&quot;申请权限&quot;&gt;&lt;/a&gt;申请权限&lt;/h2&gt;&lt;h3 id=&quot;tartgetSdkVersion&quot;&gt;&lt;a href=&quot;#tartgetSdkVersion&quot; class=&quot;headerlink&quot; title=&quot;tartgetSdkVersion&quot;&gt;&lt;/a&gt;tartgetSdkVersion&lt;/h3&gt;&lt;p&gt;说到申请权限，先要说一下&lt;code&gt;targetSdkVersion&lt;/code&gt;这个字段，这个字段一般定义在build.gradle文件中的。这个对App来说很重要！但是是什么意思呢？&lt;/p&gt;
&lt;p&gt;假如说&lt;code&gt;targetSdkVersion 22&lt;/code&gt;，安装好以后Android系统就知道了这个App在系统API 22以下都测试过了并且能正确运行的，但是在23以上并不可以正确运行的，假如说这个App运行在了Android 6.0系统上，那么Android就会对这个App很“照顾”，兼容它正确运行。比如，6.0系统会把App申请的所有权限都默认给这个App，处理的逻辑和6.0一下的系统是一样的&lt;/p&gt;
&lt;h3 id=&quot;ActivityCompat&quot;&gt;&lt;a href=&quot;#ActivityCompat&quot; class=&quot;headerlink&quot; title=&quot;ActivityCompat&quot;&gt;&lt;/a&gt;ActivityCompat&lt;/h3&gt;&lt;p&gt;&lt;code&gt;android.support.v4.app.ActivityCompat&lt;/code&gt;这个类是App 向系统申请权限主要的工具，而且兼容了各种系统版本&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;ActivityCompat.requestPermissions&lt;/code&gt;向系统申请一个或一组权限&lt;/li&gt;
&lt;li&gt;&lt;code&gt;ActivityCompat.checkSelfPermission&lt;/code&gt;App检查自己是否有某个权限&lt;/li&gt;
&lt;li&gt;&lt;code&gt;ActivityCompat.shouldShowRequestPermissionRationale&lt;/code&gt;判断弹出对话框中是否含有“不再询问”的选择框&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img src=&quot;/img/request_permission.png&quot; title=&quot;undefined&quot; style=&quot;
    width: 70%;
&quot;&gt;&lt;/p&gt;
&lt;p&gt;申请权限的步骤：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;你要有一个运行Android 6.0系统的设备&lt;/li&gt;
&lt;li&gt;将App的&lt;code&gt;targetSdkVersion&lt;/code&gt;设置为23&lt;/li&gt;
&lt;li&gt;把&lt;code&gt;AndroidManifest.xml&lt;/code&gt;中申请的并且是危险的所有权限都列出来，用&lt;code&gt;ActivityCompat.requestPermissions&lt;/code&gt;方法向系统申请权限&lt;/li&gt;
&lt;li&gt;在所在的Activity中Override&lt;code&gt;onRequestPermissionsResult&lt;/code&gt;方法接受系统权限申请的回调&lt;/li&gt;
&lt;li&gt;处理回调，比如用户拒绝了某个权限，这时App可以弹出一个对话框描述一下App为何需要这个权限等等&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&quot;targetSdkVersion-小于23&quot;&gt;&lt;a href=&quot;#targetSdkVersion-小于23&quot; class=&quot;headerlink&quot; title=&quot;targetSdkVersion 小于23&quot;&gt;&lt;/a&gt;targetSdkVersion 小于23&lt;/h3&gt;&lt;p&gt;假如你的App的&lt;code&gt;targetSdkVersion&lt;/code&gt;小于23，但是安装到了Android 6.0系统上了，会怎么样呢？会崩溃吗？&lt;/p&gt;
&lt;p&gt;别担心，Android开发团队已经考虑到这一点了，如果&lt;code&gt;targetSdkVersion&lt;/code&gt;小于23的话，就表示你的App并没有在新的运行时权限系统上测试过，&lt;strong&gt;此时Android系统会把你申请的全部权限都给你&lt;/strong&gt;。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;但是！！！用户依然可以进入App的设置界面把权限关闭！！&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/img/cancel_permission_22.png&quot; alt=&quot;cancel permission&quot;&gt;&lt;/p&gt;
&lt;p&gt;此时你还能用这个权限么？经过我的测试，是不可以了。&lt;/p&gt;
&lt;p&gt;所以，如果App的&lt;code&gt;targetSdkVersion&lt;/code&gt;小于23并且运行在Android 6.0系统上，怎么去检测用户关闭了权限呢？伟大的stackoverflow告诉我们：&lt;code&gt;android.support.v4.content.PermissionChecker&lt;/code&gt;可以帮我们解决这个问题。这个类的文档中有这个一段：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;For apps targeting API lower than &lt;code&gt;android.os.Build.VERSION_CODES.M&lt;/code&gt; these permissions are always granted as such apps do not expect permission revocations and would crash. Therefore, when the user disables a permission for a legacy app in the UI the platform disables the APIs guarded by this permission making them a no-op which is doing nothing or returning an empty result or default error.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;code&gt;PermissionChecker.checkSelfPermission&lt;/code&gt;方法就是用于检查App自身有没有某一个权限，这个方法的返回结果只有三种：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;PERMISSION_GRANTED&lt;/code&gt;: 已授权&lt;/li&gt;
&lt;li&gt;&lt;code&gt;PERMISSION_DENIED&lt;/code&gt;: 没有被授权&lt;/li&gt;
&lt;li&gt;&lt;code&gt;PERMISSION_DENIED_APP_OP&lt;/code&gt;: 没有被授权&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;code&gt;PERMISSION_DENIED&lt;/code&gt;和&lt;code&gt;PERMISSION_DENIED_APP_OP&lt;/code&gt;都表示没有被授权，但是它们的区别就在于&lt;code&gt;targetSdkVersion&lt;/code&gt;的值，如果&lt;code&gt;targetSdkVersion&lt;/code&gt;小于23，就返回&lt;code&gt;PERMISSION_DENIED_APP_OP&lt;/code&gt;，否则就返回&lt;code&gt;PERMISSION_DENIED&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;因此，如果你的App的&lt;code&gt;targetSdkVersion&lt;/code&gt;小于23，但是运行在Android 6.0及以后的系统上，你可以用&lt;code&gt;PermissionChecker.checkSelfPermission(context, permission) == PermissionChecker. PERMISSION_DENIED_APP_OP&lt;/code&gt;来检查App是否有某一个权限&lt;/p&gt;
&lt;h2 id=&quot;总结&quot;&gt;&lt;a href=&quot;#总结&quot; class=&quot;headerlink&quot; title=&quot;总结&quot;&gt;&lt;/a&gt;总结&lt;/h2&gt;&lt;p&gt;如果App的&lt;code&gt;targetSdkVersion&lt;/code&gt;小于23（Android 6.0以前），那么&lt;code&gt;ContextCompat#checkSelfPermission&lt;/code&gt;和     &lt;code&gt;Context#checkSelfPermission&lt;/code&gt;方法的返回结果都是错误的，因为它们总是返回0（&lt;a href=&quot;http://developer.android.com/reference/android/content/pm/PackageManager.html#PERMISSION_GRANTED&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;PERMISSION_GRANTED&lt;/a&gt;）。即使App运行在Android 6.0上并且用户在设置中关闭了App的权限，上面两个方法返回的结果也是0&lt;/p&gt;
&lt;p&gt;上面也说到，Android 6.0系统上，用户是可以关闭App权限的，所以并不是说App的&lt;code&gt;targetSdkVersion&lt;/code&gt;小于23就可以不用关心权限问题了：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Android &amp;lt; 6.0：系统会给App所有的权限&lt;/li&gt;
&lt;li&gt;Android &amp;gt;= 6.0 &amp;amp;&amp;amp; targetSdkVersion &amp;lt; 23：系统会默认给予App所有的权限，但是用户可以去设置中关闭权限。这时你需要使用&lt;code&gt;PermissionChecker.checkSelfPermission&lt;/code&gt;来检测App是否有某一个权限&lt;/li&gt;
&lt;/ul&gt;
&lt;pre&gt;&lt;code&gt;public boolean selfPermissionGranted(Context context, String permission) {
    // Android 6.0 以前，全部默认授权
    boolean result = true;

    if (Build.VERSION.SDK_INT &amp;gt;= Build.VERSION_CODES.M) {
       if (targetSdkVersion &amp;gt;= Build.VERSION_CODES.M) {
            // targetSdkVersion &amp;gt;= 23, 使用Context#checkSelfPermission
            result = context.checkSelfPermission(permission)
                    == PackageManager.PERMISSION_GRANTED;
        } else {
            // targetSdkVersion &amp;lt; 23, 需要使用 PermissionChecker
            result = PermissionChecker.checkSelfPermission(context, permission)
                    == PermissionChecker.PERMISSION_GRANTED;
        }
    }
    return result;
}
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;获取App的targetSdkVersion值：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt; try {
    final PackageInfo info = context.getPackageManager().getPackageInfo(
        context.getPackageName(), 0);
    targetSdkVersion = info.applicationInfo.targetSdkVersion;
} catch (PackageManager.NameNotFoundException e) {
    e.printStackTrace();
}
&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&quot;最后&quot;&gt;&lt;a href=&quot;#最后&quot; class=&quot;headerlink&quot; title=&quot;最后&quot;&gt;&lt;/a&gt;最后&lt;/h2&gt;&lt;p&gt;不得不说，慢慢的从Android 5.0开始，Google慢慢的缩减了Android开放策略，以前的Android真的是可以为所欲为，监听系统各种变化，甚至一个App被切换到后台，它任然可以获取到当前正在运行的App（用户正在使用的），这个Api可以轻松的获取用户的隐私信息啊，太可怕了。&lt;/p&gt;
&lt;p&gt;从Android 6.0开始，运行时权限、Doze模式以及App Standby，Android 7.0中对Doze模式加强，以及取消了很多比如&lt;code&gt;CONNTENCTIVITY_ACTION&lt;/code&gt;、&lt;code&gt;ACTION_NEW_PICTURE&lt;/code&gt;和&lt;code&gt;ACTION_NEW_VIDEO&lt;/code&gt;广播&lt;/p&gt;
&lt;h2 id=&quot;参考&quot;&gt;&lt;a href=&quot;#参考&quot; class=&quot;headerlink&quot; title=&quot;参考&quot;&gt;&lt;/a&gt;参考&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;http://developer.android.com/intl/zh-cn/training/permissions/requesting.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Requesting Permissions at Run Time&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://inthecheesefactory.com/blog/things-you-need-to-know-about-android-m-permission-developer-edition&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Everything every Android Developer must know about new Android’s Runtime Permission&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://stackoverflow.com/questions/33407250/checkselfpermission-method-is-not-working-in-targetsdkversion-22&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;checkSelfPermission method is not working in targetSdkVersion 22&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://mssun.me/blog/android-4-3-app-ops-analysis.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Android 4.3 隐藏功能 App Ops 分析&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;Android 6.0 （API level 23） 已经发布很长一段时间了，其中一个很大的改进就是&lt;strong&gt;运行时权限&lt;/strong&gt;。我之前就在知乎回答过一个问题&lt;a href=&quot;https://www.zhihu.com/question/37259597/a
    
    </summary>
    
    
      <category term="Android" scheme="http://bxbxbai.gitcafe.io/tags/Android/"/>
    
  </entry>
  
  <entry>
    <title>ButterKnife框架原理</title>
    <link href="http://bxbxbai.gitcafe.io/2016/03/12/how-butterknife-works/"/>
    <id>http://bxbxbai.gitcafe.io/2016/03/12/how-butterknife-works/</id>
    <published>2016-03-12T06:25:46.000Z</published>
    <updated>2016-03-13T06:17:55.000Z</updated>
    
    <content type="html">&lt;p&gt;大部分Android开发应该都知道&lt;a href=&quot;https://twitter.com/jakewharton&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;@JakeWharton&lt;/a&gt; 大神的&lt;strong&gt;ButterKnife&lt;/strong&gt;注解库，使用这个库我们可以不用写很多无聊的&lt;code&gt;findViewById()&lt;/code&gt;和&lt;code&gt;setOnClickListener()&lt;/code&gt;等代码&lt;/p&gt;
&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;
&lt;p&gt;&lt;strong&gt;ButterKnife&lt;/strong&gt;项目的主页在这里：&lt;a href=&quot;http://jakewharton.github.io/butterknife/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;http://jakewharton.github.io/butterknife/&lt;/a&gt; 简单介绍一下使用方法：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;public class ExampleActivity extends Activity {
      @Bind(R.id.title) EditText titleView;
      @Bind(R.id.subtitle) EditText subtitleView;

      @Override protected void onCreate(Bundle savedInstanceState) {
       super.onCreate(savedInstanceState);
       setContentView(R.layout.example_activity);
       ButterKnife.bind(this);
     }
   }
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;但是这个库是如何工作的呢？可能很多人都觉得ButterKnife在&lt;code&gt;bind(this)&lt;/code&gt;方法执行的时候通过反射获取&lt;code&gt;ExampleActivity&lt;/code&gt;中所有的带有&lt;code&gt;@Bind&lt;/code&gt;注解的属性并且获得注解中的&lt;code&gt;R.id.xxx&lt;/code&gt;值，最后还是通过反射拿到&lt;code&gt;Activity.findViewById()&lt;/code&gt;方法获取View，并赋值给&lt;code&gt;ExampleActivity&lt;/code&gt;中的某个属性&lt;/p&gt;
&lt;p&gt;这是一个注解库的实现方式，比较原始，一个很大的缺点就是在Activity运行时大量使用反射会影响App的运行性能，造成卡顿以及生成很多临时Java对象更容易触发GC&lt;/p&gt;
&lt;p&gt;&lt;code&gt;ButterKnife&lt;/code&gt;显然没有使用这种方式，它用了Java Annotation Processing技术，就是在Java代码编译成Java字节码的时候就已经处理了&lt;code&gt;@Bind&lt;/code&gt;、&lt;code&gt;@OnClick&lt;/code&gt;（ButterKnife还支持很多其他的注解）这些注解了&lt;/p&gt;
&lt;h2 id=&quot;Java-Annotation-Processing&quot;&gt;&lt;a href=&quot;#Java-Annotation-Processing&quot; class=&quot;headerlink&quot; title=&quot;Java Annotation Processing&quot;&gt;&lt;/a&gt;Java Annotation Processing&lt;/h2&gt;&lt;blockquote&gt;
&lt;p&gt;Annotation processing 是javac中用于编译时扫描和解析Java注解的工具&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;你可以你定义注解，并且自己定义解析器来处理它们。Annotation processing是在编译阶段执行的，它的原理就是读入Java源代码，解析注解，然后生成新的Java代码。新生成的Java代码最后被编译成Java字节码，注解解析器（Annotation Processor）不能改变读入的Java 类，比如不能加入或删除Java方法&lt;/p&gt;
&lt;p&gt;下图是Java 编译代码的整个过程，可以帮助我们很好理解注解解析的过程：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/img/java_compiler.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;h2 id=&quot;ButterKnife-工作流程&quot;&gt;&lt;a href=&quot;#ButterKnife-工作流程&quot; class=&quot;headerlink&quot; title=&quot;ButterKnife 工作流程&quot;&gt;&lt;/a&gt;ButterKnife 工作流程&lt;/h2&gt;&lt;p&gt;当你编译你的Android工程时，ButterKnife工程中&lt;code&gt;ButterKnifeProcessor&lt;/code&gt;类的&lt;code&gt;process()&lt;/code&gt;方法会执行以下操作：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;开始它会扫描Java代码中所有的ButterKnife注解&lt;code&gt;@Bind&lt;/code&gt;、&lt;code&gt;@OnClick&lt;/code&gt;、&lt;code&gt;@OnItemClicked&lt;/code&gt;等&lt;/li&gt;
&lt;li&gt;当它发现一个类中含有任何一个注解时，&lt;code&gt;ButterKnifeProcessor&lt;/code&gt;会帮你生成一个Java类，名字类似&lt;code&gt;&amp;lt;className&amp;gt;$$ViewBinder&lt;/code&gt;，这个新生成的类实现了&lt;code&gt;ViewBinder&amp;lt;T&amp;gt;&lt;/code&gt;接口&lt;/li&gt;
&lt;li&gt;这个&lt;code&gt;ViewBinder&lt;/code&gt;类中包含了所有对应的代码，比如&lt;code&gt;@Bind&lt;/code&gt;注解对应&lt;code&gt;findViewById()&lt;/code&gt;, &lt;code&gt;@OnClick&lt;/code&gt;对应了&lt;code&gt;view.setOnClickListener()&lt;/code&gt;等等&lt;/li&gt;
&lt;li&gt;最后当Activity启动&lt;code&gt;ButterKnife.bind(this)&lt;/code&gt;执行时，ButterKnife会去加载对应的&lt;code&gt;ViewBinder&lt;/code&gt;类调用它们的&lt;code&gt;bind()&lt;/code&gt;方法&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;一个栗子&quot;&gt;&lt;a href=&quot;#一个栗子&quot; class=&quot;headerlink&quot; title=&quot;一个栗子&quot;&gt;&lt;/a&gt;一个栗子&lt;/h2&gt;&lt;p&gt;一段Java代码：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;class ExampleActivity extends Activity {
     @Bind(R.id.user) EditText username;
     @Bind(R.id.pass) EditText password;

    @Override public void onCreate(Bundle savedInstanceState) {
         super.onCreate(savedInstanceState);
         setContentView(R.layout.simple_activity);
         ButterKnife.bind(this);
         // TODO Use fields…
     }

     @OnClick(R.id.submit) void submit() {
     // TODO call server…
     }
}
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;编译成功后，下面的代码生成了：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;public class ExampleActivity$$ViewBinder&amp;lt;T extends 
        io.bxbxbai.samples.ui.ExampleActivity&amp;gt; implements ViewBinder&amp;lt;T&amp;gt; {

     @Override public void bind(final Finder finder, final T target, Object source) {
          View view;
          view = finder.findRequiredView(source, 21313618, “field ‘user’”);
          target.username = finder.castView(view, 21313618, “field ‘user’”);
          view = finder.findRequiredView(source, 21313618, “field ‘pass’”);
          target.password = finder.castView(view, 21313618, “field ‘pass’”);
          view = finder.findRequiredView(source, 21313618, “field ‘submit’ and method ‘submit’”);
          view.setOnClickListener(
            new butterknife.internal.DebouncingOnClickListener() {
               @Override public void doClick(android.view.View p0) {
      target.submit();
           }
        });
      }

     @Override public void reset(T target) {
           target.username = null;
           target.password = null;
     }
}
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;用一张图来说明一下：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/img/butterknife_example.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;h2 id=&quot;ButterKnife-bind-执行阶段&quot;&gt;&lt;a href=&quot;#ButterKnife-bind-执行阶段&quot; class=&quot;headerlink&quot; title=&quot;ButterKnife.bind 执行阶段&quot;&gt;&lt;/a&gt;ButterKnife.bind 执行阶段&lt;/h2&gt;&lt;p&gt;最后，执行&lt;code&gt;bind&lt;/code&gt;方法时，我们会调用&lt;code&gt;ButterKnife.bind(this)&lt;/code&gt;：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;ButterKnife会调用&lt;code&gt;findViewBinderForClass(targetClass)&lt;/code&gt;加载&lt;code&gt;ExampleActivity$$ViewBinder.java&lt;/code&gt;类&lt;/li&gt;
&lt;li&gt;然后调用&lt;code&gt;ViewBinder&lt;/code&gt;的&lt;code&gt;bind&lt;/code&gt;方法，动态注入&lt;code&gt;ExampleActivity&lt;/code&gt;类中所有的View属性和&lt;/li&gt;
&lt;li&gt;如果Activity中有&lt;code&gt;@OnClick&lt;/code&gt;注解的方法，ButterKnife会在&lt;code&gt;ViewBinder&lt;/code&gt;类中给View设置onClickListener，并且将&lt;code&gt;@OnClick&lt;/code&gt;注解的方法传入其中&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;在上面的过程中可以看到，为什么你用&lt;code&gt;@Bind&lt;/code&gt;、&lt;code&gt;@OnClick&lt;/code&gt;等注解标注的属性或方法必须是public或protected的，因为ButterKnife是通过&lt;code&gt;ExampleActivity.this.editText&lt;/code&gt;来注入View的&lt;/p&gt;
&lt;p&gt;为什么要这样呢？有些注入框架比如roboguice你是可以把View设置成private的，答案就是&lt;strong&gt;性能&lt;/strong&gt;。如果你把View设置成private，那么框架必须通过反射来注入View，不管现在手机的CPU处理器变得多快，如果有些操作会影响性能，那么是肯定要避免的，这就是ButterKnife与其他注入框架的不同&lt;/p&gt;
&lt;h2 id=&quot;有一点需要注意&quot;&gt;&lt;a href=&quot;#有一点需要注意&quot; class=&quot;headerlink&quot; title=&quot;有一点需要注意&quot;&gt;&lt;/a&gt;有一点需要注意&lt;/h2&gt;&lt;p&gt;通过ButterKnife来注入View时，ButterKnife有&lt;code&gt;bind(Object, View)&lt;/code&gt; 和 &lt;code&gt;bind(View)&lt;/code&gt;两个方法，有什么区别呢？&lt;/p&gt;
&lt;p&gt;如果你自定义了一个View，比如&lt;code&gt;public class BadgeLayout extends Fragment&lt;/code&gt;，那么你可以可以通过&lt;code&gt;ButterKnife.bind(BadgeLayout)&lt;/code&gt;来注入View的&lt;/p&gt;
&lt;p&gt;如果你在一个ViewHolder中inflate了一个xml布局文件，得到一个&lt;code&gt;View&lt;/code&gt;对象，并且这个View是&lt;code&gt;LinearLayout&lt;/code&gt;或&lt;code&gt;FrameLayout&lt;/code&gt;等系统自带View，那么不是不能用&lt;code&gt;ButterKnife.bind(View)&lt;/code&gt;来注入View的，因为ButterKnife认为这些类的包名以&lt;code&gt;com.android&lt;/code&gt;开头的类是没有注解功能的（-。- 这不是废话吗？），所以这种情况你需要使用&lt;code&gt;ButterKnife.bind(ViewHolder，View)&lt;/code&gt;来注入View。&lt;/p&gt;
&lt;p&gt;这表示&lt;strong&gt;你是把&lt;code&gt;@Bind&lt;/code&gt;、&lt;code&gt;@OnClick&lt;/code&gt;等注解写到了这个ViewHolder类中，ViewHolder中的View呢需要从后面那个&lt;code&gt;View&lt;/code&gt;中去找&lt;/strong&gt;， 大概就是这么个意思&lt;/p&gt;
&lt;p&gt;参考：&lt;a href=&quot;https://medium.com/@lgvalle/how-butterknife-actually-works-85be0afbc5ab&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;https://medium.com/@lgvalle/how-butterknife-actually-works-85be0afbc5ab&lt;/a&gt;&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;大部分Android开发应该都知道&lt;a href=&quot;https://twitter.com/jakewharton&quot;&gt;@JakeWharton&lt;/a&gt; 大神的&lt;strong&gt;ButterKnife&lt;/strong&gt;注解库，使用这个库我们可以不用写很多无聊的&lt;code&gt;findViewById()&lt;/code&gt;和&lt;code&gt;setOnClickListener()&lt;/code&gt;等代码&lt;/p&gt;
    
    </summary>
    
    
      <category term="Android" scheme="http://bxbxbai.gitcafe.io/tags/Android/"/>
    
  </entry>
  
  <entry>
    <title>Retrofit2 源码解析</title>
    <link href="http://bxbxbai.gitcafe.io/2015/12/13/retrofit2/"/>
    <id>http://bxbxbai.gitcafe.io/2015/12/13/retrofit2/</id>
    <published>2015-12-13T05:16:29.000Z</published>
    <updated>2016-03-12T06:55:58.000Z</updated>
    
    <content type="html">&lt;p&gt;公司里最近做的项目中网络框架用的就是&lt;a href=&quot;http://square.github.io/retrofit/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Retrofit&lt;/a&gt;，用的多了以后觉得这个框架真的非常好用，然后抽了点时间debug了一下源码，觉得不光代码写的非常好，而且设计这个框架的思路都非常特别，收获很多，决定记录下来&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;本文的源码分析基于Retrofit 2.0，和Retrofit 1.0有较大的不同&lt;/strong&gt;， 本文主要分为几部分：0、Retrofi 是什么，1、Retrofi怎么用，2、Retrofit的原理是什么，3、我的心得与看法&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;下面说的Retrofit全部指Retrofit 2&lt;/strong&gt;&lt;/p&gt;
&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;
&lt;h2 id=&quot;0-Retrofit是什么&quot;&gt;&lt;a href=&quot;#0-Retrofit是什么&quot; class=&quot;headerlink&quot; title=&quot;0 Retrofit是什么&quot;&gt;&lt;/a&gt;0 Retrofit是什么&lt;/h2&gt;&lt;p&gt;来自Retrofit官网的介绍：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;A type-safe HTTP client for Android and Java&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;简单的说它是一个HTTP请求工具，和Google开发的Volley功能上非常相似，这里有&lt;a href=&quot;http://bxbxbai.github.io/2014/12/24/read-volley-source-code/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Volley的源码解析&lt;/a&gt;，但是使用上很不相似。Retrofit使用起来更简单，Volley使用上更加原始而且符合使用者的直觉，其实我觉得如果对自己Volley封装一下也可以像Retrofit那样的简单的使用&lt;/p&gt;
&lt;p&gt;关于Volley的使用方法，请戳上面的Volley源码解析链接，这里就不赘述了&lt;/p&gt;
&lt;h2 id=&quot;1-Retrofit怎么用&quot;&gt;&lt;a href=&quot;#1-Retrofit怎么用&quot; class=&quot;headerlink&quot; title=&quot;1 Retrofit怎么用&quot;&gt;&lt;/a&gt;1 Retrofit怎么用&lt;/h2&gt;&lt;p&gt;虽然Retrofit官网已经说明了，我还是要按照我的思路说一下它的使用方法&lt;/p&gt;
&lt;p&gt;比如你要请求这么一个api：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;a href=&quot;https://api.github.com/repos/{owner}/{repo}/contributors&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;https://api.github.com/repos/{owner}/{repo}/contributors&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;查看github上某个repo的contributors，首先你要这样建一个接口：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;public interface GitHub {
    @GET(&amp;quot;/repos/{owner}/{repo}/contributors&amp;quot;)
    Call&amp;lt;List&amp;lt;Contributor&amp;gt;&amp;gt; contributors(
        @Path(&amp;quot;owner&amp;quot;) String owner,
        @Path(&amp;quot;repo&amp;quot;) String repo);
}
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;然后你还需要创建一个&lt;code&gt;Retrofit&lt;/code&gt;对象：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;public static final String API_URL = &amp;quot;https://api.github.com&amp;quot;;

// Create a very simple REST adapter which points the GitHub API.
Retrofit retrofit = new Retrofit.Builder()
    .baseUrl(API_URL)
    .addConverterFactory(GsonConverterFactory.create())
    .build();
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;再用这个&lt;code&gt;Retrofit&lt;/code&gt;对象创建一个&lt;code&gt;GitHub&lt;/code&gt;对象：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;// Create an instance of our GitHub API interface.
GitHub github = retrofit.create(GitHub.class);

// Create a call instance for looking up Retrofit contributors.
Call&amp;lt;List&amp;lt;Contributor&amp;gt;&amp;gt; call = github.contributors(&amp;quot;square&amp;quot;, &amp;quot;retrofit&amp;quot;);
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;最后你就可以用这个&lt;code&gt;Githb&lt;/code&gt;对象获得数据了：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;// Fetch and print a list of the contributors to the library.
call.enqueue(new Callback&amp;lt;List&amp;lt;Contributor&amp;gt;&amp;gt;() {
    @Override
    public void onResponse(Response&amp;lt;List&amp;lt;Contributor&amp;gt;&amp;gt; response) {
        for (Contributor contributor : response.body()) {
            System.out.println(contributor.login + &amp;quot; (&amp;quot; + contributor.contributions + &amp;quot;)&amp;quot;);
        }
    }
    @Override
    public void onFailure(Throwable t) {
    }
});
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;这个使用方式看上去和Volley的方式完全不一样，使用Volley时你必须先创建一个&lt;code&gt;Request&lt;/code&gt;对象，包括这个请求的Method，Url，Url的参数，以及一个请求成功和失败的Listener，然后把这个请求放到&lt;code&gt;RequestQueue&lt;/code&gt;中，最后NetworkDispatcher会请求服务器获得数据。而&lt;code&gt;Retrofit&lt;/code&gt;只要创建一个接口就可以了，太不可思议了！！&lt;/p&gt;
&lt;p&gt;而我要说，其实这两种方式本质上是一样的，只是这个框架&lt;strong&gt;描述HTTP请求的方式不一样而已&lt;/strong&gt;。因此，&lt;strong&gt;你可以发现上面的&lt;code&gt;Github&lt;/code&gt;接口其实就是&lt;code&gt;Retrofit&lt;/code&gt;对一个HTTP请求的描述&lt;/strong&gt;&lt;/p&gt;
&lt;h1 id=&quot;2-Retrofit的原理&quot;&gt;&lt;a href=&quot;#2-Retrofit的原理&quot; class=&quot;headerlink&quot; title=&quot;2 Retrofit的原理&quot;&gt;&lt;/a&gt;2 Retrofit的原理&lt;/h1&gt;&lt;p&gt;Volley描述一个HTTP请求是需要创建一个&lt;code&gt;Request&lt;/code&gt;对象，而执行这个请求呢，就是把这个请求对象放到一个队列中，让网络线程去处理。&lt;/p&gt;
&lt;p&gt;Retrofit是怎么做的呢？答案就是&lt;strong&gt;Java的动态代理&lt;/strong&gt;&lt;/p&gt;
&lt;h2 id=&quot;动态代理&quot;&gt;&lt;a href=&quot;#动态代理&quot; class=&quot;headerlink&quot; title=&quot;动态代理&quot;&gt;&lt;/a&gt;动态代理&lt;/h2&gt;&lt;p&gt;当开始看Retrofit的代码，我对下面这句代码感到很困惑：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;// Create an instance of our GitHub API interface.
GitHub github = retrofit.create(GitHub.class);
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;我给Retrofit对象传了一个&lt;code&gt;Github&lt;/code&gt;接口的Class对象，怎么又返回一个&lt;code&gt;Github&lt;/code&gt;对象呢？进入&lt;code&gt;create&lt;/code&gt;方法一看，没几行代码，但是我觉得这几行代码就是Retrofit的精妙的地方：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;/** Create an implementation of the API defined by the {@code service} interface. */
@SuppressWarnings(&amp;quot;unchecked&amp;quot;) // Single-interface proxy creation guarded by parameter safety.
public &amp;lt;T&amp;gt; T create(final Class&amp;lt;T&amp;gt; service) {
  Utils.validateServiceInterface(service);
  if (validateEagerly) {
      eagerlyValidateMethods(service);
  }
  return (T) Proxy.newProxyInstance(service.getClassLoader(), new Class&amp;lt;?&amp;gt;[] { service },
    new InvocationHandler() {
      private final Platform platform = Platform.get();
      @Override public Object invoke(Object proxy, Method method, Object... args)
          throws Throwable {
        // If the method is a method from Object then defer to normal invocation.
        if (method.getDeclaringClass() == Object.class) {
          return method.invoke(this, args);
        }
        if (platform.isDefaultMethod(method)) {
          return platform.invokeDefaultMethod(method, service, proxy, args);
        }
        return loadMethodHandler(method).invoke(args);
      }
    });
}
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;看，&lt;code&gt;create&lt;/code&gt;方法重要就是返回了一个动态代理对象。那么问题来了…&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;动态代理是个什么东西？&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;看Retrofit代码之前我知道Java动态代理是一个很重要的东西，比如在Spring框架里大量的用到，但是它有什么用呢？&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Java动态代理就是Java开发给了开发人员一种可能：当你要调用某个类的方法前，插入你想要执行的代码&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;比如你要执行某个操作前，你必须要判断这个用户是否登录，或者你在付款前，你需要判断这个人的账户中存在这么多钱。这么简单的一句话，我相信可以把一个不懂技术的人也讲明白Java动态代理是什么东西了。&lt;/p&gt;
&lt;h2 id=&quot;为什么要使用动态代理&quot;&gt;&lt;a href=&quot;#为什么要使用动态代理&quot; class=&quot;headerlink&quot; title=&quot;为什么要使用动态代理&quot;&gt;&lt;/a&gt;为什么要使用动态代理&lt;/h2&gt;&lt;p&gt;你看上面代码，获取数据的代码就是这句:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;// Create a call instance for looking up Retrofit contributors.
Call&amp;lt;List&amp;lt;Contributor&amp;gt;&amp;gt; call = github.contributors(&amp;quot;square&amp;quot;, &amp;quot;retrofit&amp;quot;);
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;上面&lt;code&gt;github&lt;/code&gt;对象其实是一个动态代理对象，并不是一个真正的&lt;code&gt;Githb&lt;/code&gt;接口的&lt;code&gt;implements&lt;/code&gt;对象，当&lt;code&gt;github&lt;/code&gt;对象调用&lt;code&gt;contributors&lt;/code&gt;方法时，执行的是动态代理方法（你debug一下就知道了）&lt;/p&gt;
&lt;p&gt;此时，动态代理发挥了它的作用，你看上去是调用了&lt;code&gt;contributors&lt;/code&gt;方法，其实此时Retrofit把&lt;code&gt;Github&lt;/code&gt;接口翻译成一个HTTP请求，也就是Retrofit中的&lt;code&gt;MethodHandler&lt;/code&gt;对象，这个对象中包含了：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;OkHttpClient：发送网络请求的工具&lt;/li&gt;
&lt;li&gt;RequestFactory： 类似于Volley中的&lt;code&gt;Request&lt;/code&gt;，包含了HTTP请求的Url、Header信息，MediaType、Method以及RequestAction数组&lt;/li&gt;
&lt;li&gt;CallAdapter：HTTP请求返回数据的类型&lt;/li&gt;
&lt;li&gt;Converter：数据转换器&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;嗯，简单来说，Retrofit就是在你调用&lt;code&gt;Call&amp;lt;List&amp;lt;Contributor&amp;gt;&amp;gt; call = github.contributors(&amp;quot;square&amp;quot;, &amp;quot;retrofit&amp;quot;);&lt;/code&gt;后为你生成了一个Http请求，然后，你调用&lt;code&gt;call.enqueue&lt;/code&gt;方法时就发送了这个请求，然后你就可以处理Response的数据了，从原理上讲，就是这样的。如果要再往细节处说，就可以再说很多了&lt;/p&gt;
&lt;h1 id=&quot;3-Retrofit的源码分析&quot;&gt;&lt;a href=&quot;#3-Retrofit的源码分析&quot; class=&quot;headerlink&quot; title=&quot;3 Retrofit的源码分析&quot;&gt;&lt;/a&gt;3 Retrofit的源码分析&lt;/h1&gt;&lt;p&gt;想要弄清楚Retrofit的细节，先来看一下Retrofit源码的组成：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;一个&lt;code&gt;retrofit2.http&lt;/code&gt;包，里面全部是定义HTTP请求的注解，比如&lt;code&gt;GET&lt;/code&gt;、&lt;code&gt;POST&lt;/code&gt;、&lt;code&gt;PUT&lt;/code&gt;、&lt;code&gt;DELETE&lt;/code&gt;、&lt;code&gt;Headers&lt;/code&gt;、&lt;code&gt;Path&lt;/code&gt;、&lt;code&gt;Query&lt;/code&gt;等等&lt;/li&gt;
&lt;li&gt;余下的&lt;code&gt;retrofit2&lt;/code&gt;包中十几个类和接口就是全部retrofit的代码了，代码真的很少，很简单，因为retrofit把网络请求这部分功能全部交给了okHttp了&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&quot;Retrofit接口&quot;&gt;&lt;a href=&quot;#Retrofit接口&quot; class=&quot;headerlink&quot; title=&quot;Retrofit接口&quot;&gt;&lt;/a&gt;Retrofit接口&lt;/h2&gt;&lt;p&gt;我觉得你你必须要知道下面接口的含义&lt;/p&gt;
&lt;h3 id=&quot;Callback-lt-T-gt&quot;&gt;&lt;a href=&quot;#Callback-lt-T-gt&quot; class=&quot;headerlink&quot; title=&quot;Callback&amp;lt;T&amp;gt;&quot;&gt;&lt;/a&gt;&lt;code&gt;Callback&amp;lt;T&amp;gt;&lt;/code&gt;&lt;/h3&gt;&lt;p&gt;这个接口就是retrofit请求数据返回的接口，只有两个方法&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;void onResponse(Response&amp;lt;T&amp;gt; response);&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;void onFailure(Throwable t);&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;Converter-lt-F-T-gt&quot;&gt;&lt;a href=&quot;#Converter-lt-F-T-gt&quot; class=&quot;headerlink&quot; title=&quot;Converter&amp;lt;F, T&amp;gt;&quot;&gt;&lt;/a&gt;&lt;code&gt;Converter&amp;lt;F, T&amp;gt;&lt;/code&gt;&lt;/h3&gt;&lt;p&gt;这个接口主要的作用就是将HTTP返回的数据解析成Java对象，主要由Xml、Gson、protobuf等等，你可以在创建&lt;code&gt;Retrofit&lt;/code&gt;对象时添加你需要使用的&lt;code&gt;Converter&lt;/code&gt;实现（看上面创建Retrofit对象的代码）&lt;/p&gt;
&lt;h3 id=&quot;Call-lt-T-gt&quot;&gt;&lt;a href=&quot;#Call-lt-T-gt&quot; class=&quot;headerlink&quot; title=&quot;Call&amp;lt;T&amp;gt;&quot;&gt;&lt;/a&gt;&lt;code&gt;Call&amp;lt;T&amp;gt;&lt;/code&gt;&lt;/h3&gt;&lt;p&gt;这个接口主要的作用就是发送一个HTTP请求，Retrofit默认的实现是&lt;code&gt;OkHttpCall&amp;lt;T&amp;gt;&lt;/code&gt;，你可以根据实际情况实现你自己的Call类，这个设计和Volley的&lt;code&gt;HttpStack&lt;/code&gt;接口设计的思想非常相似，子类可以实现基于&lt;code&gt;HttpClient&lt;/code&gt;或&lt;code&gt;HttpUrlConnetction&lt;/code&gt;的HTTP请求工具，&lt;strong&gt;这种设计非常的插件化，而且灵活&lt;/strong&gt;&lt;/p&gt;
&lt;h3 id=&quot;CallAdapter-lt-T-gt&quot;&gt;&lt;a href=&quot;#CallAdapter-lt-T-gt&quot; class=&quot;headerlink&quot; title=&quot;CallAdapter&amp;lt;T&amp;gt;&quot;&gt;&lt;/a&gt;&lt;code&gt;CallAdapter&amp;lt;T&amp;gt;&lt;/code&gt;&lt;/h3&gt;&lt;p&gt;上面说到过，&lt;code&gt;CallAdapter&lt;/code&gt;中属性只有&lt;code&gt;responseType&lt;/code&gt;一个，还有一个&lt;code&gt;&amp;lt;R&amp;gt; T adapt(Call&amp;lt;R&amp;gt; call)&lt;/code&gt;方法，这个接口的实现类也只有一个，&lt;code&gt;DefaultCallAdapter&lt;/code&gt;。这个方法的主要作用就是将&lt;code&gt;Call&lt;/code&gt;对象转换成另一个对象，可能是为了支持RxJava才设计这个类的吧&lt;/p&gt;
&lt;h2 id=&quot;Retrofit的运行&quot;&gt;&lt;a href=&quot;#Retrofit的运行&quot; class=&quot;headerlink&quot; title=&quot;Retrofit的运行&quot;&gt;&lt;/a&gt;Retrofit的运行&lt;/h2&gt;&lt;p&gt;刚才讲到&lt;code&gt;GitHub github = retrofit.create(GitHub.class);&lt;/code&gt;代码返回了一个动态代理对象，而执行&lt;code&gt;Call&amp;lt;List&amp;lt;Contributor&amp;gt;&amp;gt; call = github.contributors(&amp;quot;square&amp;quot;, &amp;quot;retrofit&amp;quot;);&lt;/code&gt;代码时返回了一个&lt;code&gt;OkHttpCall&lt;/code&gt;对象，拿到这个&lt;code&gt;Call&lt;/code&gt;对象才能执行HTTP请求&lt;/p&gt;
&lt;p&gt;其中后一句代码执行了一个非常复杂的过程&lt;/p&gt;
&lt;p&gt;当执行了&lt;code&gt;contributors&lt;/code&gt;方法时，Retrofit其实是执行了动态代理的&lt;code&gt;InvocationHandler&lt;/code&gt;对象，最后会创建一个&lt;code&gt;MethodHandler&lt;/code&gt;对象，这个对象很重要&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;static MethodHandler&amp;lt;?&amp;gt; create(Retrofit retrofit, Method method) {
    CallAdapter&amp;lt;Object&amp;gt; callAdapter = (CallAdapter&amp;lt;Object&amp;gt;) createCallAdapter(method, retrofit);
    Type responseType = callAdapter.responseType();
    Converter&amp;lt;ResponseBody, Object&amp;gt; responseConverter =
        (Converter&amp;lt;ResponseBody, Object&amp;gt;) createResponseConverter(method, retrofit, responseType);
    RequestFactory requestFactory = RequestFactoryParser.parse(method, responseType, retrofit);

    return new MethodHandler&amp;lt;&amp;gt;(retrofit.client(), requestFactory, callAdapter, responseConverter);
}
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;上面代码就是创建一个&lt;code&gt;MethodHandler&lt;/code&gt;对象，一个&lt;code&gt;MethodHandler&lt;/code&gt;对象中包含了4个对象&lt;/p&gt;
&lt;h3 id=&quot;0-OkHttpClient&quot;&gt;&lt;a href=&quot;#0-OkHttpClient&quot; class=&quot;headerlink&quot; title=&quot;0. OkHttpClient&quot;&gt;&lt;/a&gt;0. OkHttpClient&lt;/h3&gt;&lt;p&gt;这个是Retrofit默认生成的&lt;/p&gt;
&lt;h3 id=&quot;1-RequestFactory：&quot;&gt;&lt;a href=&quot;#1-RequestFactory：&quot; class=&quot;headerlink&quot; title=&quot;1. RequestFactory：&quot;&gt;&lt;/a&gt;1. RequestFactory：&lt;/h3&gt;&lt;p&gt;通过&lt;code&gt;RequestFactoryParser.parse(method, responseType, retrofit);&lt;/code&gt;生成，主要作用就是&lt;strong&gt;解析整个Http请求的所有数据&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;主要原理就是解析一个接口，比如上面的&lt;code&gt;Github&lt;/code&gt;接口，结果就是得到整个Http请求全部的信息，还会通过&lt;code&gt;@Path&lt;/code&gt;和&lt;code&gt;@Query&lt;/code&gt;注解拼接Url&lt;/p&gt;
&lt;p&gt;不细讲了，全部代码都在&lt;code&gt;retrofit.RequestFactoryParser&lt;/code&gt;类中&lt;/p&gt;
&lt;h3 id=&quot;2-CallAdapter&quot;&gt;&lt;a href=&quot;#2-CallAdapter&quot; class=&quot;headerlink&quot; title=&quot;2. CallAdapter&quot;&gt;&lt;/a&gt;2. CallAdapter&lt;/h3&gt;&lt;p&gt;获取&lt;code&gt;CallAdapter&lt;/code&gt;的代码如下：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;private static CallAdapter&amp;lt;?&amp;gt; createCallAdapter(Method method, Retrofit retrofit) {
  Type returnType = method.getGenericReturnType();
  if (Utils.hasUnresolvableType(returnType)) {
    throw Utils.methodError(method,
      &amp;quot;Method return type must not include a type variable or wildcard: %s&amp;quot;, returnType);
  }
  if (returnType == void.class) {
    throw Utils.methodError(method, &amp;quot;Service methods cannot return void.&amp;quot;);
  }
  Annotation[] annotations = method.getAnnotations();
  try {
    return retrofit.callAdapter(returnType, annotations);
  } catch (RuntimeException e) { // Wide exception range because factories are user code.
    throw Utils.methodError(e, method, &amp;quot;Unable to create call adapter for %s&amp;quot;, returnType);
  }
}
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;你可以在创建Retrofit对象时，添加你想要的&lt;code&gt;CallAdapter&lt;/code&gt;，而获取&lt;code&gt;CallAdapter&lt;/code&gt;的方式也是从&lt;code&gt;Retrofit&lt;/code&gt;对象中获取&lt;/p&gt;
&lt;p&gt;默认的&lt;code&gt;DefaultCallAdapter&lt;/code&gt;几乎没有上面作用，基本和动画里面的&lt;code&gt;LinearInterpolator&lt;/code&gt;差不多&lt;/p&gt;
&lt;h3 id=&quot;3-Converter&quot;&gt;&lt;a href=&quot;#3-Converter&quot; class=&quot;headerlink&quot; title=&quot;3. Converter&quot;&gt;&lt;/a&gt;3. Converter&lt;/h3&gt;&lt;p&gt;获得&lt;code&gt;Converter&lt;/code&gt;对象和上面的原理几乎一样&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;private static Converter&amp;lt;ResponseBody, ?&amp;gt; createResponseConverter(Method method,
  Retrofit retrofit, Type responseType) {
  Annotation[] annotations = method.getAnnotations();
  try {
    return retrofit.responseBodyConverter(responseType, annotations);
  } catch (RuntimeException e) { // Wide exception range because factories are user code.
    throw Utils.methodError(e, method, &amp;quot;Unable to create converter for %s&amp;quot;, responseType);
  }
}
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;创建这4个对象的目的就是为了执行下面这句代码&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;Object invoke(Object... args) {
  return callAdapter.adapt(new OkHttpCall&amp;lt;&amp;gt;(client, requestFactory, responseConverter, args));
}
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;这个也就是&lt;code&gt;github.contributors(&amp;quot;square&amp;quot;, &amp;quot;retrofit&amp;quot;);&lt;/code&gt;返回的&lt;code&gt;Call&lt;/code&gt;对象&lt;/p&gt;
&lt;p&gt;最后你调用&lt;code&gt;Call&lt;/code&gt;对象的&lt;code&gt;execute()&lt;/code&gt;或&lt;code&gt;enqueue(Callback&amp;lt;T&amp;gt; callback)&lt;/code&gt;方法，就能发送一个Http请求了&lt;/p&gt;
&lt;p&gt;只不过前一种方式是同步的，后一种是异步的，&lt;strong&gt;也就是说Retrofit提供了同步和异步两种HTTP请求方式&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;你可能会觉得我只要发送一个HTTP请求，你要做这么多事情不会很“慢”吗？不会很浪费性能吗？&lt;/p&gt;
&lt;p&gt;我觉得，首先现在手机处理器主频非常高了，解析这个接口可能就花1ms可能更少的时间（我没有测试过），面对一个HTTP本来就需要几百ms，甚至几千ms来说不值得一提；而且Retrofit会对解析过的请求进行缓存，就在&lt;code&gt;Map&amp;lt;Method, MethodHandler&amp;lt;?&amp;gt;&amp;gt; methodHandlerCache&lt;/code&gt;这个对象中&lt;/p&gt;
&lt;h2 id=&quot;如何在Retrofit中使用RxJava&quot;&gt;&lt;a href=&quot;#如何在Retrofit中使用RxJava&quot; class=&quot;headerlink&quot; title=&quot;如何在Retrofit中使用RxJava&quot;&gt;&lt;/a&gt;如何在Retrofit中使用RxJava&lt;/h2&gt;&lt;p&gt;由于Retrofit设计的扩张性非常强，你只需要改变一下&lt;code&gt;CallAdapter&lt;/code&gt;就可以了&lt;/p&gt;
&lt;p&gt;  Retrofit retrofit = new Retrofit.Builder()&lt;br&gt;      .baseUrl(“&lt;a href=&quot;https://api.github.com&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;https://api.github.com&lt;/a&gt;“)&lt;br&gt;      .addConverterFactory(ProtoConverterFactory.create())&lt;br&gt;      .addConverterFactory(GsonConverterFactory.create())&lt;br&gt;      .addCallAdapterFactory(RxJavaCallAdapterFactory.create())&lt;br&gt;      .build();&lt;/p&gt;
&lt;p&gt;上面代码创建了一个&lt;code&gt;Retrofit&lt;/code&gt;对象，支持Proto和Gson两种数据格式，并且还支持RxJava&lt;/p&gt;
&lt;h1 id=&quot;4-最后&quot;&gt;&lt;a href=&quot;#4-最后&quot; class=&quot;headerlink&quot; title=&quot;4 最后&quot;&gt;&lt;/a&gt;4 最后&lt;/h1&gt;&lt;p&gt;&lt;strong&gt;Retrofit非常巧妙的用注解来描述一个HTTP请求，将一个HTTP请求抽象成一个Java接口，然后用了Java动态代理的方式，动态的将这个接口的注解“翻译”成一个HTTP请求，最后再执行这个HTTP请求&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Retrofit的功能非常多的依赖Java反射，代码中其实还有很多细节，比如异常的捕获、抛出和处理，大量的Factory设计模式（为什么要这么多使用Factory模式？）&lt;/p&gt;
&lt;p&gt;Retrofit中接口设计的恰到好处，在你创建&lt;code&gt;Retrofit&lt;/code&gt;对象时，让你有更多更灵活的方式去处理你的需求，比如使用不同的&lt;code&gt;Converter&lt;/code&gt;、使用不同的&lt;code&gt;CallAdapter&lt;/code&gt;，这也就提供了你使用RxJava来调用Retrofit的可能&lt;/p&gt;
&lt;p&gt;我也慢慢看了&lt;a href=&quot;http://square.github.io/picasso/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;&lt;code&gt;Picasso&lt;/code&gt;&lt;/a&gt;和&lt;code&gt;Retrofit&lt;/code&gt;的代码了，收获还是很多的，也更加深入的理解面向接口的编程方法，这个写代码就是&lt;strong&gt;好的代码就是依赖接口而不是实现&lt;/strong&gt;最好的例子&lt;/p&gt;
&lt;p&gt;好感谢开源的世界，让我能读到大牛的代码。我一直觉得一个人如果没有读过好的代码是不太可能写出好代码的。什么是好的代码？像&lt;code&gt;Picasso&lt;/code&gt;和&lt;code&gt;Retrofit&lt;/code&gt;这样的就是好的代码，扩展性强、低耦合、插件化&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;公司里最近做的项目中网络框架用的就是&lt;a href=&quot;http://square.github.io/retrofit/&quot;&gt;Retrofit&lt;/a&gt;，用的多了以后觉得这个框架真的非常好用，然后抽了点时间debug了一下源码，觉得不光代码写的非常好，而且设计这个框架的思路都非常特别，收获很多，决定记录下来&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;本文的源码分析基于Retrofit 2.0，和Retrofit 1.0有较大的不同&lt;/strong&gt;， 本文主要分为几部分：0、Retrofi 是什么，1、Retrofi怎么用，2、Retrofit的原理是什么，3、我的心得与看法&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;下面说的Retrofit全部指Retrofit 2&lt;/strong&gt;&lt;/p&gt;
    
    </summary>
    
    
      <category term="Android" scheme="http://bxbxbai.gitcafe.io/tags/Android/"/>
    
  </entry>
  
  <entry>
    <title>为什么技术团队应该写博客？</title>
    <link href="http://bxbxbai.gitcafe.io/2015/09/29/why-a-team-should-write-a-blog/"/>
    <id>http://bxbxbai.gitcafe.io/2015/09/29/why-a-team-should-write-a-blog/</id>
    <published>2015-09-29T11:16:25.000Z</published>
    <updated>2016-03-12T06:59:55.000Z</updated>
    
    <content type="html">&lt;p&gt;我本人平时很喜欢看一些博客，包括技术的和非技术的，慢慢也积累了很多博客列表，包括个人的和团队的&lt;/p&gt;
&lt;p&gt;很久以前我看到过大神刘未鹏写的文章：&lt;a href=&quot;http://mindhacks.cn/2009/02/15/why-you-should-start-blogging-now/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;为什么你应该（从现在开始就）写博客&lt;/a&gt;，文中很多道理直到我也开始写博客的时候才慢慢领悟到。比如，我可能对一个技术或概念很熟悉了，但是当我要说出来或者写下来给别人看的时候，就会发现有些技术的细节没考虑清楚。因此，当你写一篇博客的时候，其实你就是在逼迫你自己去把每一个细节都弄清楚&lt;/p&gt;
&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;
&lt;h2 id=&quot;国内外的技术博客&quot;&gt;&lt;a href=&quot;#国内外的技术博客&quot; class=&quot;headerlink&quot; title=&quot;国内外的技术博客&quot;&gt;&lt;/a&gt;国内外的技术博客&lt;/h2&gt;&lt;p&gt;我也列举一些我收藏的，也经常会看的博客（排序不分先后）。&lt;/p&gt;
&lt;h3 id=&quot;Facebook&quot;&gt;&lt;a href=&quot;#Facebook&quot; class=&quot;headerlink&quot; title=&quot;Facebook&quot;&gt;&lt;/a&gt;Facebook&lt;/h3&gt;&lt;p&gt;网址：&lt;a href=&quot;https://code.facebook.com&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;https://code.facebook.com&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;博客上会介绍一些Facebook在Android、iOS、前端、后端以及硬件技术遇到的问题，也包括一些他们团队研究的新技术，比如&lt;code&gt;fresco&lt;/code&gt;等等。我最感兴趣的是他们在技术上遇到的一些问题，然后他们是怎么解决的&lt;/p&gt;
&lt;h3 id=&quot;Square&quot;&gt;&lt;a href=&quot;#Square&quot; class=&quot;headerlink&quot; title=&quot;Square&quot;&gt;&lt;/a&gt;Square&lt;/h3&gt;&lt;p&gt;网址：&lt;a href=&quot;http://square.github.io/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;http://square.github.io/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Square应该是业界开源项目最多的公司之一了，它的github主页上列举了好多开源项目，一个做Android的如果没用过Square的开源库的话，要么你非常非常牛逼，要么你真的不关心开源项目&lt;/p&gt;
&lt;h3 id=&quot;美团&quot;&gt;&lt;a href=&quot;#美团&quot; class=&quot;headerlink&quot; title=&quot;美团&quot;&gt;&lt;/a&gt;美团&lt;/h3&gt;&lt;p&gt;网址：&lt;a href=&quot;http://tech.meituan.com/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;http://tech.meituan.com/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;从它的博客可以看到美团大概是从2013开慢慢写的，大概是因为2013后美团不断扩大，也慢慢积累了很多技术（踩了很多坑），博客上会写各种技术的：Android、iOS、前端、运维、机器学习等等~&lt;/p&gt;
&lt;h3 id=&quot;阿里&quot;&gt;&lt;a href=&quot;#阿里&quot; class=&quot;headerlink&quot; title=&quot;阿里&quot;&gt;&lt;/a&gt;阿里&lt;/h3&gt;&lt;p&gt;网址：&lt;a href=&quot;http://jaq.alibaba.com/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;阿里聚安全&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;抱歉我没有找到阿里公开的技术博客站点，之前我在阿里的时候，我在内网看到，公司内部会有很多人分享自己遇到的问题以及解决方法，公开的博客，我还没有发现&lt;/p&gt;
&lt;p&gt;网址：&lt;a href=&quot;http://yq.aliyun.com/teams/13?spm=5176.blog2696.yqblogcon1.2.AiZpYX&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;手机淘宝技术团队&lt;/a&gt;&lt;/p&gt;
&lt;h3 id=&quot;微信移动团队&quot;&gt;&lt;a href=&quot;#微信移动团队&quot; class=&quot;headerlink&quot; title=&quot;微信移动团队&quot;&gt;&lt;/a&gt;微信移动团队&lt;/h3&gt;&lt;p&gt;这个应该没有博客，只有微信公众号：WeMobileDev&lt;br&gt;貌似也是最近才开的，博客文章的质量非常高，每一篇基本都是微信移动团队经验的总结，详细介绍了他们遇到的困难以及如何解决的。比如：提升Android客户端会话速度提升70%背后的故事、Android微信只能心跳方案、Android拆分与加载Dex的多种方案等等&lt;/p&gt;
&lt;p&gt;每一篇都会具体到技术的细节，真正的解决每一个问题，非常赞这样的技术团队&lt;/p&gt;
&lt;h3 id=&quot;腾讯的bugly&quot;&gt;&lt;a href=&quot;#腾讯的bugly&quot; class=&quot;headerlink&quot; title=&quot;腾讯的bugly&quot;&gt;&lt;/a&gt;腾讯的bugly&lt;/h3&gt;&lt;p&gt;网址：&lt;a href=&quot;http://bugly.qq.com/blog/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;http://bugly.qq.com/blog/&lt;/a&gt;&lt;br&gt;Bugly的博客会介绍一些Android和iOS开发过程中帮助我们性能分析的方法，比如如何衡量一个App的卡顿情况呢？Bugly的博客告诉你，使用&lt;code&gt;Choreographer.FrameCallback&lt;/code&gt;这个工具。还有很多其他的性能分析的技巧&lt;/p&gt;
&lt;h2 id=&quot;为什么要开始写博客&quot;&gt;&lt;a href=&quot;#为什么要开始写博客&quot; class=&quot;headerlink&quot; title=&quot;为什么要开始写博客&quot;&gt;&lt;/a&gt;为什么要开始写博客&lt;/h2&gt;&lt;p&gt;刘未鹏的文章其实已经回答了这个问题，那是一篇非常好的文章。&lt;/p&gt;
&lt;p&gt;不过我还是想说说我自己的想法：&lt;/p&gt;
&lt;p&gt;首先，可以有技术沉淀。一个公司或者技术团队（简称团队）肯定在业务发展的过程中会遇到并且解决很多的技术难题，如果把这些经验记下来，并且对外公布（如果没有涉及公司机密的话），这样会让很多人受益。&lt;/p&gt;
&lt;p&gt;其次，可以促进技术交流，然后吸引公司外部喜欢技术的人加入公司。我始终相信，一个热爱技术的人，肯定是喜欢和技术牛X的人待一起工作的。而且，我也相信，当一个人真正喜欢技术以后，在走路或者吃饭的时候谈技术都是很平常的事情。比如，像微信移动团队那样，输出高质量的技术文章，是肯定可以吸引到热爱技术的人，这样的话团队只会越来越强&lt;/p&gt;
&lt;p&gt;最后，&lt;a href=&quot;http://mindhacks.cn/2009/02/09/writing-is-better-thinking/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;写作是为了更好的思考&lt;/a&gt;。这是刘未鹏说的，书写可以让你整理你思考的内容，写下来和我自己想想还是有很大区别的。写作还可以激励团队持续的学习，技术在不断发展，技术难题也在不断增加，让团队持续学习才是根本呀&lt;/p&gt;
&lt;h2 id=&quot;最后&quot;&gt;&lt;a href=&quot;#最后&quot; class=&quot;headerlink&quot; title=&quot;最后&quot;&gt;&lt;/a&gt;最后&lt;/h2&gt;&lt;p&gt;从上面的博客中可以看到，优秀的技术公司是总结并且分享自己经验，然而卓越而伟大的技术公司，比如Facebook和Square等，是在创造新的技术，比如&lt;code&gt;fresco&lt;/code&gt;、&lt;code&gt;stetho&lt;/code&gt;、&lt;code&gt;okhttp&lt;/code&gt;和&lt;code&gt;retrofit&lt;/code&gt;等等&lt;/p&gt;
&lt;p&gt;我是相信一些技术牛逼或者正在成为技术牛逼的人都是发自内心的喜欢技术，可能开始ta的技术并不是很厉害，但是ta会花空余的时间去了解并且研究一些新的技术。然后，自己不断总结和反思，这样的人对一个团队和公司都是一种财富&lt;/p&gt;
&lt;p&gt;我自己有体会，之前遇到的难题，我解决了，如果不总结一下，有些会随着时间慢慢忘记掉，所以我自己写博客很大一部分原因也是为了自己以后来温故自己的经验&lt;/p&gt;
&lt;p&gt;如果你经常看不错的技术博客，欢迎和我分享~&lt;/p&gt;
&lt;hr&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;我本人平时很喜欢看一些博客，包括技术的和非技术的，慢慢也积累了很多博客列表，包括个人的和团队的&lt;/p&gt;
&lt;p&gt;很久以前我看到过大神刘未鹏写的文章：&lt;a href=&quot;http://mindhacks.cn/2009/02/15/why-you-should-start-blogging-now/&quot;&gt;为什么你应该（从现在开始就）写博客&lt;/a&gt;，文中很多道理直到我也开始写博客的时候才慢慢领悟到。比如，我可能对一个技术或概念很熟悉了，但是当我要说出来或者写下来给别人看的时候，就会发现有些技术的细节没考虑清楚。因此，当你写一篇博客的时候，其实你就是在逼迫你自己去把每一个细节都弄清楚&lt;/p&gt;
    
    </summary>
    
    
      <category term="杂感" scheme="http://bxbxbai.gitcafe.io/tags/%E6%9D%82%E6%84%9F/"/>
    
  </entry>
  
  <entry>
    <title>谈谈App混合开发</title>
    <link href="http://bxbxbai.gitcafe.io/2015/08/16/talk-about-bybird-app/"/>
    <id>http://bxbxbai.gitcafe.io/2015/08/16/talk-about-bybird-app/</id>
    <published>2015-08-16T08:07:11.000Z</published>
    <updated>2015-12-23T07:25:54.000Z</updated>
    
    <content type="html">&lt;p&gt;混合开发的App（Hybrid App）就是在一个App中内嵌一个轻量级的浏览器，一部分原生的功能改为Html 5来开发，这部分功能不仅能够在不升级App的情况下动态更新，而且可以在Android或iOS的App上同时运行，让用户的体验更好又可以节省开发的资源。&lt;/p&gt;
&lt;p&gt;下面来谈谈Hybrid App开发中的技术问题。iOS方面的我不太了解，我就主要谈谈Android开发中的，其中可能会有很多说错的，请大家轻喷&lt;/p&gt;
&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;
&lt;h1 id=&quot;Hybrid开发中关键问题是什么&quot;&gt;&lt;a href=&quot;#Hybrid开发中关键问题是什么&quot; class=&quot;headerlink&quot; title=&quot;Hybrid开发中关键问题是什么&quot;&gt;&lt;/a&gt;Hybrid开发中关键问题是什么&lt;/h1&gt;&lt;p&gt;想要在一个App中显示一个Html 5网页的功能，其实很简单，只要一个WebView就可以了。你可以点击链接来跳转网页。像这样的功能就能叫做Hybrid 开发了嘛？显然不是的。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;我觉得一个Hybrid开发的App中必须要要有的功能就是Html 5页面和Native App怎么进行交互&lt;/strong&gt;。比如，我点了一个Html 5页面上的一个按钮或链接，我能不能够跳转到Native App的某个页面；比如我点了Html 5页面上的分享按钮，我能不能调用Native App的分享功能；比如Html加载的时候能不能获取Native App的用户信息等等。&lt;/p&gt;
&lt;p&gt;看下图，在网易云音乐中进入这个Html 5页面时，你点击&lt;strong&gt;作者：空虚小编&lt;/strong&gt;你会进入他的主页，这个主页是Native页面，而你点击上面那个播放按钮时，云音乐会启动Native的播放界面播放音乐，你点击评论时，你会进入Native的评论页&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://i1.tietuku.com/5575cfa4108a1f0e.png&quot; alt=&quot;此处输入图片的描述&quot;&gt;&lt;/p&gt;
&lt;h1 id=&quot;Html-5和Native的交互&quot;&gt;&lt;a href=&quot;#Html-5和Native的交互&quot; class=&quot;headerlink&quot; title=&quot;Html 5和Native的交互&quot;&gt;&lt;/a&gt;Html 5和Native的交互&lt;/h1&gt;&lt;p&gt;&lt;code&gt;WebView&lt;/code&gt;本来就支持js和Java相互调用，你只需要开启&lt;code&gt;WebView&lt;/code&gt;的JavaScript脚本执行，然后通过代码&lt;code&gt;mWebView.addJavascriptInterface(new JsBridge(), &amp;quot;bxbxbai&amp;quot;);&lt;/code&gt;向Html 5页面时注入一个Java对象，然后就可以在Html 5页面中调用Native的功能了&lt;/p&gt;
&lt;h2 id=&quot;微信怎么做的&quot;&gt;&lt;a href=&quot;#微信怎么做的&quot; class=&quot;headerlink&quot; title=&quot;微信怎么做的&quot;&gt;&lt;/a&gt;微信怎么做的&lt;/h2&gt;&lt;p&gt;微信应该是Hybrid 开发做的最好的App之一，它是怎么做交互的呢？&lt;/p&gt;
&lt;p&gt;答案就是&lt;code&gt;微信JS-SDK&lt;/code&gt;，去微信开发者文档中可以看到，微信JS-SDK封装了各种微信的功能，比如分享到朋友圈，图像接口，音频接口，支付接口地理位置接口等等。开发者只需要调用微信JS-SDK中的函数，然后统一由JS-SDK来调用微信中的功能，这样好处就是我写了一个Html 5的应用或网页，在Android和iOS的微信中都可以正常运行了&lt;/p&gt;
&lt;p&gt;下面会详细讲到&lt;/p&gt;
&lt;h2 id=&quot;网易云音乐怎么做的&quot;&gt;&lt;a href=&quot;#网易云音乐怎么做的&quot; class=&quot;headerlink&quot; title=&quot;网易云音乐怎么做的&quot;&gt;&lt;/a&gt;网易云音乐怎么做的&lt;/h2&gt;&lt;p&gt;那么网易云音乐是怎么做的呢？我用黑科技知道了上图云音乐的界面Activity是&lt;code&gt;CommonSubjectActivity&lt;/code&gt;（名字好奇怪，如果要我从代码里找，我肯定找不到，因为还有一个类叫做&lt;code&gt;EmbedBrowserActivity&lt;/code&gt;），我就在反编译后的云音乐代码中找相应的功能实现代码，实在没找到。不过我拿到了那个Html 5页面的地址：&lt;a href=&quot;http://music.163.com/m/topic/194001&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;http://music.163.com/m/topic/194001&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;用Chrome打开后发现和App中显示的不一样，然后我用Charles截了进入那个Html 5的请求，发现云音乐加载的地址是&lt;a href=&quot;http://music.163.com/m/topic/194001?type=android&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;http://music.163.com/m/topic/194001?type=android&lt;/a&gt; ，就是加了手机系统类型&lt;/p&gt;
&lt;p&gt;然后在我自己的App中加载这个Html 5页面就可以看到下图，&lt;strong&gt;@小比比说&lt;/strong&gt;这样的文字是可以点击跳转到个人，点击播放按钮是可以播放音乐的&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://i3.tietuku.com/b00f74ef47f9ee0d.png&quot; alt=&quot;此处输入图片的描述&quot;&gt;&lt;/p&gt;
&lt;p&gt;从Html源代码中可以看到如下信息：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://i3.tietuku.com/0197b3a47d0c2f1a.png&quot; alt=&quot;此处输入图片的描述&quot;&gt;&lt;/p&gt;
&lt;p&gt;也就是说，当我点击一个用户名的时候就请求跳转到&lt;code&gt;orpheus://user/30868859&lt;/code&gt;，因为WebView可以拦截跳转的url，所以App在拦截每一个url，如果host是&lt;code&gt;orpheus&lt;/code&gt;的话就启动用户首页&lt;/p&gt;
&lt;p&gt;反编译代码后，在云音乐的代码中找到了&lt;code&gt;this.mWebView.setWebViewClient(new cf(this));&lt;/code&gt;这么一句代码，进入&lt;code&gt;cf&lt;/code&gt;类，发现下面代码：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;public boolean shouldOverrideUrlLoading(WebView webView, String url) {
    if (url.startsWith(&amp;quot;orpheus://&amp;quot;)) {
        RedirectActivity.a(this.activity, url);
        return true;
    }
    if ((url.toLowerCase().startsWith(&amp;quot;http://&amp;quot;)) || (url.toLowerCase().startsWith(&amp;quot;https://&amp;quot;))) {
        return false;
    }
    try {
        this.activity.startActivity(new Intent(&amp;quot;android.intent.action.VIEW&amp;quot;, Uri.parse(url)));
        return true;
    } catch (ActivityNotFoundException localActivityNotFoundException) {
        localActivityNotFoundException.printStackTrace();
    }
    return true;
}
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;果然如此，再进入&lt;code&gt;RedirectActivity&lt;/code&gt;，这是一个没有任何界面的Activity，专门用于处理页面跳转信息，它会调用一个方法&lt;code&gt;NeteaseMusicUtils.redirect(this, getIntent().getData().toString(), false)&lt;/code&gt;来处理url，&lt;code&gt;redirect&lt;/code&gt;方法的名字是我自己写的，部分代码如下：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://i3.tietuku.com/99edcdc0195316cf.png&quot; alt=&quot;此处输入图片的描述&quot;&gt;&lt;/p&gt;
&lt;p&gt;可以看到&lt;code&gt;orpheus://user/30868859&lt;/code&gt;中的用户id被传入了&lt;code&gt;ProfileAcvitiy&lt;/code&gt;，因此启动了用户首页显示了用户信息&lt;/p&gt;
&lt;p&gt;然后我自己写了代码拦截Html 5的跳转，打印出的Log如下：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://i3.tietuku.com/68f3abf5eb92745c.png&quot; alt=&quot;此处输入图片的描述&quot;&gt;&lt;/p&gt;
&lt;p&gt;可以看到Html 5页面可以跳转到各种页面，比如用户首页、播放音乐、MV界面、评论页、电台节目等等&lt;/p&gt;
&lt;h2 id=&quot;总结&quot;&gt;&lt;a href=&quot;#总结&quot; class=&quot;headerlink&quot; title=&quot;总结&quot;&gt;&lt;/a&gt;总结&lt;/h2&gt;&lt;p&gt;一般来讲，也是我目前知道的两种主流的方式就是&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;js调用Native中的代码&lt;/li&gt;
&lt;li&gt;Schema：WebView拦截页面跳转&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;第2种方式实现起来很简单，但是一个致命的问题就是这种交互方式是单向的，Html 5无法实现回调。像云音乐App中这种点击跳转到具体页面的功能，Schema的方式确实可以简单实现，而且也非常适合。如果需求变得复杂，假如Html 5需要获取Native App中的用户信息，那么最好使用js调用的方式。&lt;/p&gt;
&lt;h1 id=&quot;js和Native进行交互&quot;&gt;&lt;a href=&quot;#js和Native进行交互&quot; class=&quot;headerlink&quot; title=&quot;js和Native进行交互&quot;&gt;&lt;/a&gt;js和Native进行交互&lt;/h1&gt;&lt;p&gt;上面讲到WebViewbe本身就是支持js调用Native代码的，不过WebView的这个功能在Android 4.2（API 17）一下存在高危的漏洞。这个漏洞的原理就是Android系统通过&lt;code&gt;WebView.addJavascriptInterface(Object o, String interface)&lt;/code&gt;方法注册可供js调用的Java对象，但是系统并没有对注册的Java对象方法调用做限制。导致攻击者可以利用反射调用未注册的其他任何Java对象，攻击者可以根据客户端的能力做任何事情。&lt;a href=&quot;http://jaq.alibaba.com/blog.htm?id=48&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;这篇文章&lt;/a&gt;详细的介绍了这个漏洞&lt;/p&gt;
&lt;p&gt;出于安全考虑，Android 4.2以后的系统规定允许被js调用的Java方法必须以&lt;code&gt;@JavascriptInterface&lt;/code&gt;进行注解&lt;/p&gt;
&lt;h2 id=&quot;Cordova的解决方案&quot;&gt;&lt;a href=&quot;#Cordova的解决方案&quot; class=&quot;headerlink&quot; title=&quot;Cordova的解决方案&quot;&gt;&lt;/a&gt;Cordova的解决方案&lt;/h2&gt;&lt;p&gt;Cordova是一个广泛使用的Hybrid开发框架，它提供了一套js和Native交互规范&lt;/p&gt;
&lt;p&gt;在Cordova的&lt;code&gt;SystemWebViewEngine&lt;/code&gt;类中可以看到&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;private static void exposeJsInterface(WebView webView, CordovaBridge bridge) {
    if ((Build.VERSION.SDK_INT &amp;lt; Build.VERSION_CODES.JELLY_BEAN_MR1)) {
        Log.i(TAG, &amp;quot;Disabled addJavascriptInterface() bridge since Android version is old.&amp;quot;);
        // Bug being that Java Strings do not get converted to JS strings automatically.
        // This isn&amp;apos;t hard to work-around on the JS side, but it&amp;apos;s easier to just
        // use the prompt bridge instead.
        return;
    }
    webView.addJavascriptInterface(new SystemExposedJsApi(bridge), &amp;quot;_cordovaNative&amp;quot;);
}
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;因此当Android系统高于4.2时，Cordova还是使用&lt;code&gt;addJavascriptInterface&lt;/code&gt;这种方式，因为这个方法在高版本上安全而且简单，低于4.2的时候，用什么方法呢？&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;答案是&lt;code&gt;WebChromeClient.onJsPrompt&lt;/code&gt;方法&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;WebView可以设置一个&lt;code&gt;WebChromeClient&lt;/code&gt;对象，它可以处理js的3个方法&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;onJsAlert&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;onJsConfirm&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;onJsPrompt&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;这3个方法分别对应js的&lt;code&gt;alert&lt;/code&gt;、&lt;code&gt;confirm&lt;/code&gt;、&lt;code&gt;prompt&lt;/code&gt;方法，因为只有&lt;code&gt;prompt&lt;/code&gt;接收返回值，所以js调用一个Native方法后可以等待Native返回一个参数。下面是&lt;code&gt;cordova.js&lt;/code&gt;中的一段代码：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;/**
* Implements the API of ExposedJsApi.java, but uses prompt() to communicate.
* This is used pre-JellyBean, where addJavascriptInterface() is disabled.
*/
module.exports = {
    exec: function(bridgeSecret, service, action, callbackId, argsJson) {
        return prompt(argsJson, &amp;apos;gap:&amp;apos;+JSON.stringify([bridgeSecret, service, action, callbackId]));
    },
    setNativeToJsBridgeMode: function(bridgeSecret, value) {
        prompt(value, &amp;apos;gap_bridge_mode:&amp;apos; + bridgeSecret);
    },
    retrieveJsMessages: function(bridgeSecret, fromOnlineEvent) {
        return prompt(+fromOnlineEvent, &amp;apos;gap_poll:&amp;apos; + bridgeSecret);
    }
};
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;然后只要在&lt;code&gt;onJsPrompt&lt;/code&gt;方法中使用&lt;code&gt;CordovaBridge&lt;/code&gt;来处理js的prompt调用&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;/**
 * Tell the client to display a prompt dialog to the user. If the client returns true, WebView will assume that the client will handle the prompt dialog and call the appropriate JsPromptResult method.
 * &amp;lt;p/&amp;gt;
 * Since we are hacking prompts for our own purposes, we should not be using them for this purpose, perhaps we should hack console.log to do this instead!
 */
@Override
public boolean onJsPrompt(WebView view, String origin, String message, String defaultValue, final JsPromptResult result) {
    // Unlike the @JavascriptInterface bridge, this method is always called on the UI thread.
    String handledRet = parentEngine.bridge.promptOnJsPrompt(origin, message, defaultValue);
    if (handledRet != null) {
        result.confirm(handledRet);
    } else {
        dialogsHelper.showPrompt(message, defaultValue, new CordovaDialogsHelper.Result() {
            @Override
            public void gotResult(boolean success, String value) {
                if (success) {
                    result.confirm(value);
                } else {
                    result.cancel();
                }
            }
        });
    }
    return true;
}
&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&quot;一种开源的解决方案&quot;&gt;&lt;a href=&quot;#一种开源的解决方案&quot; class=&quot;headerlink&quot; title=&quot;一种开源的解决方案&quot;&gt;&lt;/a&gt;一种开源的解决方案&lt;/h2&gt;&lt;p&gt;Cordova是Apache的一个开源解决方案，不过它需要xml配置&lt;code&gt;CordovaPlugin&lt;/code&gt;信息，使用会比较麻烦，而且这个框架很重，具体请自行搜索Cordova使用教程&lt;/p&gt;
&lt;p&gt;下面这个开源项目是我个人觉得比较合理的解决方案，也比较轻量级，下图就是一个Demo&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/pedant/safe-java-js-webview-bridge&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;https://github.com/pedant/safe-java-js-webview-bridge&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://i3.tietuku.com/14cc4af678f56eaf.png&quot; alt=&quot;此处输入图片的描述&quot;&gt;&lt;/p&gt;
&lt;p&gt;这个项目的原理就是使用&lt;code&gt;WebChromeClient.onJsPrompt&lt;/code&gt;方法来进行交互，本质上都是js调用&lt;code&gt;prompt&lt;/code&gt;函数，传输一些参数，&lt;code&gt;onJsPrompt&lt;/code&gt;方法拦截到prompt动作，然后解析数据，最后调用相应的Native方法&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;HostJsScope&lt;/strong&gt;类中定义了所有可以被js调用的方法，这些方法都必须是静态方法，并且所有的方法第一个参数必须是WebView&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;/**
* HostJsScope中需要被JS调用的函数，必须定义成public static，且必须包含WebView这个参数
*/
public class HostJsScope {
    /**
    * 短暂气泡提醒
    * @param webView 浏览器
    * @param message 提示信息
    * */
    public static void toast(WebView webView, String message) {
        Toast.makeText(webView.getContext(), message, Toast.LENGTH_SHORT).show();
    }

    /**
    * 系统弹出提示框
    * @param webView 浏览器
    * @param message 提示信息
    * */
    public static void alert(WebView webView, String message) {
        // 构建一个Builder来显示网页中的alert对话框
        AlertDialog.Builder builder = new AlertDialog.Builder(webView.getContext());
        builder.setPositiveButton(android.R.string.ok, new AlertDialog.OnClickListener() {
            @Override
            public void onClick(DialogInterface dialog, int which) {
                dialog.dismiss();
            }
        });
        builder.setTitle(&amp;quot;Hello world&amp;quot;)
            .setMessage(message)
            .setCancelable(false)
            .create()
            .show();
    }

    // 其他代码

}
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;上面代码列举了最基本的点击Html 5按钮弹出对话框的功能&lt;/p&gt;
&lt;p&gt;这个库中一个最关键的叫做&lt;code&gt;JsCallJava&lt;/code&gt;，这个实现的就是js来调用Java方法的功能，这个类只用于&lt;code&gt;InjectedWebChromeClient&lt;/code&gt;类&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;public class InjectedChromeClient extends WebChromeClient {

    private JsCallJava mJsCallJava;
    private boolean mIsInjectedJS;

    public InjectedChromeClient(String injectedName, Class injectedCls) {
        this(new JsCallJava(injectedName, injectedCls));
    }

    public InjectedChromeClient(JsCallJava jsCallJava) {
        mJsCallJava = jsCallJava;
    }

    // 处理Alert事件
    @Override
    public boolean onJsAlert(WebView view, String url, String message, final JsResult result) {
        result.confirm();
        return true;
    }

    @Override
    public void onProgressChanged(WebView view, int newProgress) {
        //为什么要在这里注入JS
        //1 OnPageStarted中注入有可能全局注入不成功，导致页面脚本上所有接口任何时候都不可用
        //2 OnPageFinished中注入，虽然最后都会全局注入成功，但是完成时间有可能太晚，当页面在初始化调用接口函数时会等待时间过长
        //3 在进度变化时注入，刚好可以在上面两个问题中得到一个折中处理
        //为什么是进度大于25%才进行注入，因为从测试看来只有进度大于这个数字页面才真正得到框架刷新加载，保证100%注入成功
        if (newProgress &amp;lt;= 25) {
            mIsInjectedJS = false;
        } else if (!mIsInjectedJS) {
            view.loadUrl(mJsCallJava.getPreloadInterfaceJS());
            mIsInjectedJS = true;
            StopWatch.log(&amp;quot; inject js interface completely on progress &amp;quot; + newProgress);
        }
        super.onProgressChanged(view, newProgress);
    }

    @Override
    public boolean onJsPrompt(WebView view, String url, String message, String defaultValue, JsPromptResult result) {
        result.confirm(mJsCallJava.call(view, message));
        StopWatch.log(&amp;quot;onJsPrompt: &amp;quot; + view.toString() +&amp;quot;, &amp;quot; + url +&amp;quot;, &amp;quot; + message +&amp;quot;, &amp;quot; + defaultValue + &amp;quot;, &amp;quot; + result) ;
        return true;
    }
}   
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;这个&lt;code&gt;InjectedWebChromeClient&lt;/code&gt;是设给WebView的，这里一个非常重要的细节需要注意一下，在&lt;code&gt;onProgressChange&lt;/code&gt;方法中，向WebView注入了一段js代码，这段js代码如下：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;javascript: (function(b) {
    console.log(&amp;quot;HostApp initialization begin&amp;quot;);
    var a = {
        queue: [],
        callback: function() {
            var d = Array.prototype.slice.call(arguments, 0);
            var c = d.shift();
            var e = d.shift();
            this.queue[c].apply(this, d);
            if (!e) {
                delete this.queue[c]
            }
        }
    };
    a.alert = a.alert = a.alert = a.delayJsCallBack = a.getIMSI = a.getOsSdk = a.goBack = a.overloadMethod = a.overloadMethod 
        = a.passJson2Java = a.passLongType = a.retBackPassJson = a.retJavaObject = a.testLossTime = a.toast = a.toast = function() {
        var f = Array.prototype.slice.call(arguments, 0);
        if (f.length &amp;lt; 1) {
            throw &amp;quot;HostApp call error, message:miss method name&amp;quot;
        }
        var e = [];
        for (var h = 1; h &amp;lt; f.length; h++) {
            var c = f[h];
            var j = typeof c;
            e[e.length] = j;
            if (j == &amp;quot;function&amp;quot;) {
                var d = a.queue.length;
                a.queue[d] = c;
                f[h] = d
            }
        }
        var g = JSON.parse(prompt(JSON.stringify({
            method: f.shift(),
            types: e,
            args: f
        })));
        if (g.code != 200) {
            throw &amp;quot;HostApp call error, code:&amp;quot; + g.code + &amp;quot;, message:&amp;quot; + g.result
        }
        return g.result
    };
    //有时候，我们希望在该方法执行前插入一些其他的行为用来检查当前状态或是监测
    //代码行为，这就要用到拦截（Interception）或者叫注入（Injection）技术了
    /**
     * Object.getOwnPropertyName 返回一个数组，内容是指定对象的所有属性
     *
     * 其后遍历这个数组，分别做以下处理：
     * 1. 备份原始属性；
     * 2. 检查属性是否为 function（即方法）；
     * 3. 若是重新定义该方法，做你需要做的事情，之后 apply 原来的方法体。
     */
    Object.getOwnPropertyNames(a).forEach(function(d) {
        var c = a[d];
        if (typeof c === &amp;quot;function&amp;quot; &amp;amp;&amp;amp; d !== &amp;quot;callback&amp;quot;) {
            a[d] = function() {
                return c.apply(a, [d].concat(Array.prototype.slice.call(arguments, 0)))
            }
        }
    });
    b.HostApp = a;
    console.log(&amp;quot;HostApp initialization end&amp;quot;)
})(window);
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;那么这段js代码是如何生成的呢？答案就在&lt;code&gt;JsCallJava&lt;/code&gt;类的构造函数方法中，这个构造方法做的事情就是解析&lt;code&gt;HostJsScope&lt;/code&gt;类中的方法，把每一个方法的签名都保持到&lt;code&gt;private Map&amp;lt;String, Method&amp;gt; mMethodsMap&lt;/code&gt;中，再看上面那段js代码中&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;a.alert = a.alert = a.alert = a.delayJsCallBack = a.getIMSI = a.getOsSdk = a.goBack = a.overloadMethod = a.overloadMethod&lt;br&gt;            = a.passJson2Java = a.passLongType = a.retBackPassJson = a.retJavaObject = a.testLossTime = a.toast = a.toast = function()&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;这些都是&lt;code&gt;HostJsScope&lt;/code&gt;类中定义的方法名&lt;/p&gt;
&lt;p&gt;那么这个库的整个执行流程是这样的：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;code&gt;JsCallJava&lt;/code&gt;类解析了&lt;code&gt;HostJsScope&lt;/code&gt;类中所有的静态方法，将它们放到一个Map中，并且生成一段js代码&lt;/li&gt;
&lt;li&gt;向WebView设置&lt;code&gt;InjectedChromeClient&lt;/code&gt;，在&lt;code&gt;onProgressChanged&lt;/code&gt;方法中将那段js代码注入到Html5页面中，这个过程通俗点讲就是，&lt;strong&gt;Native告诉Html 5页面，我开放了什么功能给你，你就来调用我&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;这样js就可以调用Native提供的这些方法，那段js代码还会将js执行的方法转换成一段json字符串，通过js的prompt方法传到&lt;code&gt;onJsPrompt&lt;/code&gt;方法中，&lt;code&gt;JsCallJava&lt;/code&gt;调用&lt;code&gt;call(WebView view, String msg)&lt;/code&gt;解析json字符串，包括要执行的&lt;strong&gt;方法名字&lt;/strong&gt;，&lt;strong&gt;参数类型&lt;/strong&gt;和&lt;strong&gt;方法参数&lt;/strong&gt;，其中还会验证json中的方法参数类型和&lt;code&gt;HostJsScope&lt;/code&gt;中同名方法参数类型是否一致等等。&lt;/li&gt;
&lt;li&gt;最后，如果方法正确执行，&lt;code&gt;call&lt;/code&gt;方法就返回一个json字符串code=200，否则就传code=500，这个信息会通过&lt;code&gt;prompt&lt;/code&gt;方法的返回值传给js，这样Html 5 代码就能知道有没有正确执行了&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;以上就是这个开源库的整个原理，我个人觉得非常适合用于Hybrid开发，这个解决方案中js可以收到Native的返回值，而且没有使用&lt;code&gt;addJavascriptInterface&lt;/code&gt;方法，在低版本手机上也不会有安全问题，这个方法比Cordova的实现和配置简单&lt;/p&gt;
&lt;p&gt;那么当我点击Html 5页面上的一个按钮，比如弹出对话框，这个过程的整体流程是怎么样的呢&lt;/p&gt;
&lt;h2 id=&quot;微信的解决方案？&quot;&gt;&lt;a href=&quot;#微信的解决方案？&quot; class=&quot;headerlink&quot; title=&quot;微信的解决方案？&quot;&gt;&lt;/a&gt;微信的解决方案？&lt;/h2&gt;&lt;p&gt;什么？你问我微信是怎么解决的？我也反编译了微信的代码，想研究一下他们是解决的，其实我非常好奇微信的这种js 调用Native，并且又返回的调用方法&lt;/p&gt;
&lt;p&gt;首先，我去微信的js sdk官网看了一下js sdk提供的功能，提供了各种强大的功能，各位可以自己去看一下。那么问题来了，微信是怎么做到js 调用Native并且能够成功返回的呢？&lt;/p&gt;
&lt;p&gt;带着疑问我反编译了微信Android客户端，在assers/jsapi中看到了&lt;code&gt;wxjs.js&lt;/code&gt;文件，我想这个就是微信js sdk的源码了吧。。。&lt;/p&gt;
&lt;p&gt;我首先说一下，我不太懂js的代码， 我只能连蒙带猜的看微信的js代码，&lt;code&gt;如果有js大神对这方面也感兴趣，希望可以一起(jian)探(fei)讨(zao)&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;在&lt;code&gt;wxjs.js&lt;/code&gt;中看到了一下代码，我猜微信就是用这个&lt;code&gt;__WeixinJSBridge&lt;/code&gt;当时js和Native进行通信的数据结构吧？&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;var __WeixinJSBridge = {
    // public
    invoke:_call,
    call:_call,
    on:_onfor3rd,
    env:_env,
    log:_log,
    // private
    // _test_start:_test_start,
    _fetchQueue: _fetchQueue,
    _handleMessageFromWeixin: _handleMessageFromWeixin,
    _hasInit: false,
    _continueSetResult: _continueSetResult
};
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;然后我又看到了下面的代码，我想应该是提供分享内容到朋友圈功能的吧&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;// share timeline
_on(&amp;apos;menu:share:timeline&amp;apos;,function(argv){
  _log(&amp;apos;share timeline&amp;apos;);

  var data;
  if (typeof argv.title === &amp;apos;string&amp;apos;) {
    data = argv;
    _call(&amp;apos;shareTimeline&amp;apos;,data);
  }else{
    data = {
        // &amp;quot;img_url&amp;quot;: &amp;quot;&amp;quot;,
        // &amp;quot;img_width&amp;quot;: &amp;quot;&amp;quot;,
        // &amp;quot;img_height&amp;quot;: &amp;quot;&amp;quot;,
        &amp;quot;link&amp;quot;: document.documentURI || _session_data.init_url,
        &amp;quot;desc&amp;quot;: document.documentURI || _session_data.init_url,
        &amp;quot;title&amp;quot;: document.title
    };

    var shareFunc = function(_img){          
      if (_img) {
          data[&amp;apos;img_url&amp;apos;] = _img.src;
          data[&amp;apos;img_width&amp;apos;] = _img.width;
          data[&amp;apos;img_height&amp;apos;] = _img.height;                        
      }

      _call(&amp;apos;shareTimeline&amp;apos;,data);
    };

    getSharePreviewImage(shareFunc);
  }
});
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;请注意最后这句：&lt;code&gt;_call(&amp;#39;shareTimeline&amp;#39;,data);&lt;/code&gt;，在看看&lt;code&gt;__WeixinJSBridge&lt;/code&gt;中的&lt;code&gt;call&lt;/code&gt;属性，接着我找到了&lt;code&gt;_call&lt;/code&gt;方法。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;function _call(func,params,callback) {
    var curFuncIdentifier = __WeixinJSBridge.call;
    if (curFuncIdentifier !== _callIdentifier) {
        return;
    }
    if (!func || typeof func !== &amp;apos;string&amp;apos;) {
        return;
    };
    if (typeof params !== &amp;apos;object&amp;apos;) {
        params = {};
    };

    var callbackID = (_callback_count++).toString();

    if (typeof callback === &amp;apos;function&amp;apos;) {
      _callback_map[callbackID] = callback;
    };

    var msgObj = {&amp;apos;func&amp;apos;:func,&amp;apos;params&amp;apos;:params};
    msgObj[_MESSAGE_TYPE] = &amp;apos;call&amp;apos;;        
    msgObj[_CALLBACK_ID] = callbackID;

    _sendMessage(JSON.stringify(msgObj));
}
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;大致意思应该就是：就是将这个东西&lt;code&gt;_call(&amp;#39;shareTimeline&amp;#39;,data);&lt;/code&gt;转换成一个json字符串吧，从这里看到微信的做法和上面那个开源库非常类似，简单并且安全。&lt;code&gt;_call&lt;/code&gt;方法最后调用&lt;code&gt;_sendMessage&lt;/code&gt;方法发送消息&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;//将消息添加到发送队列，iframe的准备队列为weixin://dispatch_message/
function _sendMessage(message) {
    _sendMessageQueue.push(message);
    _readyMessageIframe.src = _CUSTOM_PROTOCOL_SCHEME + &amp;apos;://&amp;apos; + _QUEUE_HAS_MESSAGE;

    // var ifm = _WXJS(&amp;apos;iframe#__WeixinJSBridgeIframe&amp;apos;)[0];
    // if (!ifm) {
    //   ifm = _createQueueReadyIframe(document);
    // }
    // ifm.src = _CUSTOM_PROTOCOL_SCHEME + &amp;apos;://&amp;apos; + _QUEUE_HAS_MESSAGE;
};
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;从上面代码可以看到微信的js sdk也是将js的方法调用换成一个类似&lt;code&gt;weixin://dispatch_message/&lt;/code&gt;这样的url，上面说的json封装的数据。那么我猜测微信的做法是类似网易云音乐的拦截url吗？如果真的是这样的话，就非常不安全了，随便一个Html 5页面可以伪造一个类似：&lt;code&gt;weixin://dispatch_message/&lt;/code&gt;这样的url来调用微信的功能了，不过好在微信对每个js调用都必须带上appid。&lt;/p&gt;
&lt;p&gt;在反编译后的微信代码，我看到了下面代码：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://i1.tietuku.com/003b8cf9f3012d19.png&quot; alt=&quot;image&quot;&gt;&lt;/p&gt;
&lt;p&gt;我想这写就是微信想Html 5开放的接口吧？不过对比了一下微信js sdk的官网，我看到好多App提供的功能在js sdk中并没有找到，这样也没有太大关系，以为微信只要升级js sdk就可以使用其他功能了，因为Native已经开放了嘛~&lt;/p&gt;
&lt;p&gt;从上面&lt;code&gt;__WeixinJSBridge&lt;/code&gt;可以看到有一个熟悉&lt;code&gt;_handleMessageFromWeixin&lt;/code&gt;，这个就是js来处理Native的回调接口，我用这个字符串在微信代码中搜索，结果如下：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://i3.tietuku.com/e0b5b487f20e50ac.png&quot; alt=&quot;image&quot;&gt;&lt;/p&gt;
&lt;p&gt;因此，我大致猜测，微信中的js调Native功能是用拦截url的方式，而Native回调的话是使用&lt;code&gt;evaluateJavascript&lt;/code&gt;方法&lt;/p&gt;
&lt;p&gt;我也在js sdk中找到了相应的函数：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;function _handleMessageFromWeixin(message) {
    var curFuncIdentifier = __WeixinJSBridge._handleMessageFromWeixin;
    if (curFuncIdentifier !== _handleMessageIdentifier) {
        return &amp;apos;{}&amp;apos;;
    }

    var ret;
    var msgWrap
    if (_isUseMd5 === &amp;apos;yes&amp;apos;) {
      var realMessage = message[_JSON_MESSAGE];
      var shaStr = message[_SHA_KEY];
      var arr = new Array;
      arr[0] = JSON.stringify(realMessage);
      arr[1] = _xxyy;
      var str = arr.join(&amp;quot;&amp;quot;);
      var msgSha = &amp;apos;&amp;apos;;
        var shaObj = CryptoJS.SHA1(str);
        msgSha = shaObj.toString();
        if (msgSha !== shaStr) {
            _log(&amp;apos;_handleMessageFromWeixin , shaStr : &amp;apos; + shaStr + &amp;apos; , str : &amp;apos; + str + &amp;apos; , msgSha : &amp;apos; + msgSha);
            return &amp;apos;{}&amp;apos;;

        }
        msgWrap = realMessage;
    }
    //省略很多代码
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;微信的做法应该说非常基础，使用了原生的功能，但是安全，由于微信客户端对每一个js调用都有验证（appid），因此这也增加了一定的安全性&lt;/p&gt;
&lt;p&gt;以上说的都是建立在我的分析正确的情况下。&lt;/p&gt;
&lt;h1 id=&quot;一些个人的想法&quot;&gt;&lt;a href=&quot;#一些个人的想法&quot; class=&quot;headerlink&quot; title=&quot;一些个人的想法&quot;&gt;&lt;/a&gt;一些个人的想法&lt;/h1&gt;&lt;p&gt;现在各种新的技术也在想办法解决Native开发的效率问题，想用技术来解决一套代码运行在Android和iOS客户端，我相信随着技术的发展这些问题都会解决。我也好期待Facebook即将推出的&lt;a href=&quot;http://www.reactnativeandroid.com/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;React Native Android&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&quot;Hybrid开发适用于哪些功能&quot;&gt;&lt;a href=&quot;#Hybrid开发适用于哪些功能&quot; class=&quot;headerlink&quot; title=&quot;Hybrid开发适用于哪些功能&quot;&gt;&lt;/a&gt;Hybrid开发适用于哪些功能&lt;/h2&gt;&lt;p&gt;本文讲的Hybrid开发就是Native客户端中嵌入了Html App的功能，这方面微信应该是做的最好的，由于Html 5的效率以及耗电问题，我个人觉得用户是不能满足Web App的体验的，Hybrid App也只适用于某些场景。一些基础的功能，比如调用手机的摄像头，获取地理位置，登录注册功能等等，做成Native的功能，让Html 5来调用更好，这样的体验也更好。&lt;/p&gt;
&lt;p&gt;如果你把一个登录和注册功能也做成Html 5，在弱网络环境下，这个体验应该会非常的差，或许你等半天还没加载出页面。你可能会说，我可以预先加载Html 5的代码，打开App时直接加载，那么我说你在给自己找麻烦，如果要这样的话，Native开发或许更快一点。&lt;/p&gt;
&lt;p&gt;那么什么情况适合Html 5开发呢？像一些活动页面，比如秒杀、团购等适合做Html 5，因为这些页面可能涉及的非常炫而且复杂，Html 5开发或许会简单点，关键是这些页面时效性短，更新更快，因为一个活动说不定就一周时间，下周换活动，如果这样的话，你还做Native是肯定不行的&lt;/p&gt;
&lt;h1 id=&quot;总结-1&quot;&gt;&lt;a href=&quot;#总结-1&quot; class=&quot;headerlink&quot; title=&quot;总结&quot;&gt;&lt;/a&gt;总结&lt;/h1&gt;&lt;p&gt;有那么一句&lt;a href=&quot;http://mindhacks.cn/2009/01/16/hammers-and-nails/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;古老的箴言&lt;/a&gt;：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;如果你手里有一把锤子，所有东西看上去都想钉子&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;千万不要以为Hybrid开发能够夸平台运行，就使用Hybrid开发任何功能。其实Facebook早期也是这么想的，后来就是因为WebView渲染效率底下，把整个应用改为Native开发，请看&lt;a href=&quot;https://www.facebook.com/notes/facebook-engineering/under-the-hood-rebuilding-facebook-for-android/10151189598933920&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;这里&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;引用Facebook的一段话：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Today, we’re releasing a new version of Facebook for Android that’s been rebuilt in native code to improve speed and performance. To support the unique complexity of Facebook stories across devices, we’re moving from a hybrid native/webview to pure native code, allowing us to optimize the Facebook experience for faster loading, new user interfaces, disk cache, and so on.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;本文主要还是从技术上谈谈Hybrid开发中js和Native交互的技术实现原理。抛砖引玉，写的估计也有很多错的，希望技术大牛指出。&lt;/p&gt;
&lt;p&gt;最后，我觉得那个开源的库是一个非常不错的解决方案，解决办法巧妙、简单而且安全。当时我debug了半天弄明白其中的原理后，我一拍大腿，这办法真好啊！！网易云音乐的解决办法适用于它的场景，不需要回调，Native只需要处理相应的信息，然后来实现页面跳转、播放音乐、播放MV等功能，这个方法也简单好用。&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;混合开发的App（Hybrid App）就是在一个App中内嵌一个轻量级的浏览器，一部分原生的功能改为Html 5来开发，这部分功能不仅能够在不升级App的情况下动态更新，而且可以在Android或iOS的App上同时运行，让用户的体验更好又可以节省开发的资源。&lt;/p&gt;
&lt;p&gt;下面来谈谈Hybrid App开发中的技术问题。iOS方面的我不太了解，我就主要谈谈Android开发中的，其中可能会有很多说错的，请大家轻喷&lt;/p&gt;
    
    </summary>
    
    
      <category term="Android" scheme="http://bxbxbai.gitcafe.io/tags/Android/"/>
    
  </entry>
  
  <entry>
    <title>关于Android开发中Java对象序列化的一次测试</title>
    <link href="http://bxbxbai.gitcafe.io/2015/05/05/a-serializable-test/"/>
    <id>http://bxbxbai.gitcafe.io/2015/05/05/a-serializable-test/</id>
    <published>2015-05-05T11:29:24.000Z</published>
    <updated>2015-09-12T07:01:41.000Z</updated>
    
    <content type="html">&lt;p&gt;Android开发过程中会遇到很多情况，需要将一个Java序列化，比如序列化一个对象来保存当前一些信息，等下次App启动后再还原。&lt;/p&gt;
&lt;p&gt;对象序列化可以有好多种方法，一般最简单的就是实现&lt;code&gt;Serializable&lt;/code&gt;接口，通过&lt;code&gt;ObjectOutputStream&lt;/code&gt;写到SD卡中；还有可以将Java对象序列化到数据库中；还可以将Java对象转成一个字符串，把这个字符串写到SD卡中，反序列化时读取这个字符串，并且转成一个Java对象。&lt;/p&gt;
&lt;p&gt;如果只保存一个Java对象，你应该不会把它写到数据库中的，一般会使用另外两种方法，但是那种方法好呢？&lt;/p&gt;
&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;
&lt;h2 id=&quot;方法0：实现Serializable接口&quot;&gt;&lt;a href=&quot;#方法0：实现Serializable接口&quot; class=&quot;headerlink&quot; title=&quot;方法0：实现Serializable接口&quot;&gt;&lt;/a&gt;方法0：实现Serializable接口&lt;/h2&gt;&lt;p&gt;写上两段代码&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;//将Object写入SD卡
private void writeObject(Object result) {
    ObjectOutputStream oos = null;
    FileOutputStream fileOutputStream = null;
    try {
        File file = new File(Config.getCachePath() + &amp;quot;bxbxbai&amp;quot;);
        fileOutputStream = new FileOutputStream(file);
        oos = new ObjectOutputStream(fileOutputStream);
        oos.writeObject(result);
    } catch (Exception e) {
        e.printStackTrace();
    } finally {
        try {
            fileOutputStream.close();
            oos.close();
        } catch (Exception e) {
            e.printStackTrace();
        }
    }
}

//读取Object
private Object readObject() {
    Object object = null;
    File file = new File(Config.getCachePath() + &amp;quot;bxbxbai&amp;quot;);
    if (file.isFile()) {
        ObjectInputStream ois = null;
        FileInputStream fileInputStream = null;
        try {
            fileInputStream = new FileInputStream(file);
            ois = new ObjectInputStream(fileInputStream);
            object = ois.readObject();
        } catch (Exception e) {
            e.printStackTrace();
        } finally {
            try {
                fileInputStream.close();
                ois.close();
            } catch (Exception e) {
                e.printStackTrace();
            }
        }
        return object;
    }
    return null;
}
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;##方法1：将对象转换成String序列化&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;//先用Gson将对象转换成String，然后把String写入SD卡
private void writeObjectString(Object result) {
    String s = new Gson().toJson(result);
    FileOutputStream fileOutputStream = null;
    try {
        File file = new File(Config.getCachePath() + &amp;quot;bxbxbai_string&amp;quot;);
        fileOutputStream = new FileOutputStream(file);
        BufferedWriter writer = new BufferedWriter(new OutputStreamWriter(fileOutputStream));
        writer.write(s);
        writer.flush();
        writer.close();
    } catch (Exception e) {
        e.printStackTrace();
    } finally {
        try {
            fileOutputStream.close();
        } catch (Exception e) {
            e.printStackTrace();
        }
    }
}

//先读取String，然后转成Java对象
private Object readObjectString() {
    File file = new File(Config.getCachePath() + &amp;quot;bxbxbai_string&amp;quot;);
    if (file.isFile()) {
        try {
            Scanner scanner = new Scanner(file);
            StringBuilder json = new StringBuilder();
            while (scanner.hasNext()) {
                json.append(scanner.nextLine());
            }
            scanner.close();
            return new Gson.fromJson(json.toString(), SerializeStringResult.class);
        } catch (Exception e) {
            e.printStackTrace();
        }
    }
    return null;
}
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;##测试&lt;/p&gt;
&lt;p&gt;基本的功能代码已经都贴了，下面是测试代码：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;private void test() {
    try {
        //省略创建object代码，result0 和result1 完全一样
        StopWatch.begin(&amp;quot;writeObject&amp;quot;);
        writeObject(result0);
        StopWatch.end(&amp;quot;writeObject&amp;quot;);

        StopWatch.begin(&amp;quot;readObject&amp;quot;);
        Object o1 = readObject();
        StopWatch.end(&amp;quot;readObject&amp;quot;);

        //写String
        StopWatch.begin(&amp;quot;writeObjectString&amp;quot;);
        writeObjectString(result1);
        StopWatch.end(&amp;quot;writeObjectString&amp;quot;);

        StopWatch.begin(&amp;quot;readObjectString&amp;quot;);
        Object o2 = readObjectString();
        StopWatch.end(&amp;quot;readObjectString&amp;quot;);
    } catch (Exception e) {
        e.printStackTrace();
    }
}
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;测试数据是地址：&lt;a href=&quot;http://bxbxbai.gitcafe.io/img/data.txt&quot;&gt;地址&lt;/a&gt;，测试手机使用LG-D858&lt;/p&gt;
&lt;p&gt;##测试结果(单位ms)&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;.&lt;/th&gt;
&lt;th style=&quot;text-align:center&quot;&gt;&lt;strong&gt;writeObject&lt;/strong&gt;&lt;/th&gt;
&lt;th style=&quot;text-align:right&quot;&gt;&lt;strong&gt;readObject&lt;/strong&gt;&lt;/th&gt;
&lt;th style=&quot;text-align:right&quot;&gt;writeObjectString&lt;/th&gt;
&lt;th style=&quot;text-align:right&quot;&gt;&lt;strong&gt;readObjectString&lt;/strong&gt;&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;0&lt;/strong&gt;&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;324&lt;/td&gt;
&lt;td style=&quot;text-align:right&quot;&gt;111&lt;/td&gt;
&lt;td style=&quot;text-align:right&quot;&gt;44&lt;/td&gt;
&lt;td style=&quot;text-align:right&quot;&gt;66&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;1&lt;/strong&gt;&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;285&lt;/td&gt;
&lt;td style=&quot;text-align:right&quot;&gt;104&lt;/td&gt;
&lt;td style=&quot;text-align:right&quot;&gt;29&lt;/td&gt;
&lt;td style=&quot;text-align:right&quot;&gt;60&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;2&lt;/strong&gt;&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;286&lt;/td&gt;
&lt;td style=&quot;text-align:right&quot;&gt;95&lt;/td&gt;
&lt;td style=&quot;text-align:right&quot;&gt;30&lt;/td&gt;
&lt;td style=&quot;text-align:right&quot;&gt;61&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;3&lt;/strong&gt;&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;271&lt;/td&gt;
&lt;td style=&quot;text-align:right&quot;&gt;91&lt;/td&gt;
&lt;td style=&quot;text-align:right&quot;&gt;30&lt;/td&gt;
&lt;td style=&quot;text-align:right&quot;&gt;60&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;4&lt;/strong&gt;&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;288&lt;/td&gt;
&lt;td style=&quot;text-align:right&quot;&gt;94&lt;/td&gt;
&lt;td style=&quot;text-align:right&quot;&gt;29&lt;/td&gt;
&lt;td style=&quot;text-align:right&quot;&gt;58&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;5&lt;/strong&gt;&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;260&lt;/td&gt;
&lt;td style=&quot;text-align:right&quot;&gt;91&lt;/td&gt;
&lt;td style=&quot;text-align:right&quot;&gt;28&lt;/td&gt;
&lt;td style=&quot;text-align:right&quot;&gt;63&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;6&lt;/strong&gt;&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;273&lt;/td&gt;
&lt;td style=&quot;text-align:right&quot;&gt;93&lt;/td&gt;
&lt;td style=&quot;text-align:right&quot;&gt;27&lt;/td&gt;
&lt;td style=&quot;text-align:right&quot;&gt;60&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;7&lt;/strong&gt;&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;267&lt;/td&gt;
&lt;td style=&quot;text-align:right&quot;&gt;92&lt;/td&gt;
&lt;td style=&quot;text-align:right&quot;&gt;27&lt;/td&gt;
&lt;td style=&quot;text-align:right&quot;&gt;61&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;8&lt;/strong&gt;&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;265&lt;/td&gt;
&lt;td style=&quot;text-align:right&quot;&gt;172&lt;/td&gt;
&lt;td style=&quot;text-align:right&quot;&gt;27&lt;/td&gt;
&lt;td style=&quot;text-align:right&quot;&gt;59&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;9&lt;/strong&gt;&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;299&lt;/td&gt;
&lt;td style=&quot;text-align:right&quot;&gt;97&lt;/td&gt;
&lt;td style=&quot;text-align:right&quot;&gt;29&lt;/td&gt;
&lt;td style=&quot;text-align:right&quot;&gt;64&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;Average&lt;/strong&gt;&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;&lt;strong&gt;282&lt;/strong&gt;&lt;/td&gt;
&lt;td style=&quot;text-align:right&quot;&gt;&lt;strong&gt;104&lt;/strong&gt;&lt;/td&gt;
&lt;td style=&quot;text-align:right&quot;&gt;&lt;strong&gt;30&lt;/strong&gt;&lt;/td&gt;
&lt;td style=&quot;text-align:right&quot;&gt;&lt;strong&gt;61&lt;/strong&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;一共测试了10次，平均结果如下：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Serializable写：282ms&lt;/li&gt;
&lt;li&gt;Serializable读：104ms&lt;/li&gt;
&lt;li&gt;转String写：30ms&lt;/li&gt;
&lt;li&gt;转String读：61ms&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;也就是说将Java对象转成String再进行序列化以及反序列化可以大大减少时间。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Once upon a time, this used the standard Java Object{Input,Output}Stream, but the default implementation relies heavily on reflection (even for standard types) and generates a ton of garbage.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;上面这段话是我几个月前我看&lt;a href=&quot;http://bxbxbai.gitcafe.io/2014/12/24/read-volley-source-code/&quot;&gt;Volley源码&lt;/a&gt;的时候看到的，在&lt;code&gt;DiskBasedCache&lt;/code&gt;类中，大致的意思就是之前Volley也是用Java对象的序列化来缓存HTTP 头信息的，后来发现&lt;code&gt;Object{Input,Output}Stream&lt;/code&gt;序列化严重依赖反射机制，&lt;strong&gt;会在序列化过程中产生大量的临时对象，从而更加频繁的触发GC&lt;/strong&gt;，后来Google的工程师自己写了一个简单的序列化和反序列化方法&lt;/p&gt;
&lt;p&gt;##总结&lt;/p&gt;
&lt;p&gt;从测试结果中可以看到，将Java对象转换成String，然后在把String序列化可以节省大量的时间。不仅如此，&lt;code&gt;Object{Input,Output}Stream&lt;/code&gt;序列化方法严重依赖Java反射机制，在序列化过程中会产生大量的临时对象，会更加频繁的触发GC操作&lt;/p&gt;
&lt;p&gt;所以，我觉得还是把Java对象转成String再序列化吧，可以提升不少性能呢 ：）&lt;/p&gt;
&lt;h2 id=&quot;2015-05-07-更新&quot;&gt;&lt;a href=&quot;#2015-05-07-更新&quot; class=&quot;headerlink&quot; title=&quot;2015.05.07 更新&quot;&gt;&lt;/a&gt;2015.05.07 更新&lt;/h2&gt;&lt;p&gt;我这个是测试这两个序列化方法的性能。注意一下，Gson库将一个Java对象转成字符串也是使用Java反射的，如果某些场景需要更高的性能，那么需要自己写序列化方法。&lt;/p&gt;
&lt;p&gt;比如，参考&lt;code&gt;Parcelable&lt;/code&gt;接口，我们自己写代码，将对象转换成字符串（而不是依赖Gson库来转成字符串）序列化，以及相应的反序列化。或许你还想到了其他更好的方法，希望你能和我分享讨论~ ：）&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;Android开发过程中会遇到很多情况，需要将一个Java序列化，比如序列化一个对象来保存当前一些信息，等下次App启动后再还原。&lt;/p&gt;
&lt;p&gt;对象序列化可以有好多种方法，一般最简单的就是实现&lt;code&gt;Serializable&lt;/code&gt;接口，通过&lt;code&gt;ObjectOutputStream&lt;/code&gt;写到SD卡中；还有可以将Java对象序列化到数据库中；还可以将Java对象转成一个字符串，把这个字符串写到SD卡中，反序列化时读取这个字符串，并且转成一个Java对象。&lt;/p&gt;
&lt;p&gt;如果只保存一个Java对象，你应该不会把它写到数据库中的，一般会使用另外两种方法，但是那种方法好呢？&lt;/p&gt;
    
    </summary>
    
    
      <category term="Android" scheme="http://bxbxbai.gitcafe.io/tags/Android/"/>
    
      <category term="技术" scheme="http://bxbxbai.gitcafe.io/tags/%E6%8A%80%E6%9C%AF/"/>
    
  </entry>
  
  <entry>
    <title>可以滑动切歌的播放控制条（模仿QQ音乐）</title>
    <link href="http://bxbxbai.gitcafe.io/2015/04/07/swipe-playbar/"/>
    <id>http://bxbxbai.gitcafe.io/2015/04/07/swipe-playbar/</id>
    <published>2015-04-07T11:59:09.000Z</published>
    <updated>2016-03-12T06:58:22.000Z</updated>
    
    <content type="html">&lt;p&gt;看了QQ音乐Android版有这个功能，觉得挺好玩的，就模仿它做了一个demo，可以滑动切歌（转换的gif严重失真，只能截图了 -.-）&lt;/p&gt;
&lt;p&gt;项目地址：&lt;a href=&quot;https://github.com/bxbxbai/SwipePlaybarDemo&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;https://github.com/bxbxbai/SwipePlaybarDemo&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;下载地址：&lt;a href=&quot;http://vdisk.weibo.com/s/GGofvp4_QVU/1428410542&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;http://vdisk.weibo.com/s/GGofvp4_QVU/1428410542&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;底部播放条的歌曲信息可以滑动切换，并且专辑图会转动&lt;/p&gt;
&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;
&lt;h2 id=&quot;看看截图&quot;&gt;&lt;a href=&quot;#看看截图&quot; class=&quot;headerlink&quot; title=&quot;看看截图&quot;&gt;&lt;/a&gt;看看截图&lt;/h2&gt;&lt;p&gt;这个是4个播放条的截图：&lt;br&gt;&lt;img src=&quot;http://i2.tietuku.com/de77e5c2f25e89f1.png&quot; alt=&quot;playbar&quot;&gt; &lt;/p&gt;
&lt;h2 id=&quot;实现&quot;&gt;&lt;a href=&quot;#实现&quot; class=&quot;headerlink&quot; title=&quot;实现&quot;&gt;&lt;/a&gt;实现&lt;/h2&gt;&lt;p&gt;这个功能就是使用&lt;code&gt;ViewPager&lt;/code&gt;这个组件来实现，然后最主要的就是为这个&lt;code&gt;ViewPager&lt;/code&gt;写一个&lt;code&gt;PagerAapter&lt;/code&gt;。这个&lt;code&gt;PagerAdapter&lt;/code&gt;写起来也容易，但是我在这个类里做了一些优化。&lt;/p&gt;
&lt;p&gt;这个&lt;code&gt;PagerAdapter&lt;/code&gt;的全部代码就在下面：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;/**
  * PlayBar ViewPager Adapter 
  * 
  * @author bxbxbai
*/
public class PlayCtrlBarPagerAdapter extends PagerAdapter {

  private static final int NUM_SONGS = 10;
  private static final int ANIMATOR_DURATION = 1000 * 10;

  private LayoutInflater mInflater;

  private Queue&amp;lt;View&amp;gt; mReusableViews;


  public PlayCtrlBarPagerAdapter(Context context) {
    mInflater = LayoutInflater.from(context);
    mReusableViews = new ArrayDeque&amp;lt;&amp;gt;(NUM_SONGS);
  }

  @Override
  public int getCount() {
    return NUM_SONGS;
  }

  @Override
  public boolean isViewFromObject(View view, Object object) {
    return view == object;
  }

  @Override
  public void destroyItem(ViewGroup container, int position, Object object) {
    if (object instanceof View) {
        container.removeView((View) object);
        mReusableViews.add((View) object);
    }
  }

  @Override
  public Object instantiateItem(ViewGroup container, int position) {
    View v = mReusableViews.poll();
    if (v == null) {
        v = mInflater.inflate(R.layout.layout_music, container, false);
        setAnimator(v);
    }
    bindData(v, position);
    container.addView(v);
    return v;
 }

  private void bindData(View v, int position) {
    TextView songName = ButterKnife.findById(v, R.id.tv_song_name);
    songName.setText(&amp;quot;Try - &amp;quot; + position);

    ImageView artistImage = ButterKnife.findById(v, R.id.iv_artist_cover);
    if (position % 2 == 1) {
        artistImage.setImageResource(R.drawable.adele);
    } else {
        artistImage.setImageResource(R.drawable.bxbxbai);
    }
 }

  @Override
  public float getPageWidth(int position) {
    return 1.0f;
  }

  public static void setAnimator(View view) {
    ObjectAnimator animator = ObjectAnimator.ofFloat(view.findViewById(R.id.iv_artist_cover), &amp;quot;rotation&amp;quot;, 0f, 360f);
    animator.setRepeatCount(Integer.MAX_VALUE);
    animator.setDuration(ANIMATOR_DURATION);
    animator.setInterpolator(new LinearInterpolator());

    view.setTag(R.id.tag_animator, animator);
  }
}
&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&quot;优化PagerAdapter&quot;&gt;&lt;a href=&quot;#优化PagerAdapter&quot; class=&quot;headerlink&quot; title=&quot;优化PagerAdapter&quot;&gt;&lt;/a&gt;优化PagerAdapter&lt;/h2&gt;&lt;p&gt;&lt;code&gt;PagerAdapter&lt;/code&gt;和Android中&lt;code&gt;ListView&lt;/code&gt;的&lt;code&gt;Adapter&lt;/code&gt;类似，但是一个主要的不同就是&lt;code&gt;PagerAdapter&lt;/code&gt;提供了一个回调方法来让我们处理销毁的Item。&lt;/p&gt;
&lt;p&gt;一个&lt;code&gt;ViewPager&lt;/code&gt;默认的&lt;code&gt;offScreenPageLimit&lt;/code&gt;为1，也就是说当一个&lt;code&gt;ViewPager&lt;/code&gt;当前显示页为&lt;code&gt;2&lt;/code&gt;，那么&lt;code&gt;PagerAdapter&lt;/code&gt;中还存在左右两个Pager，也就是&lt;code&gt;1&lt;/code&gt;和&lt;code&gt;3&lt;/code&gt;。此时，如果我们将&lt;code&gt;ViewPager&lt;/code&gt;滑向&lt;code&gt;3&lt;/code&gt;，那么&lt;code&gt;PagerAdapter&lt;/code&gt;首先会通过&lt;code&gt;public void destroyItem(ViewGroup container, int position, Object object)&lt;/code&gt;方法销毁第&lt;code&gt;1&lt;/code&gt;个Item，然后通过&lt;code&gt;public Object instantiateItem(ViewGroup container, int position)&lt;/code&gt;生成第&lt;code&gt;4&lt;/code&gt;的Item，并且显示当前的Item（为&lt;code&gt;3&lt;/code&gt;）。此时，&lt;code&gt;PagerAdapter&lt;/code&gt;中存在的Item为&lt;code&gt;2&lt;/code&gt;和&lt;code&gt;4&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;从这个思路出发，我也就可以在&lt;code&gt;destroyItem&lt;/code&gt;方法中保存这个object，然后在&lt;code&gt;instantiateItem&lt;/code&gt;中使用。&lt;/p&gt;
&lt;h3 id=&quot;看上面的代码&quot;&gt;&lt;a href=&quot;#看上面的代码&quot; class=&quot;headerlink&quot; title=&quot;看上面的代码&quot;&gt;&lt;/a&gt;看上面的代码&lt;/h3&gt;&lt;p&gt;我写了一个&lt;code&gt;Queue&amp;lt;View&amp;gt; mReusableViews;&lt;/code&gt;在&lt;code&gt;destroyItem&lt;/code&gt;中保存被销毁的Item，然后在&lt;code&gt;instantiateItem&lt;/code&gt;方法中首先去&lt;code&gt;mReusableViews&lt;/code&gt;中获取。&lt;/p&gt;
&lt;p&gt;如果存在可以重用的Item，那么就不用inflate一个View了，直接绑定数据就可以。否则就创建一个新的View来使用&lt;/p&gt;
&lt;p&gt;在实验过程中发现，如果&lt;code&gt;ViewPager&lt;/code&gt;的&lt;code&gt;offScreenPageLimit&lt;/code&gt;为1，那么只需要创建3个View，其他的View都可以重复使用，这样就可以提升性能了&lt;/p&gt;
&lt;p&gt;##如何让ImageView转起来&lt;/p&gt;
&lt;p&gt;在&lt;code&gt;View&lt;/code&gt;绑定数据的时候通过一个工具方法，为每个&lt;code&gt;View&lt;/code&gt;都设置一个&lt;code&gt;ObjectAnimator&lt;/code&gt;属性动画。然后我为这个&lt;code&gt;ViewPager&lt;/code&gt;专门写了一个&lt;code&gt;ViewPager.PageTransformer&lt;/code&gt;类&lt;/p&gt;
&lt;p&gt;其实代码也很简单，就是当某一个page完全显示的时候（position为0），开始动画，否则停止动画&lt;/p&gt;
&lt;p&gt;如果你需要在&lt;code&gt;ViewPager&lt;/code&gt;上添加一些其他特效，那么可以通过&lt;code&gt;addTransformer&lt;/code&gt;方法添加PageTransformer&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;/**
 * 播放条的PagerTransformer
 *
 * @author bxbxbai
 */
public class PlaybarPagerTransformer implements ViewPager.PageTransformer {

  private List&amp;lt;ViewPager.PageTransformer&amp;gt; mTransformers = new ArrayList&amp;lt;&amp;gt;();

  @Override
  public void transformPage(View page, float position) {
    for (ViewPager.PageTransformer transformer : mTransformers) {
        transformer.transformPage(page, position);
    }

    //处理图片旋转

    StopWatch.log(&amp;quot;page: &amp;quot; + page + &amp;quot;, pos: &amp;quot; + position);

    if (position == 0) {
        ObjectAnimator animator = (ObjectAnimator) page.getTag(R.id.tag_animator);
        if (animator != null) {
            animator.start();
        }
    } else if (position == -1 || position == -2 || position == 1) {
        ObjectAnimator animator = (ObjectAnimator) page.getTag(R.id.tag_animator);
        if (animator != null) {
            animator.end();
        }
    }
  }


  public void addTransformer(ViewPager.PageTransformer transformer) {
    if (transformer != null) {
        mTransformers.add(transformer);
    }
  }
}
&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&quot;Dependency-依赖&quot;&gt;&lt;a href=&quot;#Dependency-依赖&quot; class=&quot;headerlink&quot; title=&quot;Dependency - 依赖&quot;&gt;&lt;/a&gt;Dependency - 依赖&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;Java Development Kit (JDK) 7 +&lt;/li&gt;
&lt;li&gt;com.android.tools.build:gradle:1.0.0&lt;/li&gt;
&lt;li&gt;Android SDK&lt;ul&gt;
&lt;li&gt;Android SDK Build-tools 21.1.2&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;Build-构建&quot;&gt;&lt;a href=&quot;#Build-构建&quot; class=&quot;headerlink&quot; title=&quot;Build - 构建&quot;&gt;&lt;/a&gt;Build - 构建&lt;/h2&gt;&lt;pre&gt;&lt;code&gt;git clone https://github.com/bxbxbai/SwipePlaybarDemo.git
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;用最新的IntelliJ IDE导入工程（Import Project），然后等待IDE下载gradle和依赖包即可&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;看了QQ音乐Android版有这个功能，觉得挺好玩的，就模仿它做了一个demo，可以滑动切歌（转换的gif严重失真，只能截图了 -.-）&lt;/p&gt;
&lt;p&gt;项目地址：&lt;a href=&quot;https://github.com/bxbxbai/SwipePlaybarDemo&quot;&gt;https://github.com/bxbxbai/SwipePlaybarDemo&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;下载地址：&lt;a href=&quot;http://vdisk.weibo.com/s/GGofvp4_QVU/1428410542&quot;&gt;http://vdisk.weibo.com/s/GGofvp4_QVU/1428410542&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;底部播放条的歌曲信息可以滑动切换，并且专辑图会转动&lt;/p&gt;
    
    </summary>
    
    
      <category term="Android" scheme="http://bxbxbai.gitcafe.io/tags/Android/"/>
    
  </entry>
  
  <entry>
    <title>知乎专栏App</title>
    <link href="http://bxbxbai.gitcafe.io/2015/03/26/zhuanlan/"/>
    <id>http://bxbxbai.gitcafe.io/2015/03/26/zhuanlan/</id>
    <published>2015-03-26T11:55:31.000Z</published>
    <updated>2016-03-12T07:00:21.000Z</updated>
    
    <content type="html">&lt;p&gt;最近一直在利用空余时间开发一个完整的App，名字就叫“专栏”。开发这个App的目的主要是为了练练手，熟悉开发一个完整App的流程。就像造房子，亲手打地基，搬砖头，垒砖头，还自己装修（虽然装修的不好看）&lt;/p&gt;
&lt;p&gt;项目地址：&lt;a href=&quot;https://github.com/bxbxbai/ZhuanLan&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;https://github.com/bxbxbai/ZhuanLan&lt;/a&gt;&lt;/p&gt;
&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;
&lt;h2 id=&quot;1-1版本&quot;&gt;&lt;a href=&quot;#1-1版本&quot; class=&quot;headerlink&quot; title=&quot;1.1版本&quot;&gt;&lt;/a&gt;1.1版本&lt;/h2&gt;&lt;p&gt;现在App在Android 4.4系统上支持沉浸式状态栏了，个人感觉更加好看了，增加了抽屉菜单功能（部分功能还未完成）。&lt;/p&gt;
&lt;p&gt;最新添加了“最近一周文章”功能，这功能会显示所有内置专栏作者最近一周的文章列表，并且所有的文章会按时间排序。还添加了“查看原网页”功能&lt;/p&gt;
&lt;h2 id=&quot;看截图：&quot;&gt;&lt;a href=&quot;#看截图：&quot; class=&quot;headerlink&quot; title=&quot;看截图：&quot;&gt;&lt;/a&gt;看截图：&lt;/h2&gt;&lt;p&gt;&lt;img src=&quot;http://i2.tietuku.com/0753db9e1804f6b3.png&quot; alt=&quot;闪屏&quot;&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://i2.tietuku.com/2970239f71296398.png&quot; alt=&quot;专栏列表&quot;&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://i2.tietuku.com/6fa9fc0c9c2de428.png&quot; alt=&quot;文章列表&quot;&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://i2.tietuku.com/ace4ca3200ad7a09.png&quot; alt=&quot;文章内容&quot;&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://i2.tietuku.com/da044bdfabfe3e4f.png&quot; alt=&quot;网页版&quot;&gt;&lt;/p&gt;
&lt;h2 id=&quot;Dependency-依赖&quot;&gt;&lt;a href=&quot;#Dependency-依赖&quot; class=&quot;headerlink&quot; title=&quot;Dependency - 依赖&quot;&gt;&lt;/a&gt;Dependency - 依赖&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;Java Development Kit (JDK) 7 +&lt;/li&gt;
&lt;li&gt;com.android.tools.build:gradle:1.0.0&lt;/li&gt;
&lt;li&gt;Android SDK 21&lt;/li&gt;
&lt;li&gt;Android SDK Build-tools 21.1.2&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;Build-构建&quot;&gt;&lt;a href=&quot;#Build-构建&quot; class=&quot;headerlink&quot; title=&quot;Build - 构建&quot;&gt;&lt;/a&gt;Build - 构建&lt;/h2&gt;&lt;pre&gt;&lt;code&gt;git clone https://github.com/bxbxbai/ZhuanLan.git
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;用最新的IntelliJ IDE导入工程（Import Project），然后等待IDE下载gradle和依赖包即可。&lt;/p&gt;
&lt;h2 id=&quot;用到的开源库&quot;&gt;&lt;a href=&quot;#用到的开源库&quot; class=&quot;headerlink&quot; title=&quot;用到的开源库&quot;&gt;&lt;/a&gt;用到的开源库&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;Volley&lt;/li&gt;
&lt;li&gt;Gson&lt;/li&gt;
&lt;li&gt;Material-Menu&lt;/li&gt;
&lt;li&gt;systembartint&lt;/li&gt;
&lt;/ul&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;最近一直在利用空余时间开发一个完整的App，名字就叫“专栏”。开发这个App的目的主要是为了练练手，熟悉开发一个完整App的流程。就像造房子，亲手打地基，搬砖头，垒砖头，还自己装修（虽然装修的不好看）&lt;/p&gt;
&lt;p&gt;项目地址：&lt;a href=&quot;https://github.com/bxbxbai/ZhuanLan&quot;&gt;https://github.com/bxbxbai/ZhuanLan&lt;/a&gt;&lt;/p&gt;
    
    </summary>
    
    
      <category term="Android" scheme="http://bxbxbai.gitcafe.io/tags/Android/"/>
    
      <category term="开源" scheme="http://bxbxbai.gitcafe.io/tags/%E5%BC%80%E6%BA%90/"/>
    
  </entry>
  
  <entry>
    <title>Android开发笔记0</title>
    <link href="http://bxbxbai.gitcafe.io/2015/02/08/android-develop-notes-0/"/>
    <id>http://bxbxbai.gitcafe.io/2015/02/08/android-develop-notes-0/</id>
    <published>2015-02-08T03:13:56.000Z</published>
    <updated>2016-03-12T06:57:57.000Z</updated>
    
    <content type="html">&lt;p&gt;记录一些好用的开发技巧&lt;/p&gt;
&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;
&lt;h1 id=&quot;0-自定义一个View&quot;&gt;&lt;a href=&quot;#0-自定义一个View&quot; class=&quot;headerlink&quot; title=&quot;0. 自定义一个View&quot;&gt;&lt;/a&gt;0. 自定义一个View&lt;/h1&gt;&lt;p&gt;现在的音乐播放器，比如天天动听或网易云音乐中都会将推荐页面中的内容进行分块，比如热门推荐、个性化推荐、最新音乐等等。每个区块前面都会有一个标题，如下图：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://i2.tietuku.com/4ee54aa7c8091807.png&quot; alt=&quot;云音乐&quot;&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://i2.tietuku.com/c9eee15f9b35fb2c.png&quot; alt=&quot;虾米&quot;&gt;&lt;/p&gt;
&lt;p&gt;可能很多人还在重用布局文件（layout文件）来做这些功能，但是如果你现在又需要在另一个（或多个）页面中使用这个标题，那么你就必须把标题的布局文件include进来，然后在代码里面&lt;code&gt;findViewById&lt;/code&gt;来获取标题，还要设置标题&lt;code&gt;TextView&lt;/code&gt;和标题前面小圆圈的主题什么的。&lt;strong&gt;这样你需要在每个使用这个标题的页面中都重复写这些代码&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;这样太麻烦了，你可以直接把它写成一个View，然后在布局文件中直接使用这个View&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;/**
 * 
 * @author bxbxbai
 * @version 1.0.0
 */
public class IndicatorView extends LinearLayout {

    TextView mTitle;

    public IndicatorView(Context context) {
        super(context);
        init();
    }

    public IndicatorView(Context context, AttributeSet attrs) {
        super(context, attrs);
        init();
    }

    public IndicatorView(Context context, AttributeSet attrs, int defStyleAttr) {
        super(context, attrs, defStyleAttr);
        init();
    }

    private void init() {
        View view = View.inflate(getContext(), R.layout.find_song_title_bar, this);
        mTitle = (TextView) view.findViewById(R.id.id_text_title);
    }

    public void setTitle(String title) {
        mTitle.setText(title);
    }
}
&lt;/code&gt;&lt;/pre&gt;&lt;h1 id=&quot;1-正方形的Layout&quot;&gt;&lt;a href=&quot;#1-正方形的Layout&quot; class=&quot;headerlink&quot; title=&quot;1. 正方形的Layout&quot;&gt;&lt;/a&gt;1. 正方形的Layout&lt;/h1&gt;&lt;p&gt;有很多情况会出现正方形的View，如下图：&lt;br&gt;&lt;img src=&quot;http://i3.tietuku.com/5664961aea30a6e4.png&quot; alt=&quot;Square Post&quot;&gt;&lt;/p&gt;
&lt;p&gt;这样的布局一般会是最外面一个&lt;code&gt;LinearLayout&lt;/code&gt;，包含一个&lt;code&gt;RelativeLayout&lt;/code&gt;和一个&lt;code&gt;TextView&lt;/code&gt;，这个&lt;code&gt;RelativeLayout&lt;/code&gt;中包含了一个&lt;code&gt;ImageView&lt;/code&gt;和两个&lt;code&gt;TextView&lt;/code&gt;。如果把&lt;code&gt;ImageView&lt;/code&gt;的&lt;code&gt;layout_height&lt;/code&gt;设置成&lt;code&gt;wrap_content&lt;/code&gt;，这样肯定会有问题，有的时候图片不是正方形的，就会有各种奇形怪状。&lt;/p&gt;
&lt;p&gt;你也可以在加载图片的时候将Bitmap的高剪成和宽一致，但是这样太麻烦了。你也可以写一个&lt;code&gt;SqaureImageView&lt;/code&gt;，但是我觉得这样的重用性不好。&lt;/p&gt;
&lt;p&gt;其实，最好的方式还是将这个&lt;code&gt;RelativeLayout&lt;/code&gt;换成&lt;code&gt;SquareLayout&lt;/code&gt;，这是一个正方形的&lt;code&gt;RelativeLayout&lt;/code&gt;。然后将&lt;code&gt;ImageView&lt;/code&gt;的&lt;code&gt;layout_height&lt;/code&gt;和&lt;code&gt;layout_width&lt;/code&gt;设置成&lt;code&gt;match_parent&lt;/code&gt;就可以了，图片自动设置为正方形，再按照需求设置&lt;code&gt;ImageView&lt;/code&gt;的&lt;code&gt;scaleType&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;代码很少，如下：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;/**
 * Created by baia on 14/10/27.
 * @author bxbxbai
 * @version 1.0.0
 */
public class SquareLayout extends RelativeLayout {

    public SquareLayout(Context context) {
        super(context);
    }

    public SquareLayout(Context context, AttributeSet attrs) {
        super(context, attrs);
    }

    public SquareLayout(Context context, AttributeSet attrs, int defStyle) {
        super(context, attrs, defStyle);
    }

    @Override
    protected void onMeasure(int widthMeasureSpec, int heightMeasureSpec) {
        setMeasuredDimension(getDefaultSize(0, widthMeasureSpec), getDefaultSize(0, heightMeasureSpec));

        //children are just made to fill our space
        int childWithSize = getMeasuredWidth();

        //height is set to be same as width
        heightMeasureSpec = widthMeasureSpec =
                MeasureSpec.makeMeasureSpec(childWithSize, MeasureSpec.EXACTLY);

        super.onMeasure(widthMeasureSpec, heightMeasureSpec);
    }
}
&lt;/code&gt;&lt;/pre&gt;&lt;h1 id=&quot;2-LinearLayout-的divider&quot;&gt;&lt;a href=&quot;#2-LinearLayout-的divider&quot; class=&quot;headerlink&quot; title=&quot;2. LinearLayout 的divider&quot;&gt;&lt;/a&gt;2. LinearLayout 的divider&lt;/h1&gt;&lt;p&gt;先来看一张图：&lt;br&gt;&lt;img src=&quot;http://i3.tietuku.com/54a6e2b531d34aca.png&quot; alt=&quot;LinearLayout 的divider&quot;&gt;&lt;/p&gt;
&lt;p&gt;如果要写上面图片中的布局，整体的布局肯定是两个&lt;code&gt;LinearLayout&lt;/code&gt;，然后设置margin值让各个子View之间留出空隙。如果你设置了button_2隐藏了，然后你就看到了：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://i3.tietuku.com/85e99608e72b54e0.png&quot; alt=&quot;此处输入图片的描述&quot;&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;图片中button_1右边留出了一个margin值&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;如果你使用&lt;code&gt;LinearLayout&lt;/code&gt;的&lt;code&gt;android:divider&lt;/code&gt;属性就会极大的方便你的代码。&lt;code&gt;android:divider&lt;/code&gt;的值是一个&lt;code&gt;drawable&lt;/code&gt;，你可以定义一个如下drawable文件&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;&amp;lt;?xml version=&amp;quot;1.0&amp;quot; encoding=&amp;quot;utf-8&amp;quot;?&amp;gt;
&amp;lt;shape xmlns:android=&amp;quot;http://schemas.android.com/apk/res/ 
    android:shape=&amp;quot;rectangle&amp;quot;&amp;gt;
    &amp;lt;size
        android:width=&amp;quot;10dp&amp;quot;
        android:height=&amp;quot;10dp&amp;quot; /&amp;gt;
    &amp;lt;solid android:color=&amp;quot;@android:color/transparent&amp;quot; /&amp;gt;
&amp;lt;/shape&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;其中，下面3个按钮的布局文件为：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;&amp;lt;LinearLayout
    android:id=&amp;quot;@+id/buttons_container&amp;quot;
    android:layout_width=&amp;quot;match_parent&amp;quot;
    android:divider=&amp;quot;@drawable/drawable_divider&amp;quot;
    android:showDividers=&amp;quot;middle&amp;quot;
    android:layout_height=&amp;quot;wrap_content&amp;quot;
    android:orientation=&amp;quot;horizontal&amp;quot;&amp;gt;

    &amp;lt;Button
        android:id=&amp;quot;@+id/btn_0&amp;quot;
        style=&amp;quot;@style/ButtonStyle&amp;quot;
        android:background=&amp;quot;@android:color/holo_purple&amp;quot;
        android:text=&amp;quot;button_0&amp;quot; /&amp;gt;

    &amp;lt;Button
        android:id=&amp;quot;@+id/btn_1&amp;quot;
        style=&amp;quot;@style/ButtonStyle&amp;quot;
        android:background=&amp;quot;@android:color/darker_gray&amp;quot;
        android:text=&amp;quot;button_1&amp;quot; /&amp;gt;

    &amp;lt;Button
        android:id=&amp;quot;@+id/btn_3&amp;quot;
        style=&amp;quot;@style/ButtonStyle&amp;quot;
        android:background=&amp;quot;@android:color/holo_blue_dark&amp;quot;
        android:text=&amp;quot;button_2&amp;quot; /&amp;gt;
&amp;lt;/LinearLayout&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;比较重要的两句代码就是：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;android:divider=&amp;quot;@drawable/drawable_divider&amp;quot;
android:showDividers=&amp;quot;middle&amp;quot;
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;这个&lt;code&gt;@drawable/drawable_divider&lt;/code&gt;就是上面写的drawable文件，&lt;code&gt;showDividers&lt;/code&gt;的值可以选择&lt;code&gt;beginning&lt;/code&gt;, &lt;code&gt;middle&lt;/code&gt;, &lt;code&gt;end&lt;/code&gt;, &lt;code&gt;none&lt;/code&gt;，什么意思一看就明白。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;&lt;code&gt;LinearLayout&lt;/code&gt;的&lt;code&gt;android:divider&lt;/code&gt;是一个非常好用而且强大的功能噢～&lt;/strong&gt;&lt;/p&gt;
&lt;h1 id=&quot;3-更加方便的启动Fragment或Activity&quot;&gt;&lt;a href=&quot;#3-更加方便的启动Fragment或Activity&quot; class=&quot;headerlink&quot; title=&quot;3. 更加方便的启动Fragment或Activity&quot;&gt;&lt;/a&gt;3. 更加方便的启动Fragment或Activity&lt;/h1&gt;&lt;p&gt;启动Activity的一个非常普遍的方法就是&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;Intent intent = new Intent(MainActivity.this, AlbumActivity.class);
intent.putExtra(ALBUM_ID, 100L);
startActivity(intent);
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;如果app中有很多地方会启动&lt;code&gt;AlbumActivity&lt;/code&gt;，那么这样的话你就需要在很多地方重复上面的代码，这不是在&lt;strong&gt;Repeat Yourself&lt;/strong&gt;了吗。不光如此，如果一个Activity需要很多值，那么你就需要一个一个的设置，非常麻烦。&lt;/p&gt;
&lt;p&gt;换个思路，你可以这样写：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;public class AlbumActivity extends Activity {
    //....

    /**
     * launch activity
     * @param context Context
     * @param albumId id
    */
    public static void launch(Context context, long albumId) {
        Intent intent = new Intent(context, AlbumActivity.class);
        intent.putExtra(ALBUM_ID, albumId);
        context.startActivity(intent);
    }

    //...
}
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;然后你就可以直接这样启动&lt;code&gt;AlbumActivity&lt;/code&gt;：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;AlbumActivity.launch(MainActivity.this, 100L);
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;其实启动Fragment也可以使用这样的方法，超级方便。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;我一直觉得，我写一个Fragment或Activity是希望别人以更加方便的方式去调用，而不是别人要用我的组件的时候先要看半天代码，这样很浪费时间&lt;/strong&gt;&lt;/p&gt;
&lt;h1 id=&quot;4-ListView的layout-height属性&quot;&gt;&lt;a href=&quot;#4-ListView的layout-height属性&quot; class=&quot;headerlink&quot; title=&quot;4. ListView的layout_height属性&quot;&gt;&lt;/a&gt;4. ListView的layout_height属性&lt;/h1&gt;&lt;p&gt;ListView的&lt;code&gt;layout_height&lt;/code&gt;属性一般情况下不允许设置为&lt;code&gt;wrap_content&lt;/code&gt;，这样会在ListView滚动的时候非常浪费性能（getView方法会多次调用）&lt;/p&gt;
&lt;h1 id=&quot;5-Singleton模板&quot;&gt;&lt;a href=&quot;#5-Singleton模板&quot; class=&quot;headerlink&quot; title=&quot;5. Singleton模板&quot;&gt;&lt;/a&gt;5. Singleton模板&lt;/h1&gt;&lt;p&gt;在看Android源码的时候发现这么一个类：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;package android.util;

/**
 * Singleton helper class for lazily initialization.
 *
 * Modeled after frameworks/base/include/utils/Singleton.h
 *
 * @hide
 */
public abstract class Singleton&amp;lt;T&amp;gt; {
    private T mInstance;

    protected abstract T create();

    public final T get() {
        synchronized (this) {
            if (mInstance == null) {
                mInstance = create();
            }
            return mInstance;
        }
    }
}
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;突然发现这个代码写的真好啊啊…如果你想创建一个单例的话只要继承这个&lt;code&gt;Singleton&amp;lt;T&amp;gt;&lt;/code&gt;模板就可以了&lt;/p&gt;
&lt;p&gt;但是！因为Android系统源码上加了&lt;code&gt;@hide&lt;/code&gt;标注，我们不能直接继承这个&lt;code&gt;android.util.Singleton&amp;lt;T&amp;gt;&lt;/code&gt;类。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt; 我们可以在工程的utils包中写一份一模一样的代码嘛～ &lt;/strong&gt;&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;记录一些好用的开发技巧&lt;/p&gt;
    
    </summary>
    
    
      <category term="Android" scheme="http://bxbxbai.gitcafe.io/tags/Android/"/>
    
      <category term="Note" scheme="http://bxbxbai.gitcafe.io/tags/Note/"/>
    
      <category term="开发经验" scheme="http://bxbxbai.gitcafe.io/tags/%E5%BC%80%E5%8F%91%E7%BB%8F%E9%AA%8C/"/>
    
  </entry>
  
  <entry>
    <title>我的2014</title>
    <link href="http://bxbxbai.gitcafe.io/2015/01/13/my-2014/"/>
    <id>http://bxbxbai.gitcafe.io/2015/01/13/my-2014/</id>
    <published>2015-01-13T12:56:20.000Z</published>
    <updated>2016-02-29T07:54:20.000Z</updated>
    
    <content type="html">&lt;h3 id=&quot;2014，对我来说是非常重要的一年。&quot;&gt;&lt;a href=&quot;#2014，对我来说是非常重要的一年。&quot; class=&quot;headerlink&quot; title=&quot;2014，对我来说是非常重要的一年。&quot;&gt;&lt;/a&gt;&lt;strong&gt;2014，对我来说是非常重要的一年。&lt;/strong&gt;&lt;/h3&gt;&lt;p&gt;因为这一年我研究生毕业，然后在上海工作了。2014年春节过完我就来公司报道了，话说我也在公司待了将近一年了。学到了很多，总结了很多，并且也收获了很多&lt;/p&gt;
&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;
&lt;p&gt;一开始，分到任务的时候我就会去想各种解决方法，那时的我唯一的一个想法就是将这个功能完成或bug改掉。后来时间长了以后，我就对客户端的代码慢慢开始熟悉，从界面到各种模块，然后又逐渐熟悉了如何加载图片如何发送HTTP请求，再到各种ContentProvider，从整体上对客户端的代码有了一个认识，这个时候我已经积累了一些经验&lt;/p&gt;
&lt;p&gt;后来大家又开始专门对客户端的性能进行优化，我开始熟悉在线歌曲列表的代码的一些细节，并且对歌曲列表滑动的卡顿问题进行优化，慢慢的我也自己学会了使用TraceView工具，也顺便写了一篇&lt;a href=&quot;http://bxbxbai.gitcafe.io/2014/10/25/use-trace-view/&quot;&gt;文章&lt;/a&gt;，这篇文章也在&lt;a href=&quot;http://www.weibo.com/5038680568/BuUa9wzgv&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;微博上&lt;/a&gt;也一些人转发过&lt;/p&gt;
&lt;p&gt;因为需求不断变的复杂，我开始对代码的重用性和可维护性有了认识，代码的可重用性高可以直接提高我们开发的效率，因为有些前面有人开发过的功能可以直接拿来使用。因此，我现在提交的代码也会考虑一些可重用的问题。&lt;/p&gt;
&lt;p&gt;2014年这大半年的时间里，我觉得我最大的收获就是，&lt;strong&gt;在做一个新的功能或改一个bug 的时候，应该要想一想还有没有更好的解决办法了？&lt;/strong&gt; 这个解决办法在以后需求改动时，够不够灵活，能不能重用以前的代码。如果面对一个新的需求的时候，最好要想到两种以上的解决方案，然后衡量每种方案实现的难易程度，如果以后需求改动，这种方案的改动会不会很麻烦（也就是扩展性和灵活性如何）。综合个方面来选择一个比较好的方案&lt;/p&gt;
&lt;p&gt;利用大把的周末时间，我也看了一些大牛的代码，比如Volley和Picasso，有&lt;a href=&quot;http://bxbxbai.gitcafe.io/2014/12/24/read-volley-source-code/&quot;&gt;很多收获&lt;/a&gt;。也自学了如何反编译，反编译了一些客户端来研究他们的架构和某些功能的实现，这一年我的一个主要思考的问题就是，&lt;strong&gt;如何架构一个易于扩展，并且代码重用性高的app&lt;/strong&gt;。同时也集合了一些我觉得很好的开源项目，学习他们的代码&lt;/p&gt;
&lt;p&gt;这一年也马马虎虎读了几本好书。比如《文明之光》系列（第3本才刚买来呢）、《图解HTTP》、《简约至上——交互设计四策略》、《程序员的思维修炼》、《参与感》，重新看了一遍《暗时间》。《文明之光》系列是吴军博士最新的书，2014年春节我重读了《浪潮之巅》觉得实在太精彩了！《文明之光》目前也只读了两本，非常好看，文笔非常朴实。&lt;/p&gt;
&lt;p&gt;另外，在番薯同学的带领下，成为了一名菜驴。在这里要感谢番薯同学！2015要更多的参加户外徒步，更加多的运动&lt;/p&gt;
&lt;p&gt;###&lt;strong&gt;2015的计划：&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;首要任务就是，继续深入Android开发，更加深入理解Android 4大组件，熟悉Android的运行原理，建立Android开发的整体框架（包括自定义View，动画），Android开发软件架构，如何去设计一个代码重用高，性能也高的app&lt;/li&gt;
&lt;li&gt;学习Material Design，学习有关Material Design的开源库&lt;/li&gt;
&lt;li&gt;看8-10本好书，学习互联网金融相关知识&lt;/li&gt;
&lt;li&gt;更多的运动，一定要买一辆自行车；多参加户外运动，去一次台湾&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;最后，思考和总结是一个人进步的重要品质&lt;/strong&gt;&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;2014，对我来说是非常重要的一年。&quot;&gt;&lt;a href=&quot;#2014，对我来说是非常重要的一年。&quot; class=&quot;headerlink&quot; title=&quot;2014，对我来说是非常重要的一年。&quot;&gt;&lt;/a&gt;&lt;strong&gt;2014，对我来说是非常重要的一年。&lt;/strong&gt;&lt;/h3&gt;&lt;p&gt;因为这一年我研究生毕业，然后在上海工作了。2014年春节过完我就来公司报道了，话说我也在公司待了将近一年了。学到了很多，总结了很多，并且也收获了很多&lt;/p&gt;
    
    </summary>
    
    
      <category term="2014" scheme="http://bxbxbai.gitcafe.io/tags/2014/"/>
    
  </entry>
  
  <entry>
    <title>Volley源码分析</title>
    <link href="http://bxbxbai.gitcafe.io/2014/12/24/read-volley-source-code/"/>
    <id>http://bxbxbai.gitcafe.io/2014/12/24/read-volley-source-code/</id>
    <published>2014-12-24T07:50:22.000Z</published>
    <updated>2015-09-12T07:01:41.000Z</updated>
    
    <content type="html">&lt;p&gt;Volley是一个可以让你在Android应用中以非常简单的方式来发送http请求并且处理服务器返回的数据，这样你就可以花更多的时间关心你的业务实现了&lt;/p&gt;
&lt;p&gt;前段时间用了一下Volley，发现非常好用，就很好奇Volley是怎么实现的，因为它是Google的人开发的，也好奇大牛们写的代码都是怎么样的？抱着学习的心态来分析一下Volley的源码，也可以为我以后的工作中积累一些好用的解决方案。以后我也会看一下&lt;a href=&quot;http://loopj.com/android-async-http/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Android-async-http-client&lt;/a&gt;是如何来处理发送http请求这类问题的&lt;/p&gt;
&lt;p&gt;Volley的使用可以看这篇博客：&lt;a href=&quot;http://bxbxbai.github.io/2014/09/14/android-working-with-volley/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Volley库的使用介绍&lt;/a&gt; ，你可以在这篇博客中找到更多关于Volley的学习资料：&lt;a href=&quot;http://bxbxbai.github.io/2014/10/07/android-develop-resource/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Android开发资源&lt;/a&gt;&lt;/p&gt;
&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;
&lt;p&gt;&lt;strong&gt;首先说明一下，在Volley中每发送一个请求都需要创建一个&lt;code&gt;Request&lt;/code&gt;对象，然后将这个&lt;code&gt;Request&lt;/code&gt;放入一个&lt;code&gt;RequestQueue&lt;/code&gt;中，然后Volley会自动帮你处理这个&lt;code&gt;Request&lt;/code&gt;&lt;/strong&gt;，你只需要处理返回的结果即可&lt;/p&gt;
&lt;p&gt;从Volley的源码中可以看出，Volley就是实现了一个生产者消费者问题（&lt;a href=&quot;http://en.wikipedia.org/wiki/Producer%E2%80%93consumer_problem&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Producer–consumer problem&lt;/a&gt;）。从源码里看，一个消费者（&lt;code&gt;CacheDispatcher&lt;/code&gt;）也可以是下一个消费者（&lt;code&gt;NetworkDispatcher&lt;/code&gt;）的生产者&lt;/p&gt;
&lt;p&gt;##0x0 Volley架构&lt;br&gt;总的来说Volley库的架构非常清晰，源代码也非常好理解，Volley的架构可以用下面这张图来说明：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://bxbxbai.github.io/img/volley.png&quot; alt=&quot;volley&quot;&gt;&lt;/p&gt;
&lt;p&gt;这张图是Google I/O 2013 大会上演讲的图，我是从Youtube的视频上截下来的。&lt;/p&gt;
&lt;p&gt;从这张图上可以很清晰的看见，一个Request被放到RequestQueue中后，马上被&lt;code&gt;CacheDispatcher&lt;/code&gt;处理，从名字就可以看出来这是检查Cache的，如果Cache中有数据并且没过期的话Volley就直接将数据返回了&lt;/p&gt;
&lt;p&gt;如果&lt;code&gt;CacheDispatcher&lt;/code&gt;中没有数据或，数据已经过期了，那么Volley就通过&lt;code&gt;NetworkDispatcher&lt;/code&gt;发送一个http请求来获取最新的数据，从图中可以看出有多个线程来发送http请求，也就是说Volley可以同时发送多个http请求&lt;/p&gt;
&lt;p&gt;##0x1&lt;br&gt;上面将了Volley处理一个&lt;code&gt;Request&lt;/code&gt;的大致流程，那么从源码角度来看Volley是怎么处理的呢？&lt;/p&gt;
&lt;p&gt;###0x10 Request&lt;t&gt;类&lt;br&gt;首先来看一下Volley的&lt;code&gt;Request&lt;/code&gt;类的签名：&lt;/t&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;public abstract class Request&amp;lt;T&amp;gt; implements Comparable&amp;lt;Request&amp;lt;T&amp;gt;&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;code&gt;Request&lt;/code&gt;是一个范型，其中&lt;code&gt;T&lt;/code&gt;表示这个&lt;code&gt;Request&lt;/code&gt;返回的数据类型，并且这个&lt;code&gt;Request&lt;/code&gt;是可以相互比较的（实现&lt;code&gt;Comparable&lt;/code&gt;接口），&lt;code&gt;Request&lt;/code&gt;类实现的&lt;code&gt;Comparable&lt;/code&gt;接口就是比较两个&lt;code&gt;Request&lt;/code&gt;的priority&lt;/p&gt;
&lt;p&gt;Volley自带的&lt;code&gt;Request&lt;/code&gt;包含了一下几个：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;ImageRequest&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;JsonArrayRequest&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;JsonObjectRequest&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;JsonRequest&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;StringRequest&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;ClearCacheRequest&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;从字面上可以基本看出每个Request是用来干什么的。&lt;/p&gt;
&lt;p&gt;你也可以自定义一个&lt;code&gt;Request&amp;lt;T&amp;gt;&lt;/code&gt;，比如说你可以定义一个&lt;code&gt;GsonRequest&amp;lt;T&amp;gt;&lt;/code&gt;，当Volley发送一个请求后返回的是一个Java对象（通过Gson将json字符串自动转换成一个Java对象），这样的话写代码就非常方便了&lt;/p&gt;
&lt;p&gt;自定义一个&lt;code&gt;Request&amp;lt;T&amp;gt;&lt;/code&gt;需要实现&lt;code&gt;Request&lt;/code&gt;类的两个抽象方法：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;Response&amp;lt;T&amp;gt; parseNetworkResponse(NetworkResponse response)&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;void deliverResponse(T response)&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;第一个方法用来说明如何解析这个Response，说白了就是将&lt;code&gt;NetworkResponse&lt;/code&gt;转换成&lt;code&gt;Response&lt;/code&gt;对象。比如&lt;code&gt;ImageRequest&lt;/code&gt;类就是需要将reponse数据转换成一个Bitmap对象&lt;/p&gt;
&lt;p&gt;第二个方法是用来告诉Volley如何传递这个解析以后的结果，一般是用一个&lt;code&gt;Response.Listener&amp;lt;T&amp;gt;&lt;/code&gt;回调接口来传递这个结果&lt;/p&gt;
&lt;p&gt;##0x2 RequestQueue&lt;br&gt;上面讲了如何使用&lt;code&gt;Request&lt;/code&gt;类，现在讲讲&lt;code&gt;RequestQueue&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;创建一个&lt;code&gt;RequestQueue&lt;/code&gt;，需要4个参数&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Cache&lt;/strong&gt;：Volley使用的缓存，默认是&lt;code&gt;DiskBasedCache&lt;/code&gt;（这个Cache为了减少gc，自己实现了一个简单的序列化方法）&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Network&lt;/strong&gt; ： 这个是&lt;code&gt;RequestQueue&lt;/code&gt;用来发送http请求的工具，后面会详细讲&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;发送http请求的线程数&lt;/strong&gt;（默认是4个）：&lt;code&gt;NetworkDispatcher&lt;/code&gt; 线程数量&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;ResponseDelivery&lt;/strong&gt; ：用于传递Response，一般是被&lt;code&gt;CacheDispatcher&lt;/code&gt;和&lt;code&gt;NetworkDispatcher&lt;/code&gt;用于传递从Cache中拿到的或Network返回的HTTP Response&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;####RequestQueue包含的其他东西&lt;br&gt;上面讲的是Volley的&lt;code&gt;RequestQueue&lt;/code&gt;可以传入的参数，一个&lt;code&gt;RequestQueue&lt;/code&gt;还需要以下东西才能正常运行：&lt;/p&gt;
&lt;p&gt;&lt;code&gt;AtomicInteger mSequenceGenerator&lt;/code&gt; 是一个序列号生成器，它为每一个加入到队列中的Request打上一个序列号&lt;/p&gt;
&lt;p&gt;&lt;code&gt;PriorityBlockingQueue&amp;lt;Request&amp;lt;?&amp;gt;&amp;gt; mCacheQueue&lt;/code&gt; 表示在Cache队列中的Request，从最上面的图中可以看到，一个&lt;code&gt;Request&lt;/code&gt;被加到队列中后，它首先就进入&lt;code&gt;mCacheQueue&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;code&gt;PriorityBlockingQueue&amp;lt;Request&amp;lt;?&amp;gt;&amp;gt; mNetworkQueue&lt;/code&gt; 表示等待通过&lt;code&gt;Network&lt;/code&gt;发送HTTP请求的&lt;code&gt;Request&lt;/code&gt;队列。这个和上面的&lt;code&gt;mCacheQueue&lt;/code&gt;都是一个优先队列，每一个加入到优先队列中的&lt;code&gt;Request&lt;/code&gt;都会按照它的优先级进行排序（如果优先级一样的话，就通过&lt;code&gt;mSequenceGenerator&lt;/code&gt;生成的序号进行排序，这部分代码在&lt;code&gt;Request.compareTo&lt;/code&gt;中可以看到）&lt;/p&gt;
&lt;p&gt;&lt;code&gt;Set&amp;lt;Request&amp;lt;?&amp;gt;&amp;gt; mCurrentRequests&lt;/code&gt; 是&lt;code&gt;RequestQueue&lt;/code&gt;当前正在执行或正在等待的&lt;code&gt;Request&lt;/code&gt;，在&lt;code&gt;mCacheQueue&lt;/code&gt;或&lt;code&gt;mNetworkQueue&lt;/code&gt;中的&lt;code&gt;Request&lt;/code&gt;都会被存放到&lt;code&gt;mCurrentRequests&lt;/code&gt;列表中。这个列表中的&lt;code&gt;Request&lt;/code&gt;可以用来执行&lt;code&gt;RequestQueue.cancelAll&lt;/code&gt;操作&lt;/p&gt;
&lt;p&gt;&lt;code&gt;Map&amp;lt;String, Queue&amp;lt;Request&amp;lt;?&amp;gt;&amp;gt;&amp;gt; mWaitingRequests&lt;/code&gt; 这个对象也很有意思，这个map的key是&lt;code&gt;Request&lt;/code&gt;的cacheKay，value是一个对应这个cacheKey所有的&lt;code&gt;Request&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;###0x20 创建一个RequestQueue&lt;/p&gt;
&lt;p&gt;一般创建一个&lt;code&gt;RequestQueue&lt;/code&gt;的方法就是通过下面这句代码：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;RequestQueue queue = Volley.newRequestQueue(Context);
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;当然，如果你需要自定义的话，就可以通过&lt;code&gt;RequestQueue&lt;/code&gt;的构造函数自己new一个&lt;code&gt;RequestQueue&lt;/code&gt;。一般来说，一个app中有一个&lt;code&gt;RequestQueue&lt;/code&gt;就够了，没必要生成多个队列，生成多个队列会浪费系统的线程资源&lt;/p&gt;
&lt;p&gt;在创建一个&lt;code&gt;RequestQueue&lt;/code&gt;的时候，Volley已经充分帮我们考虑了一些事情&lt;/p&gt;
&lt;p&gt;Android中用来发送HTTP请求的类有&lt;code&gt;HttpUrlConnection&lt;/code&gt;和&lt;code&gt;AndroidHttpClient&lt;/code&gt;，一般会使用前者，因为Google对它做了很多优化，但是在Android Gingerbread（Android 2.3，API LEVEL = 9）以前，&lt;code&gt;HttpUrlConnection&lt;/code&gt;会有一些bug，那么应该使用后者。那为什么不直接使用后者呢？因为Google对前者做了很多优化…=。=&lt;/p&gt;
&lt;p&gt;Volley对此也做了相应的判断，Android 2.3以前使用&lt;code&gt;AndroidHttpClient&lt;/code&gt;，Android 3.0之后使用&lt;code&gt;HttpUrlConnection&lt;/code&gt;，这样就会有相对更好的性能，更节省流量(&lt;a href=&quot;http://android-developers.blogspot.com/2011/09/androids-http-clients.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;看这里&lt;/a&gt;)&lt;/p&gt;
&lt;p&gt;&lt;code&gt;Network&lt;/code&gt;接口对他们进行了封装，对&lt;code&gt;RequestQueue&lt;/code&gt;而言只有&lt;code&gt;Network&lt;/code&gt;接口，但是真正发送请求的地方在&lt;code&gt;HurlStack.performRequest&lt;/code&gt;或&lt;code&gt;HttpClientStack.performRequest&lt;/code&gt;方法中，前者使用&lt;code&gt;HttpUrlConnection&lt;/code&gt;，后者使用&lt;code&gt;AndroidHttpClient&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;####好处&lt;br&gt;&lt;code&gt;RequestQueue&lt;/code&gt;只依赖于&lt;code&gt;Network&lt;/code&gt;接口，而不依赖于实现，它不必关心&lt;code&gt;Network.performRequest&lt;/code&gt;具体的实现方式&lt;/p&gt;
&lt;p&gt;###0x21 启动和停止RequestQueue&lt;/p&gt;
&lt;p&gt;在&lt;code&gt;RequestQueue&lt;/code&gt;生成以后就需要调用&lt;code&gt;RequestQueue.start&lt;/code&gt;方法启动&lt;/p&gt;
&lt;p&gt;&lt;code&gt;RequestQueue.start&lt;/code&gt;方法就是启动每一个Dispatcher（每一个Dispatcher就是一个线程）&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;/**
 * Starts the dispatchers in this queue.
 */
public void start() {
    stop();  // Make sure any currently running dispatchers are stopped.
    // Create the cache dispatcher and start it.
    mCacheDispatcher = new CacheDispatcher(mCacheQueue, mNetworkQueue, mCache, mDelivery);
    mCacheDispatcher.start();

    // Create network dispatchers (and corresponding threads) up to the pool size.
    for (int i = 0; i &amp;lt; mDispatchers.length; i++) {
        NetworkDispatcher networkDispatcher = new NetworkDispatcher(mNetworkQueue, mNetwork,
                mCache, mDelivery);
        mDispatchers[i] = networkDispatcher;
        networkDispatcher.start();
    }
}
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;同理&lt;code&gt;RequestQueue.stop&lt;/code&gt;方法就是停止每一个Dispatcher，代码就不贴了&lt;/p&gt;
&lt;p&gt;###0x22 向RequestQueue中添加Request&lt;/p&gt;
&lt;p&gt;每创建一个&lt;code&gt;Request&lt;/code&gt;都需要通过&lt;code&gt;RequestQueue.add&lt;/code&gt;方法添加到队列中。调用&lt;code&gt;RequestQueue&lt;/code&gt;的&lt;code&gt;add&lt;/code&gt;方法，这就是生产者消费者问题中，生产者（producer）向池子（queue）里面存放物品（goods），然后消费者从池子（queue）里拿东西&lt;/p&gt;
&lt;p&gt;先看代码：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;/**
 * Adds a Request to the dispatch queue.
 * @param request The request to service
 * @return The passed-in request
 */
public &amp;lt;T&amp;gt; Request&amp;lt;T&amp;gt; add(Request&amp;lt;T&amp;gt; request) {
    // Tag the request as belonging to this queue and     add it to the set of current requests.
    request.setRequestQueue(this);
    // A
    synchronized (mCurrentRequests) {
        mCurrentRequests.add(request);
    }

    // Process requests in the order they are added.
    request.setSequence(getSequenceNumber());
    request.addMarker(&amp;quot;add-to-queue&amp;quot;);

    // If the request is uncacheable, skip the cache queue and go straight to the network.
    // B
    if (!request.shouldCache()) {
        mNetworkQueue.add(request);
        return request;
    }

    // Insert request into stage if there&amp;apos;s already a request with the same cache key in flight.
    synchronized (mWaitingRequests) {
        String cacheKey = request.getCacheKey();
        // C
        if (mWaitingRequests.containsKey(cacheKey)) {
            // There is already a request in flight. Queue up.
            Queue&amp;lt;Request&amp;lt;?&amp;gt;&amp;gt; stagedRequests = mWaitingRequests.get(cacheKey);
            if (stagedRequests == null) {
                stagedRequests = new LinkedList&amp;lt;Request&amp;lt;?&amp;gt;&amp;gt;();
            }
            stagedRequests.add(request);
            mWaitingRequests.put(cacheKey, stagedRequests);
            if (VolleyLog.DEBUG) {
                VolleyLog.v(&amp;quot;Request for cacheKey=%s is in flight, putting on hold.&amp;quot;, cacheKey);
            }
        } else {
            // Insert &amp;apos;null&amp;apos; queue for this cacheKey, indicating there is now a request in flight.
            // D
            mWaitingRequests.put(cacheKey, null);
            mCacheQueue.add(request);
        }
        return request;
    }
}
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;上面代码就是添加一个&lt;code&gt;Request&lt;/code&gt;到队列中的全部操作。我加了A、B、C、D关键处标记，&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;A : 首先，将&lt;code&gt;Request&lt;/code&gt;加入到&lt;code&gt;mCurrentRequests&lt;/code&gt;，表示有一个&lt;code&gt;Request&lt;/code&gt;将要被处理，然后这是这个&lt;code&gt;Request&lt;/code&gt;的序列号和一个测试标记&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;B : 检查这个&lt;code&gt;Request&lt;/code&gt;是否可以被Cache，如果不可以，就直接放入&lt;code&gt;mNetworkQueue&lt;/code&gt;中，由&lt;code&gt;NetworkDispatcher&lt;/code&gt;处理，直接发送HTTP请求&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;C : 接下来，表示&lt;code&gt;Request&lt;/code&gt;都可以被Cache的，检查&lt;code&gt;Request&lt;/code&gt;的cacheKey字段，如果存在相同cacheKey的&lt;code&gt;Request&lt;/code&gt;，就表示可以不处理这个&lt;code&gt;Request&lt;/code&gt;了，直接拿别的&lt;code&gt;Request&lt;/code&gt;的结果即可，这样可以减少相同&lt;code&gt;Request&lt;/code&gt;的发送，减少流量消耗~&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;D : 如果C不满足的话，就将这个&lt;code&gt;Request&lt;/code&gt;放入&lt;code&gt;mCacheQueue&lt;/code&gt;队列中，由&lt;code&gt;CacheDispatcher&lt;/code&gt;来处理 &lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;###0x23 如何传递Response&lt;/p&gt;
&lt;p&gt;当&lt;code&gt;CacheDispatcher&lt;/code&gt;或&lt;code&gt;NetworkDispatcher&lt;/code&gt;拿到Response以后（不管是Cache中的还是请求HTTP返回的），都会通过一个叫做&lt;code&gt;ResponseDelivery&lt;/code&gt;的东西传递出去。&lt;/p&gt;
&lt;p&gt;其中，传递HTTP Response真正的地方就在&lt;code&gt;ResponseDelivery&lt;/code&gt;的&lt;code&gt;ResponseDeliveryRunnable&lt;/code&gt;类中，下面是&lt;code&gt;ResponseDeliveryRunnable&lt;/code&gt;类的&lt;code&gt;run&lt;/code&gt;方法：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt; @Override
 public void run() {
     // If this request has canceled, finish it and don&amp;apos;t deliver.
     if (mRequest.isCanceled()) {
         mRequest.finish(&amp;quot;canceled-at-delivery&amp;quot;);
         return;
     }

     // Deliver a normal response or error, depending.
     if (mResponse.isSuccess()) {
         mRequest.deliverResponse(mResponse.result);
     } else {
         mRequest.deliverError(mResponse.error);
     }

     // If this is an intermediate response, add a marker, otherwise we&amp;apos;re done
     // and the request can be finished.
     if (mResponse.intermediate) {
         mRequest.addMarker(&amp;quot;intermediate-response&amp;quot;);
     } else {
         mRequest.finish(&amp;quot;done&amp;quot;);
     }

     // If we have been provided a post-delivery runnable, run it.
     if (mRunnable != null) {
         mRunnable.run();
     }
}
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;这个方法就会检查这个&lt;code&gt;Response&lt;/code&gt;，如果&lt;code&gt;Response&lt;/code&gt;是成功的，那么就通过&lt;code&gt;Request.deliverResponse&lt;/code&gt;方法传递。&lt;/p&gt;
&lt;p&gt;在本文最上面可以看到，&lt;code&gt;Request.deliverResponse&lt;/code&gt;是一个抽象方法，每个&lt;code&gt;Request&lt;/code&gt;都需要自己实现处理&lt;code&gt;Response&lt;/code&gt;的代码，一般都是通过调用&lt;code&gt;Response.Listener&lt;/code&gt; 接口来处理结果&lt;/p&gt;
&lt;p&gt;##0x3 CacheDispatcher&lt;/p&gt;
&lt;p&gt;&lt;code&gt;CacheDispatcher&lt;/code&gt;是一个专门用来检查Cache的线程，它其实既是消费者也是生产者。它需要以下几样东西：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;BlockingQueue&amp;lt;Request&amp;lt;?&amp;gt;&amp;gt; mCacheQueue&lt;/code&gt; ： 等待检查Cache 的Request队列&lt;/li&gt;
&lt;li&gt;&lt;code&gt;BlockingQueue&amp;lt;Request&amp;lt;?&amp;gt;&amp;gt; mNetworkQueue&lt;/code&gt; ： 等待发送HTTP请求的Request队列&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Cache mCache&lt;/code&gt; ： Volley使用的Cache，默认就是&lt;code&gt;DiskBasedCache&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;ResponseDelivery mDelivery&lt;/code&gt; ：如果检查的Cache符合要求（没有过期），就用这个来传递Response&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;从上面图中可以看出，&lt;code&gt;CacheDispatcher&lt;/code&gt;对于app来说是一个消费者，它从&lt;code&gt;mCacheQueue&lt;/code&gt;中拿Request来检查Cache。对&lt;code&gt;NetworkDispatcher&lt;/code&gt;来说，又是一个生产者（如果检查的Cache没有或者Cache已经过期，就向&lt;code&gt;mNetworkQueue&lt;/code&gt;中添加Request）&lt;/p&gt;
&lt;p&gt;下面就是&lt;code&gt;CacheDispatcher&lt;/code&gt;的&lt;code&gt;run&lt;/code&gt;方法，从源代码里看一看到&lt;code&gt;CacheDispatcher&lt;/code&gt;会一直运行，当&lt;code&gt;mCacheQueue&lt;/code&gt;中没有需要处理的&lt;code&gt;Request&lt;/code&gt;时，此线程会一直被&lt;code&gt;mCacheQueue.take()&lt;/code&gt;方法阻塞，直到&lt;code&gt;RequestQueue&lt;/code&gt;向&lt;code&gt;mCacheQueue&lt;/code&gt;添加了一个请求。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;@Override
public void run() {
    if (DEBUG) VolleyLog.v(&amp;quot;start new dispatcher&amp;quot;);
    Process.setThreadPriority(Process.THREAD_PRIORITY_BACKGROUND);

    // Make a blocking call to initialize the cache.
    mCache.initialize();

    while (true) {
        try {
            // Get a request from the cache triage queue, blocking until
            // at least one is available.
            final Request&amp;lt;?&amp;gt; request = mCacheQueue.take();
            request.addMarker(&amp;quot;cache-queue-take&amp;quot;);

            // If the request has been canceled, don&amp;apos;t bother dispatching it.
            if (request.isCanceled()) {
                request.finish(&amp;quot;cache-discard-canceled&amp;quot;);
                continue;
            }

            // Attempt to retrieve this item from cache.
            Cache.Entry entry = mCache.get(request.getCacheKey());
            if (entry == null) {
                request.addMarker(&amp;quot;cache-miss&amp;quot;);
                // Cache miss; send off to the network dispatcher.
                mNetworkQueue.put(request);
                continue;
            }

            // If it is completely expired, just send it to the network.
            if (entry.isExpired()) {
                request.addMarker(&amp;quot;cache-hit-expired&amp;quot;);
                request.setCacheEntry(entry);
                mNetworkQueue.put(request);
                continue;
            }

            // We have a cache hit; parse its data for delivery back to the request.
            request.addMarker(&amp;quot;cache-hit&amp;quot;);
            Response&amp;lt;?&amp;gt; response = request.parseNetworkResponse(
                    new NetworkResponse(entry.data, entry.responseHeaders));
            request.addMarker(&amp;quot;cache-hit-parsed&amp;quot;);

            if (!entry.refreshNeeded()) {
                // Completely unexpired cache hit. Just deliver the response.
                mDelivery.postResponse(request, response);
            } else {
                // Soft-expired cache hit. We can deliver the cached response,
                // but we need to also send the request to the network for
                // refreshing.
                request.addMarker(&amp;quot;cache-hit-refresh-needed&amp;quot;);
                request.setCacheEntry(entry);

                // Mark the response as intermediate.
                response.intermediate = true;

                // Post the intermediate response back to the user and have
                // the delivery then forward the request along to the network.
                mDelivery.postResponse(request, response, new Runnable() {
                    @Override
                    public void run() {
                        try {
                            mNetworkQueue.put(request);
                        } catch (InterruptedException e) {
                            // Not much we can do about this.
                        }
                    }
                });
            }

        } catch (InterruptedException e) {
            // We may have been interrupted because it was time to quit.
            if (mQuit) {
                return;
            }
            continue;
        }
    }
}
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;##0x4 NetworkDispatcher&lt;/p&gt;
&lt;p&gt;&lt;code&gt;NetworkDispatcher&lt;/code&gt;和&lt;code&gt;CacheDispatcher&lt;/code&gt;非常类似，它也需要4个东西：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;BlockingQueue&amp;lt;Request&amp;lt;?&amp;gt;&amp;gt; mNetworkQueue&lt;/code&gt; ： 等待发送HTTP请求的Request队列&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Network mNetwork&lt;/code&gt; ： 用于发送HTTP请求的，&lt;code&gt;Network&lt;/code&gt;是一个接口&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Cache mCache&lt;/code&gt; ： Volley使用的Cache，默认就是&lt;code&gt;DiskBasedCache&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;ResponseDelivery mDelivery&lt;/code&gt; ：如果检查的Cache符合要求（没有过期），就用这个来传递Response&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;其中操作的过程也和&lt;code&gt;CacheDispatcher&lt;/code&gt;类似，就不贴源码了&lt;/p&gt;
&lt;p&gt;##0x5 ImageLoader&lt;br&gt;上面讲的东西大致就构成了Volley库&lt;strong&gt;最核心&lt;/strong&gt;的东西，一般的请求json或图片是没有太大问题的。但是Google的工程师又想到为我们广大码农减少工作量，增加了&lt;code&gt;ImageLoader&lt;/code&gt;和&lt;code&gt;NetworkImageView&lt;/code&gt;这两个东西&lt;/p&gt;
&lt;p&gt;其实&lt;code&gt;ImageLoader&lt;/code&gt;这个工具和Volley库的整个架构是没有太大关系的，它就是为了更加方便的让我们加载网络图片&lt;/p&gt;
&lt;p&gt;创建一个&lt;code&gt;ImageLoader&lt;/code&gt;需要两个东西：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;RequestQueue ： 这个在上面已经说了好多了&lt;/li&gt;
&lt;li&gt;ImageCache ： 这是一个接口，Volley没有提供具体的实现，需要自己实现。一般都会实现一个基于内存的&lt;code&gt;LruImageCache&lt;/code&gt;，网上也有各种栗子。可以参考&lt;a href=&quot;http://square.github.io/picasso/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Picasso&lt;/a&gt;源码中的&lt;a href=&quot;https://github.com/square/picasso/blob/master/picasso/src/main/java/com/squareup/picasso/LruCache.java&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;实现&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;code&gt;ImageLoader&lt;/code&gt;也是对&lt;code&gt;RequestQueue&lt;/code&gt;的一个封装，它也会为创建一个&lt;code&gt;Request&amp;lt;ImageView&amp;gt;&lt;/code&gt;，然后把这个Request放到RequestQueue中去下载图片&lt;/p&gt;
&lt;p&gt;###0x50 在Volley中如何方便的加载一张图片&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;ImageLoader loader = new ImageLoader(RequestQueue, ImageCache);
NetworkImageView imageView = (NetworkImageView)findViewById(R.id.iv_news_pic);
imageView.setImageUrl(picUrl, loader);
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;上面3句代码就能够加载网络图片了，是不是很方便。&lt;code&gt;NetworkImageView&lt;/code&gt;会计算当前ImageView的宽高，然后创建一个ImageRequest，放入RequestQueue中下载图片。&lt;/p&gt;
&lt;p&gt;###0x51 NetworkImageView&lt;/p&gt;
&lt;p&gt;&lt;code&gt;NetworkImageView&lt;/code&gt;是继承&lt;code&gt;ImageView&lt;/code&gt;的，比传统的&lt;code&gt;ImageView&lt;/code&gt;多了一个加载网络图片的功能&lt;/p&gt;
&lt;p&gt;##0x6 最后&lt;br&gt;本文就是详细的分析了Volley库的结构了流程。本文觉得这个库设计的非常好，不管是扩展性还是代码可读性都非常好。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;RequestQueue&lt;/code&gt;就表示Volley运行的整个生命周期，它维护了很多个队列。&lt;code&gt;CacheDispatcher&lt;/code&gt;和&lt;code&gt;NetworkDispatcher&lt;/code&gt; 分别完成检查Cache和发送HTTP请求的工作。当拿到&lt;code&gt;NetworkResponse&lt;/code&gt;数据的时候，会调用&lt;code&gt;Request.parseNetworkResponse&lt;/code&gt;方法解析Response结果，最后调用&lt;code&gt;ResponseDeleivery&lt;/code&gt;对象来传递解析后的Response结果。&lt;/p&gt;
&lt;p&gt;Google还在Volley中加入了&lt;code&gt;ImageLoader&lt;/code&gt;和&lt;code&gt;NetworkImageView&lt;/code&gt;让我们广大码农以更加方便的方式加载网络图片&lt;/p&gt;
&lt;p&gt;###最后的最后&lt;/p&gt;
&lt;p&gt;Volley的整个架构实现就是最基本的生产者消费者模式（&lt;a href=&quot;http://en.wikipedia.org/wiki/Producer%E2%80%93consumer_problem&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Producer–consumer problem&lt;/a&gt;）。这种架构虽然很简单，但是用途也非常广泛，非常值得学习和借鉴！！&lt;/p&gt;
&lt;p&gt;也不是说Volley就完美了，最近本人又在学习&lt;a href=&quot;http://square.github.io/picasso/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Picasso&lt;/a&gt;的源码。这是一个非常好的专门用于加载图片的库，它不光可以加载网络图片，还可以用它来加载res目录下的图片、SD卡上的图片、Asset目录下的图片、手机图片库中的图片，而且扩展性也非常好！不说了，下次有机会就写一篇关于&lt;a href=&quot;http://square.github.io/picasso/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Picasso&lt;/a&gt;的源码分析博客&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;Volley是一个可以让你在Android应用中以非常简单的方式来发送http请求并且处理服务器返回的数据，这样你就可以花更多的时间关心你的业务实现了&lt;/p&gt;
&lt;p&gt;前段时间用了一下Volley，发现非常好用，就很好奇Volley是怎么实现的，因为它是Google的人开发的，也好奇大牛们写的代码都是怎么样的？抱着学习的心态来分析一下Volley的源码，也可以为我以后的工作中积累一些好用的解决方案。以后我也会看一下&lt;a href=&quot;http://loopj.com/android-async-http/&quot;&gt;Android-async-http-client&lt;/a&gt;是如何来处理发送http请求这类问题的&lt;/p&gt;
&lt;p&gt;Volley的使用可以看这篇博客：&lt;a href=&quot;http://bxbxbai.github.io/2014/09/14/android-working-with-volley/&quot;&gt;Volley库的使用介绍&lt;/a&gt; ，你可以在这篇博客中找到更多关于Volley的学习资料：&lt;a href=&quot;http://bxbxbai.github.io/2014/10/07/android-develop-resource/&quot;&gt;Android开发资源&lt;/a&gt;&lt;/p&gt;
    
    </summary>
    
    
      <category term="Volley 源码分析" scheme="http://bxbxbai.gitcafe.io/tags/Volley-%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90/"/>
    
  </entry>
  
  <entry>
    <title>LayoutInflater.inflate方法解析</title>
    <link href="http://bxbxbai.gitcafe.io/2014/11/19/make-sense-of-layoutinflater/"/>
    <id>http://bxbxbai.gitcafe.io/2014/11/19/make-sense-of-layoutinflater/</id>
    <published>2014-11-19T04:58:40.000Z</published>
    <updated>2015-09-12T07:01:41.000Z</updated>
    
    <content type="html">&lt;p&gt;&lt;code&gt;LayoutInflater.inflate&lt;/code&gt;方法应该是Android程序员最常使用的方法之一了，但是如果使用不当，你会碰见很多的坑。。。今天我就碰到了一个，我找到了解决方法，也打算把它记下来。。。&lt;/p&gt;
&lt;p&gt;事情是这样的，我有一个&lt;code&gt;LineaLayout&lt;/code&gt;，然后在代码中会&lt;code&gt;inflate&lt;/code&gt;若干个&lt;code&gt;View&lt;/code&gt;添加到这个&lt;code&gt;LineaLayout&lt;/code&gt;中，但是坑出现了。。。&lt;/p&gt;
&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;
&lt;p&gt;##0x00 一个栗子&lt;br&gt;需要添加到LinearLayout中的View布局文件类似如下（）：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;&amp;lt;RelativeLayout
    xmlns:android=&amp;quot;http://schemas.android.com/apk/res/android&amp;quot;
    android:layout_width=&amp;quot;80dp&amp;quot;
    android:paddingTop=&amp;quot;5dp&amp;quot;
    android:paddingBottom=&amp;quot;5dp&amp;quot;
    android:background=&amp;quot;@android:color/holo_green_dark&amp;quot;
    android:layout_height=&amp;quot;match_parent&amp;quot;&amp;gt;

    &amp;lt;ImageView
        android:id=&amp;quot;@+id/iv_media_menu_icon&amp;quot;
        android:layout_height=&amp;quot;24dp&amp;quot;
        android:layout_width=&amp;quot;24dp&amp;quot;
        android:src=&amp;quot;@drawable/ic_mv&amp;quot;
        android:layout_centerHorizontal=&amp;quot;true&amp;quot;/&amp;gt;
    &amp;lt;TextView
        android:id=&amp;quot;@+id/tv_media_menu_text&amp;quot;
        android:text=&amp;quot;bxbxbai&amp;quot;
        style=&amp;quot;@style/Menu_TextView&amp;quot;/&amp;gt;
&amp;lt;/RelativeLayout&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;这个&lt;code&gt;View&lt;/code&gt;的宽固定为&lt;code&gt;80dp&lt;/code&gt;，高和父容器一样，然后就是&lt;code&gt;inflate&lt;/code&gt;这个View并且添加到这个&lt;code&gt;LinearLayout&lt;/code&gt;中（我故意将这个布局文件的background设置一个颜色，这样可以很清晰的看出这个View占的位置）&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;LinearLayout layout = (LinearLayout)findViewById(R.id.container);
View view = View.inflate(this, R.layout.layout_menu_item, null);
layout.addView(view);
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;这样写的话，你就会发现布局文件&lt;code&gt;R.layout.layout_menu_item&lt;/code&gt;中的&lt;code&gt;android:layout_width=&amp;quot;80dp&amp;quot;&lt;/code&gt;不起作用！！也就是说&lt;code&gt;View.inflate&lt;/code&gt;方法忽略了布局文件的宽度设置&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://bxbxbai.github.io/img/inflate0.PNG&quot; alt=&quot;inflate&quot;&gt;&lt;/p&gt;
&lt;p&gt;可是你又可以发现&lt;code&gt;View.inflate&lt;/code&gt;方法中还有第三个参数&lt;code&gt;ViewGroup root&lt;/code&gt;，Android文档中是这么写的：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;A view group will be the parent. Used to properly inflate the layout_* parameters&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;那么可以猜想肯定和这个参数有关，下面改写代码：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;LinearLayout layout = (LinearLayout)findViewById(R.id.container);
View view = View.inflate(this, R.layout.layout_menu_item, layout);
layout.addView(view);
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;你就会发现这样写会崩溃！然后下面这样写就没问题了：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;LinearLayout layout = (LinearLayout)findViewById(R.id.container);
View view = View.inflate(this, R.layout.layout_menu_item, layout);
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;code&gt;View.inflate&lt;/code&gt;方法自动将生成的View添加到了这个&lt;code&gt;ViewGroup root&lt;/code&gt;中去了！！&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://bxbxbai.github.io/img/inflate1.PNG&quot; alt=&quot;inflate&quot;&gt;&lt;/p&gt;
&lt;p&gt;你可以&lt;code&gt;inflate&lt;/code&gt;多个View，就可以看到下面这样样子了：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://bxbxbai.github.io/img/inflate2.PNG&quot; alt=&quot;inflate&quot;&gt;&lt;/p&gt;
&lt;p&gt;##0x01 inflate详解&lt;br&gt;其实&lt;code&gt;View.inflate&lt;/code&gt;方法是调用了&lt;code&gt;LayoutInflater.from(context).inflate(resource, root, root != null)&lt;/code&gt;方法，而inflate方法的三个参数如下：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;resource： 布局文件的id，比如&lt;code&gt;R.layout.layout_menu_item&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;root：这是一个可选参数，resource布局文件中&lt;code&gt;layout_*&lt;/code&gt;参数设置的参照物就是这个root，也就是说&lt;code&gt;inflate&lt;/code&gt;方法会根据这个root的大小，将resource布局文件中&lt;code&gt;layout_*&lt;/code&gt;参数转换成一个&lt;code&gt;LayoutParam&lt;/code&gt;对象&lt;/li&gt;
&lt;li&gt;attachToRoot：是否将这个生成的View添加到这个root中去&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;code&gt;inflate&lt;/code&gt;方法会返回resource布局文件产生的View&lt;/p&gt;
&lt;p&gt;上面栗子中调用了&lt;code&gt;View.inflate(Context context, int resource, ViewGroup root)&lt;/code&gt;，这个方法本质上是调用了了&lt;code&gt;LayoutInflater.from(context).inflate(resource, root, root != null)&lt;/code&gt;，在这个&lt;code&gt;inflate&lt;/code&gt;方法中可以找到下面代码：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;// We are supposed to attach all the views we found (int temp)
// to root. Do that now.
if (root != null &amp;amp;&amp;amp; attachToRoot) {
    root.addView(temp, params);
}
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;可见&lt;code&gt;inflate&lt;/code&gt;方法自动将这个生成的&lt;code&gt;View&lt;/code&gt;添加到了这个&lt;code&gt;root&lt;/code&gt;中去了&lt;/p&gt;
&lt;p&gt;##0x02 实验&lt;/p&gt;
&lt;p&gt;因为可以调用&lt;code&gt;inflate&lt;/code&gt;方法的途径有很多，下面就来做实验总结一下：&lt;/p&gt;
&lt;p&gt;###实验0&lt;br&gt;布局文件&lt;code&gt;R.layout.layout_menu_item&lt;/code&gt; 中&lt;code&gt;android:layout_height=&amp;quot;match_parent&amp;quot;&lt;/code&gt; 改为&lt;code&gt;android:layout_height=&amp;quot;10dp&amp;quot;&lt;/code&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;LinearLayout layout = (LinearLayout)findViewById(R.id.container);
View v1 = LayoutInflater.from(this).inflate(R.layout.layout_menu_item, null);
layout.addView(v1);

// 结果: layout_height = match_parent layout_width = match_parent
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;img src=&quot;http://bxbxbai.github.io/img/inflate_expriment_0.PNG&quot; alt=&quot;inflate&quot;&gt;&lt;/p&gt;
&lt;p&gt;###实验1&lt;br&gt;布局文件&lt;code&gt;R.layout.layout_menu_item&lt;/code&gt; 中&lt;code&gt;android:layout_height=&amp;quot;match_parent&amp;quot;&lt;/code&gt; 改为&lt;code&gt;android:layout_height=&amp;quot;10dp&amp;quot;&lt;/code&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;LinearLayout layout = (LinearLayout)findViewById(R.id.container);
View v1 = LayoutInflater.from(this).inflate(R.layout.layout_menu_item, null);
layout.addView(v1, 200, 200);

// 结果: layout_height = 200 layout_width = 200
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;img src=&quot;http://bxbxbai.github.io/img/inflate_expriment_1.PNG&quot; alt=&quot;inflate&quot;&gt;&lt;/p&gt;
&lt;p&gt;###实验2&lt;br&gt;布局文件&lt;code&gt;R.layout.layout_menu_item&lt;/code&gt; 中&lt;code&gt;android:layout_height&lt;/code&gt;值改为&lt;code&gt;match_parent&lt;/code&gt; &lt;/p&gt;
&lt;pre&gt;&lt;code&gt;LinearLayout layout = (LinearLayout)findViewById(R.id.container);
View v1 = LayoutInflater.from(this).inflate(R.layout.layout_menu_item, layout, false);
layout.addView(v1);

// 结果: layout_height = match_parent layout_width = 80dp
// v1 = RelativeLayout 因为 attachRoot = false
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;img src=&quot;http://bxbxbai.github.io/img/inflate_expriment_2.PNG&quot; alt=&quot;inflate&quot;&gt;&lt;/p&gt;
&lt;p&gt;###实验3&lt;br&gt;布局文件&lt;code&gt;R.layout.layout_menu_item&lt;/code&gt; 中&lt;code&gt;android:layout_height&lt;/code&gt;值改为&lt;code&gt;match_parent&lt;/code&gt; &lt;/p&gt;
&lt;pre&gt;&lt;code&gt;LinearLayout layout = (LinearLayout)findViewById(R.id.container);
View v1 = LayoutInflater.from(this).inflate(R.layout.layout_menu_item, layout, true);
//layout.addView(v1);

// 结果: layout_height = match_parent layout_width = 80dp
// 不需要layout.addView, 因为设置attachRoot=true, 生成的View自动添加到root中去了
// v1 = root 因为 attachRoot = true
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;##0x03 源码分析&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;public View inflate(XmlPullParser parser, ViewGroup root, boolean attachToRoot) &amp;#123;&amp;#10;    synchronized (mConstructorArgs) &amp;#123;&amp;#10;        Trace.traceBegin(Trace.TRACE_TAG_VIEW, &amp;#34;inflate&amp;#34;);&amp;#10;&amp;#10;        final AttributeSet attrs = Xml.asAttributeSet(parser);&amp;#10;        Context lastContext = (Context)mConstructorArgs[0];&amp;#10;        mConstructorArgs[0] = mContext;&amp;#10;        View result = root;&amp;#10;&amp;#10;        try &amp;#123;&amp;#10;            // Look for the root node.&amp;#10;            int type;&amp;#10;            while ((type = parser.next()) != XmlPullParser.START_TAG &amp;#38;&amp;#38;&amp;#10;                    type != XmlPullParser.END_DOCUMENT) &amp;#123;&amp;#10;                // Empty&amp;#10;            &amp;#125;&amp;#10;&amp;#10;            if (type != XmlPullParser.START_TAG) &amp;#123;&amp;#10;                throw new InflateException(parser.getPositionDescription()&amp;#10;                        + &amp;#34;: No start tag found!&amp;#34;);&amp;#10;            &amp;#125;&amp;#10;&amp;#10;            final String name = parser.getName();&amp;#10;            &amp;#10;            if (DEBUG) &amp;#123;&amp;#10;                System.out.println(&amp;#34;**************************&amp;#34;);&amp;#10;                System.out.println(&amp;#34;Creating root view: &amp;#34;&amp;#10;                        + name);&amp;#10;                System.out.println(&amp;#34;**************************&amp;#34;);&amp;#10;            &amp;#125;&amp;#10;&amp;#10;            if (TAG_MERGE.equals(name)) &amp;#123;&amp;#10;                if (root == null || !attachToRoot) &amp;#123;&amp;#10;                    throw new InflateException(&amp;#34;&amp;#60;merge /&amp;#62; can be used only with a valid &amp;#34;&amp;#10;                            + &amp;#34;ViewGroup root and attachToRoot=true&amp;#34;);&amp;#10;                &amp;#125;&amp;#10;&amp;#10;                rInflate(parser, root, attrs, false);&amp;#10;            &amp;#125; else &amp;#123;&amp;#10;                // Temp is the root view that was found in the xml&amp;#10;                View temp;&amp;#10;                if (TAG_1995.equals(name)) &amp;#123;&amp;#10;                    temp = new BlinkLayout(mContext, attrs);&amp;#10;                &amp;#125; else &amp;#123;&amp;#10;                    temp = createViewFromTag(root, name, attrs);&amp;#10;                &amp;#125;&amp;#10;&amp;#10;                ViewGroup.LayoutParams params = null;&amp;#10;&amp;#10;                if (root != null) &amp;#123;&amp;#10;                    if (DEBUG) &amp;#123;&amp;#10;                        System.out.println(&amp;#34;Creating params from root: &amp;#34; +&amp;#10;                                root);&amp;#10;                    &amp;#125;&amp;#10;                    // Create layout params that match root, if supplied&amp;#10;                    params = root.generateLayoutParams(attrs);&amp;#10;                    if (!attachToRoot) &amp;#123;&amp;#10;                        // Set the layout params for temp if we are not&amp;#10;                        // attaching. (If we are, we use addView, below)&amp;#10;                        temp.setLayoutParams(params);&amp;#10;                    &amp;#125;&amp;#10;                &amp;#125;&amp;#10;&amp;#10;                if (DEBUG) &amp;#123;&amp;#10;                    System.out.println(&amp;#34;-----&amp;#62; start inflating children&amp;#34;);&amp;#10;                &amp;#125;&amp;#10;                // Inflate all children under temp&amp;#10;                rInflate(parser, temp, attrs, true);&amp;#10;                if (DEBUG) &amp;#123;&amp;#10;                    System.out.println(&amp;#34;-----&amp;#62; done inflating children&amp;#34;);&amp;#10;                &amp;#125;&amp;#10;&amp;#10;                // We are supposed to attach all the views we found (int temp)&amp;#10;                // to root. Do that now.&amp;#10;                if (root != null &amp;#38;&amp;#38; attachToRoot) &amp;#123;&amp;#10;                    root.addView(temp, params);&amp;#10;                &amp;#125;&amp;#10;&amp;#10;                // Decide whether to return the root that was passed in or the&amp;#10;                // top view found in xml.&amp;#10;                if (root == null || !attachToRoot) &amp;#123;&amp;#10;                    result = temp;&amp;#10;                &amp;#125;&amp;#10;            &amp;#125;&amp;#10;&amp;#10;        &amp;#125; catch (XmlPullParserException e) &amp;#123;&amp;#10;            InflateException ex = new InflateException(e.getMessage());&amp;#10;            ex.initCause(e);&amp;#10;            throw ex;&amp;#10;        &amp;#125; catch (IOException e) &amp;#123;&amp;#10;            InflateException ex = new InflateException(&amp;#10;                    parser.getPositionDescription()&amp;#10;                    + &amp;#34;: &amp;#34; + e.getMessage());&amp;#10;            ex.initCause(e);&amp;#10;            throw ex;&amp;#10;        &amp;#125; finally &amp;#123;&amp;#10;            // Don&amp;#39;t retain static reference on context.&amp;#10;            mConstructorArgs[0] = lastContext;&amp;#10;            mConstructorArgs[1] = null;&amp;#10;        &amp;#125;&amp;#10;&amp;#10;        Trace.traceEnd(Trace.TRACE_TAG_VIEW);&amp;#10;&amp;#10;        return result;&amp;#10;    &amp;#125;&amp;#10;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;实验3的原因在&lt;strong&gt;inflate详解&lt;/strong&gt;中已经介绍过了。&lt;/p&gt;
&lt;p&gt;总之原因就在上面代码&lt;code&gt;71-74&lt;/code&gt;行，布局文件&lt;code&gt;R.layout.layout_menu_item&lt;/code&gt;生成的View会因为&lt;code&gt;attachToRoot&lt;/code&gt;参数为&lt;code&gt;true&lt;/code&gt;，就将这个生成的&lt;code&gt;View&lt;/code&gt;添加到&lt;code&gt;root&lt;/code&gt;中去，然后&lt;code&gt;inflate&lt;/code&gt;方法会返回这个&lt;code&gt;root&lt;/code&gt;的&lt;code&gt;View&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;看上面代码&lt;code&gt;54-60&lt;/code&gt;行，如果root不为null的话，就会为这个布局文件&lt;code&gt;R.layout.layout_menu_item&lt;/code&gt;生成一个&lt;code&gt;LayoutParam&lt;/code&gt;对象，如果&lt;code&gt;attachToRoot&lt;/code&gt;参数为&lt;code&gt;false&lt;/code&gt;，那么就将这个&lt;code&gt;param&lt;/code&gt;对象给这个布局文件的View（看55行）。如果&lt;code&gt;attachToRoot&lt;/code&gt;参数为&lt;code&gt;true&lt;/code&gt;，那么就在上面代码第70行，将这个布局文件的&lt;code&gt;View&lt;/code&gt;和&lt;code&gt;param&lt;/code&gt;参数添加到&lt;code&gt;root&lt;/code&gt;中。&lt;/p&gt;
&lt;p&gt;##0x04 总结&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;p&gt;调用&lt;code&gt;LayoutInflater.inflate&lt;/code&gt;方法，并且将root参数设置为&lt;code&gt;null&lt;/code&gt;，就等于忽略了xml布局文件中的&lt;code&gt;layout_×&lt;/code&gt;参数&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;如果&lt;code&gt;root&lt;/code&gt;不为&lt;code&gt;null&lt;/code&gt;，并且&lt;code&gt;attachRoot=true&lt;/code&gt;，那么就会根据&lt;code&gt;root&lt;/code&gt;生成一个布局文&lt;code&gt;件View&lt;/code&gt;的&lt;code&gt;LayoutParam&lt;/code&gt;对象，并且将这个&lt;code&gt;View&lt;/code&gt;添加到&lt;code&gt;root&lt;/code&gt;中去，并且返回这个&lt;code&gt;root&lt;/code&gt;的&lt;code&gt;View&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;因此，最好还是使用这个代码吧：&lt;code&gt;View v1 = LayoutInflater.from(this).inflate(R.layout.layout_menu_item, layout, false);&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;##参考&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;p&gt;&lt;a href=&quot;http://stackoverflow.com/questions/5026926/making-sense-of-layoutinflater&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Making sense of LayoutInflater&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href=&quot;http://www.doubleencore.com/2013/05/layout-inflation-as-intended/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Layout Inflation as Intended&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;code&gt;LayoutInflater.inflate&lt;/code&gt;方法应该是Android程序员最常使用的方法之一了，但是如果使用不当，你会碰见很多的坑。。。今天我就碰到了一个，我找到了解决方法，也打算把它记下来。。。&lt;/p&gt;
&lt;p&gt;事情是这样的，我有一个&lt;code&gt;LineaLayout&lt;/code&gt;，然后在代码中会&lt;code&gt;inflate&lt;/code&gt;若干个&lt;code&gt;View&lt;/code&gt;添加到这个&lt;code&gt;LineaLayout&lt;/code&gt;中，但是坑出现了。。。&lt;/p&gt;
    
    </summary>
    
      <category term="技术" scheme="http://bxbxbai.gitcafe.io/categories/%E6%8A%80%E6%9C%AF/"/>
    
    
      <category term="Android" scheme="http://bxbxbai.gitcafe.io/tags/Android/"/>
    
      <category term="开发技巧" scheme="http://bxbxbai.gitcafe.io/tags/%E5%BC%80%E5%8F%91%E6%8A%80%E5%B7%A7/"/>
    
      <category term="经验" scheme="http://bxbxbai.gitcafe.io/tags/%E7%BB%8F%E9%AA%8C/"/>
    
  </entry>
  
  <entry>
    <title>正确使用Android性能分析工具——TraceView</title>
    <link href="http://bxbxbai.gitcafe.io/2014/10/25/use-trace-view/"/>
    <id>http://bxbxbai.gitcafe.io/2014/10/25/use-trace-view/</id>
    <published>2014-10-25T02:09:36.000Z</published>
    <updated>2016-03-12T06:59:52.000Z</updated>
    
    <content type="html">&lt;h2 id=&quot;前面唠叨&quot;&gt;&lt;a href=&quot;#前面唠叨&quot; class=&quot;headerlink&quot; title=&quot;前面唠叨&quot;&gt;&lt;/a&gt;前面唠叨&lt;/h2&gt;&lt;p&gt;最近公司app中有些列表在滑动的时候会有卡顿现象，我就开始着手解决这些问题，解决问题之前首先要分析列表滑动的性能瓶颈在什么地方。因为之前不会正确使用TraceView这个工具，主要是看不懂TraceView界面下方数据指标的值代表什么意思…以前我用&lt;a href=&quot;http://bxbxbai.github.io/2014/08/01/the-stopwatch-class/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;StopWatch&lt;/a&gt;类来分析性能，现在觉得弱爆了…不过有些地方&lt;a href=&quot;http://bxbxbai.github.io/2014/08/01/the-stopwatch-class/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;StopWatch&lt;/a&gt;工具类还是很简单好用的~&lt;/p&gt;
&lt;p&gt;网上可以找了很多博客来介绍这个工具的使用方法，很多都是讲解了一些一些就会的方法，讲一个大概，包括StackOverFlow上我也没有找到很好的讲解TraceView各个数据指标代码什么意思的回答&lt;/p&gt;
&lt;p&gt;因为我要解决列表滑动的卡顿问题，就必须要找到导致卡顿现象的原因，我就在StackOverFlow上找着别人零散的回答慢慢琢磨这个工具的使用方法。现在我学会了，至少能看懂每个指标什么意思，&lt;strong&gt;最后发现这个工具实在太强大了！！！&lt;/strong&gt;&lt;/p&gt;
&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;
&lt;h2 id=&quot;TraceView界面&quot;&gt;&lt;a href=&quot;#TraceView界面&quot; class=&quot;headerlink&quot; title=&quot;TraceView界面&quot;&gt;&lt;/a&gt;TraceView界面&lt;/h2&gt;&lt;p&gt;现来看一下整个界面的图，整个界面包括上下两部分，上面是你测试的进程中每个线程的执行情况，每个线程占一行；下面是每个方法执行的各个指标的值&lt;/p&gt;
&lt;p&gt;上面一部分是你测试进程的中每个线程运行的时间线，下图中可以可以看到，主要只有一个main线程在执行，因为我滑动了一下列表，main线程（UI线程）正在进行绘制View呢~~&lt;/p&gt;
&lt;p&gt;然后我点击了序号为133的一个方法&lt;code&gt;io.bxbxbai.android.examples.activity.ExpandableLayoutMainActivity$SimpleAdapter.getItemView&lt;/code&gt;，就会出现两部分数据：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Parents&lt;/li&gt;
&lt;li&gt;Children&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Parents表示调用133这个方法的父方法，可以看到序号为130。Children表示方法133调用的其他方法，可以看到有好几个方法。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://bxbxbai.github.io/img/trace_view.png&quot; alt=&quot;main&quot;&gt;&lt;/p&gt;
&lt;h2 id=&quot;如何使用TraceView&quot;&gt;&lt;a href=&quot;#如何使用TraceView&quot; class=&quot;headerlink&quot; title=&quot;如何使用TraceView&quot;&gt;&lt;/a&gt;如何使用TraceView&lt;/h2&gt;&lt;p&gt;因为这次我主要是分析列表滑动卡顿问题，我就讲讲我是怎么使用这个工具的，并且我是怎么分析的。&lt;/p&gt;
&lt;p&gt;使用TraceView主要有两种方式：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;p&gt;最简单的方式就是直接打开DDMS，选择一个进程，然后按上面的“Start Method Profiling”按钮，等红色小点变成黑色以后就表示TraceView已经开始工作了。然后我就可以滑动一下列表（现在手机上的操作肯定会很卡，因为Android系统在检测Dalvik虚拟机中每个Java方法的调用，这是我猜测的）。&lt;strong&gt;操作最好不要超过5s，因为最好是进行小范围的性能测试&lt;/strong&gt;。然后再按一下刚才按的按钮，等一会就会出现上面这幅图，然后就可以开始分析了。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;第2种方式就是使用&lt;code&gt;android.os.Debug.startMethodTracing();&lt;/code&gt;和&lt;code&gt;android.os.Debug.stopMethodTracing();&lt;/code&gt;方法，当运行了这段代码的时候，就会有一个trace文件在&lt;code&gt;/sdcard&lt;/code&gt;目录中生成，也可以调用&lt;code&gt;startMethodTracing(String traceName)&lt;/code&gt; 设置trace文件的文件名，最后你可以使用&lt;code&gt;adb pull /sdcard/test.trace /tmp&lt;/code&gt; 命令将trace文件复制到你的电脑中，然后用DDMS工具打开就会出现第一幅图了&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;第一种方式相对来说是一种简单，但是测试的范围很宽泛，第二中方式相对来说精确一点，不过我个人喜欢使用第一种，因为简单，而且它是检测你的某一个&lt;strong&gt;操作&lt;/strong&gt;。因为第二中更适合检测某一个方法的性能，其实也没有那种好，看使用的场景和喜好了。。。&lt;/p&gt;
&lt;h2 id=&quot;看懂TraceView中的指标&quot;&gt;&lt;a href=&quot;#看懂TraceView中的指标&quot; class=&quot;headerlink&quot; title=&quot;看懂TraceView中的指标&quot;&gt;&lt;/a&gt;看懂TraceView中的指标&lt;/h2&gt;&lt;p&gt;&lt;img src=&quot;http://bxbxbai.github.io/img/trace_view_metric.png&quot; alt=&quot;指标&quot;&gt;&lt;/p&gt;
&lt;p&gt;其实我今年7月份就已经开始使用TraceView工具了，但是当时不懂其中每个指标的含义，就没注意到它强大的地方。看不懂界面下方表格中的指标，这些数据其实一点意义都没有。&lt;/p&gt;
&lt;p&gt;网上包括Android官网也没有对TraceView工具的使用有详细的说明文档，这点确实比较蛋疼。&lt;/p&gt;
&lt;p&gt;###纵轴&lt;br&gt;TraceView界面下方表格中纵轴就是每个方法，包括了JDK的，Android SDK的，也有native方法的，当然最重要的就是app中你自己写的方法，有些Android系统的方法执行时间很长，那么有很大的可能就是你app中调用这些方法过多导致的。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;每个方法前面都有一个数字，可能是全部方法按照Incl CPU Time 时间的排序序号&lt;/strong&gt;（后面会讲到）&lt;/p&gt;
&lt;p&gt;点一个方法后可以看到有两部分，一个是Parents，另一个是Children。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Parent表示调用这个方法的方法，可以叫做父方法&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Children表示这个方法中调用的其他方法，可以叫做子方法&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;横轴&quot;&gt;&lt;a href=&quot;#横轴&quot; class=&quot;headerlink&quot; title=&quot;横轴&quot;&gt;&lt;/a&gt;横轴&lt;/h3&gt;&lt;p&gt;&lt;img src=&quot;http://bxbxbai.github.io/img/trace_view_incl_time.png&quot; alt=&quot;incl time&quot;&gt;&lt;/p&gt;
&lt;p&gt;横轴上是很多指标，这些指标表示什么意思真的困扰了我很长一段时间。。。&lt;/p&gt;
&lt;p&gt;能够很衡量一个方法性能的指标应该只有时间了吧？ 一个方法肯定就是执行时间越短约好咯~~&lt;/p&gt;
&lt;h4 id=&quot;1-Incl-Cpu-Time&quot;&gt;&lt;a href=&quot;#1-Incl-Cpu-Time&quot; class=&quot;headerlink&quot; title=&quot;1. Incl Cpu Time&quot;&gt;&lt;/a&gt;&lt;strong&gt;1. Incl Cpu Time&lt;/strong&gt;&lt;/h4&gt;&lt;p&gt;define &lt;strong&gt;inclusive&lt;/strong&gt; ： 全包括的&lt;/p&gt;
&lt;p&gt;上图中可以看到&lt;code&gt;0（toplevel）&lt;/code&gt; 的Incl Cpu Time 占了100%的时间，这个不是说100%的时间都是它在执行，请看下面代码：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;public void top() {
    a();
    b();
    c();
    d();
}
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Incl Cpu Time表示方法top执行的总时间，假如说方法top的执行时间为10ms，方法a执行了1ms，方法b执行了2ms，方法c执行了3ms，方法d执行了4ms（这里是为了举个栗子，实际情况中方法a、b、c、d的执行总时间肯定比方法top的执行总时间要小一点）。&lt;/p&gt;
&lt;p&gt;而且调用方法top的方法的执行时间是100ms，那么：&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;&lt;/th&gt;
&lt;th&gt;&lt;/th&gt;
&lt;th&gt;Incl Cpu Time&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;top&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;10%&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;a&lt;/td&gt;
&lt;td&gt;10%&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;b&lt;/td&gt;
&lt;td&gt;20%&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;c&lt;/td&gt;
&lt;td&gt;30%&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;d&lt;/td&gt;
&lt;td&gt;40%&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;从上面图中可以看到：&lt;br&gt;&lt;code&gt;toplevel&lt;/code&gt;的 Incl Cpu Time 是1110.943，而&lt;code&gt;io.bxbxbai.android.examples.activity.ExpandableLayoutMainActivity$SimpleAdapter.getItemView&lt;/code&gt;方法的Incl Cpu Time为12.859，说明后者的Incl Cpu Time % 约为1.2%&lt;/p&gt;
&lt;p&gt;这个指标表示 &lt;span style=&quot;color:red&quot;&gt; &lt;strong&gt;这个方法以及这个方法的子方法（比如top方法中的a、b、c、d方法）一共执行的时间&lt;/strong&gt;&lt;/span&gt;&lt;/p&gt;
&lt;h4 id=&quot;2-Excl-Cpu-Time&quot;&gt;&lt;a href=&quot;#2-Excl-Cpu-Time&quot; class=&quot;headerlink&quot; title=&quot;2. Excl Cpu Time&quot;&gt;&lt;/a&gt;&lt;strong&gt;2. Excl Cpu Time&lt;/strong&gt;&lt;/h4&gt;&lt;p&gt;理解了Incl Cpu Time以后就可以很好理解Excl Cpu Time了，还是上面top方法的栗子：&lt;/p&gt;
&lt;p&gt;方法top 的 Incl Cpu Time 减去 方法a、b、c、d的Incl Cpu Time 的时间就是方法top的Excl Cpu Time 了&lt;/p&gt;
&lt;h4 id=&quot;3-Incl-Real-Time&quot;&gt;&lt;a href=&quot;#3-Incl-Real-Time&quot; class=&quot;headerlink&quot; title=&quot;3. Incl Real Time&quot;&gt;&lt;/a&gt;&lt;strong&gt;3. Incl Real Time&lt;/strong&gt;&lt;/h4&gt;&lt;p&gt;这个感觉和Incl Cpu Time 差不多，第7条会讲到。&lt;/p&gt;
&lt;h4 id=&quot;4-Excl-Real-Time&quot;&gt;&lt;a href=&quot;#4-Excl-Real-Time&quot; class=&quot;headerlink&quot; title=&quot;4. Excl Real Time&quot;&gt;&lt;/a&gt;&lt;strong&gt;4. Excl Real Time&lt;/strong&gt;&lt;/h4&gt;&lt;p&gt;同上&lt;/p&gt;
&lt;h4 id=&quot;5-Calls-Recur-Calls-Total&quot;&gt;&lt;a href=&quot;#5-Calls-Recur-Calls-Total&quot; class=&quot;headerlink&quot; title=&quot;5. Calls + Recur Calls / Total &quot;&gt;&lt;/a&gt;&lt;strong&gt;5. Calls + Recur Calls / Total &lt;/strong&gt;&lt;/h4&gt;&lt;p&gt;这个指标非常重要！&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;它表示这个方法执行的次数&lt;/strong&gt;，这个指标中有两个值，一个Call表示这个方法调用的次数，Recur Call表示递归调用次数，看下图：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://bxbxbai.github.io/img/trace_view_recur_call.png&quot; alt=&quot;Recur&quot;&gt;&lt;/p&gt;
&lt;p&gt;我选中了一个方法，可以看到这个方法的&lt;code&gt;Calls + Recur Calls&lt;/code&gt; 值是14 + 0，表示这个方法调用了14次，但是没有递归调用&lt;/p&gt;
&lt;p&gt;从Children这一块来看，很多方法调用都是13的倍数，说明父方法中有一个判断，但是这不是重点，有些Child方法调用Calls为26，这说明了这些方法被调用了两遍，是不是可能存在重复调用的情况？这些都是可能可以优化性能的地方。&lt;/p&gt;
&lt;h4 id=&quot;6-Cpu-Time-Call&quot;&gt;&lt;a href=&quot;#6-Cpu-Time-Call&quot; class=&quot;headerlink&quot; title=&quot; 6. Cpu Time / Call &quot;&gt;&lt;/a&gt;&lt;span style=&quot;color:red&quot;&gt; &lt;strong&gt;6. Cpu Time / Call &lt;/strong&gt;&lt;/span&gt;&lt;/h4&gt;&lt;p&gt;&lt;strong&gt;重点来了！！！！！！！！！！&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://bxbxbai.github.io/img/trace_view_cpu_time.png&quot; alt=&quot;cpu time&quot;&gt;&lt;/p&gt;
&lt;p&gt;这个指标应该说是最重要的，从上图可以看到，133这个方法的调用次数为20次，而它的Incl Cpu Time为12.859ms，那么133方法每一次执行的时间是0.643ms（&lt;strong&gt;133这个方法是&lt;code&gt;SimpleAdapter&lt;/code&gt;的&lt;code&gt;getItemView&lt;/code&gt;方法&lt;/strong&gt;）&lt;/p&gt;
&lt;p&gt;对于一个&lt;code&gt;adapter&lt;/code&gt;的&lt;code&gt;getView&lt;/code&gt;方法来说0.643ms是非常快的（因为这个&lt;code&gt;adapter&lt;/code&gt;中只有一个&lt;code&gt;TextView&lt;/code&gt;，我为了测试用的）&lt;/p&gt;
&lt;p&gt;如果&lt;code&gt;getView&lt;/code&gt;方法执行时间很长，那么必然导致列表滑动的时候产生卡顿现象，可以在&lt;code&gt;getView&lt;/code&gt;方法的Children方法列表中找到耗时最长的方法，分析出现问题的原因：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;是因为有过多的计算？&lt;/li&gt;
&lt;li&gt;还是因为有读取SD卡的操作？&lt;/li&gt;
&lt;li&gt;还是因为&lt;code&gt;adapter&lt;/code&gt;中&lt;code&gt;View&lt;/code&gt;太复杂了？&lt;/li&gt;
&lt;li&gt;还是因为需要有很多判断，设置&lt;code&gt;View&lt;/code&gt;的显示还是隐藏&lt;/li&gt;
&lt;li&gt;还是因为其他原因…&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&quot;7-Real-Time-Call&quot;&gt;&lt;a href=&quot;#7-Real-Time-Call&quot; class=&quot;headerlink&quot; title=&quot;7. Real Time / Call &quot;&gt;&lt;/a&gt;&lt;strong&gt;7. Real Time / Call &lt;/strong&gt;&lt;/h4&gt;&lt;p&gt;Real Time 和 Cpu Time 我现在还不太明白它们的区别，我的理解应该是:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Cpu Time 应该是某个方法占用CPU的时间&lt;/li&gt;
&lt;li&gt;Real Time 应该是这个方法的实际运行时间&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;为什么它们会有区别呢？可能是因为CPU的上下文切换、阻塞、GC等原因方法的实际执行时间要比Cpu Time 要稍微长一点。&lt;/strong&gt;&lt;/p&gt;
&lt;h2 id=&quot;总结&quot;&gt;&lt;a href=&quot;#总结&quot; class=&quot;headerlink&quot; title=&quot;总结&quot;&gt;&lt;/a&gt;总结&lt;/h2&gt;&lt;p&gt;TraceView是一个非常强大的性能分析工具，因为Android 官网对这个工具的使用介绍文档很少，而且一些中文博客中写的也都是抄来抄去，没有讲到底怎么使用。&lt;/p&gt;
&lt;p&gt;最近我在做这方面的性能分析，就慢慢琢磨了这么工具的使用，发现非常强大，写下来总结一下。    &lt;/p&gt;
&lt;p&gt;Android的性能分析工具还有很多，比如：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Eclipse Memory Analyzer Tool 来分析Android app的内存使用&lt;/li&gt;
&lt;li&gt;Dump UI Hierarchy for UI Atomator，分析UI层级&lt;/li&gt;
&lt;li&gt;systrace&lt;/li&gt;
&lt;li&gt;其他&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;下图这一条工具栏中有很多性能分析工具~~~&lt;br&gt;&lt;img src=&quot;http://bxbxbai.github.io/img/ddms_tools.png&quot; alt=&quot;TOOLS&quot;&gt;&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;前面唠叨&quot;&gt;&lt;a href=&quot;#前面唠叨&quot; class=&quot;headerlink&quot; title=&quot;前面唠叨&quot;&gt;&lt;/a&gt;前面唠叨&lt;/h2&gt;&lt;p&gt;最近公司app中有些列表在滑动的时候会有卡顿现象，我就开始着手解决这些问题，解决问题之前首先要分析列表滑动的性能瓶颈在什么地方。因为之前不会正确使用TraceView这个工具，主要是看不懂TraceView界面下方数据指标的值代表什么意思…以前我用&lt;a href=&quot;http://bxbxbai.github.io/2014/08/01/the-stopwatch-class/&quot;&gt;StopWatch&lt;/a&gt;类来分析性能，现在觉得弱爆了…不过有些地方&lt;a href=&quot;http://bxbxbai.github.io/2014/08/01/the-stopwatch-class/&quot;&gt;StopWatch&lt;/a&gt;工具类还是很简单好用的~&lt;/p&gt;
&lt;p&gt;网上可以找了很多博客来介绍这个工具的使用方法，很多都是讲解了一些一些就会的方法，讲一个大概，包括StackOverFlow上我也没有找到很好的讲解TraceView各个数据指标代码什么意思的回答&lt;/p&gt;
&lt;p&gt;因为我要解决列表滑动的卡顿问题，就必须要找到导致卡顿现象的原因，我就在StackOverFlow上找着别人零散的回答慢慢琢磨这个工具的使用方法。现在我学会了，至少能看懂每个指标什么意思，&lt;strong&gt;最后发现这个工具实在太强大了！！！&lt;/strong&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="技术" scheme="http://bxbxbai.gitcafe.io/categories/%E6%8A%80%E6%9C%AF/"/>
    
    
      <category term="Android" scheme="http://bxbxbai.gitcafe.io/tags/Android/"/>
    
      <category term="开发技巧" scheme="http://bxbxbai.gitcafe.io/tags/%E5%BC%80%E5%8F%91%E6%8A%80%E5%B7%A7/"/>
    
      <category term="经验" scheme="http://bxbxbai.gitcafe.io/tags/%E7%BB%8F%E9%AA%8C/"/>
    
  </entry>
  
  <entry>
    <title>整理一些比较好的Android开发教程</title>
    <link href="http://bxbxbai.gitcafe.io/2014/10/07/android-develop-resource/"/>
    <id>http://bxbxbai.gitcafe.io/2014/10/07/android-develop-resource/</id>
    <published>2014-10-07T15:08:32.000Z</published>
    <updated>2015-12-23T07:30:07.000Z</updated>
    
    <content type="html">&lt;p&gt;这些都是我在学习Android开发过程中觉得比较好的教程和博客，在这里整理一下，方便自己也方便大家学习使用。&lt;/p&gt;
&lt;p&gt;欢迎补充~&lt;/p&gt;
&lt;p&gt;##介绍LoaderManager的使用&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;p&gt;Life before Loaders(part 1)&lt;br&gt;&lt;a href=&quot;http://www.androiddesignpatterns.com/2012/07/loaders-and-loadermanager-background.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;http://www.androiddesignpatterns.com/2012/07/loaders-and-loadermanager-background.html&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Understanding the LoaderManager(part 2)&lt;br&gt;&lt;a href=&quot;http://www.androiddesignpatterns.com/2012/07/understanding-loadermanager.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;http://www.androiddesignpatterns.com/2012/07/understanding-loadermanager.html&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Implementing Loaders(part 3)&lt;br&gt;&lt;a href=&quot;http://www.androiddesignpatterns.com/2012/08/implementing-loaders.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;http://www.androiddesignpatterns.com/2012/08/implementing-loaders.html&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Tutorial: AppListLoader(part 4)&lt;br&gt;&lt;a href=&quot;http://www.androiddesignpatterns.com/2012/09/tutorial-loader-loadermanager.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;http://www.androiddesignpatterns.com/2012/09/tutorial-loader-loadermanager.html&lt;/a&gt;&lt;br&gt;&lt;a href=&quot;https://github.com/alexjlockwood/AppListLoader&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;https://github.com/alexjlockwood/AppListLoader&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;How to use Loaders in Android&lt;br&gt;&lt;a href=&quot;http://www.grokkingandroid.com/using-loaders-in-android/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;http://www.grokkingandroid.com/using-loaders-in-android/&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;
&lt;h2 id=&quot;介绍Volley的使用&quot;&gt;&lt;a href=&quot;#介绍Volley的使用&quot; class=&quot;headerlink&quot; title=&quot;介绍Volley的使用&quot;&gt;&lt;/a&gt;介绍Volley的使用&lt;/h2&gt;&lt;ol&gt;
&lt;li&gt;&lt;p&gt;Android库Volley的使用介绍&lt;br&gt;&lt;a href=&quot;http://bxbxbai.github.io/2014/09/14/android-working-with-volley/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;http://bxbxbai.github.io/2014/09/14/android-working-with-volley/&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Android Volley完全解析（博主是Android牛人，博客质量很高！）&lt;br&gt;&lt;a href=&quot;http://blog.csdn.net/guolin_blog/article/details/17482095&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;http://blog.csdn.net/guolin_blog/article/details/17482095&lt;/a&gt; （Android Volley完全解析(一)，初识Volley的基本用法）&lt;br&gt;&lt;a href=&quot;http://blog.csdn.net/guolin_blog/article/details/17482165&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;http://blog.csdn.net/guolin_blog/article/details/17482165&lt;/a&gt;&lt;br&gt;&lt;a href=&quot;http://blog.csdn.net/guolin_blog/article/details/17612763&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;http://blog.csdn.net/guolin_blog/article/details/17612763&lt;/a&gt;&lt;br&gt;&lt;a href=&quot;http://blog.csdn.net/guolin_blog/article/details/17656437&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;http://blog.csdn.net/guolin_blog/article/details/17656437&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Android 官方的Volley使用介绍（看完基本就知道怎么用了）&lt;br&gt;3.1 Transmitting Network Data using Volley&lt;br&gt;&lt;a href=&quot;http://developer.android.com/training/volley/index.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;http://developer.android.com/training/volley/index.html&lt;/a&gt;&lt;br&gt;3.2 Sending a Simple Request（发送一个简单的request）&lt;br&gt;&lt;a href=&quot;http://developer.android.com/training/volley/simple.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;http://developer.android.com/training/volley/simple.html&lt;/a&gt;&lt;br&gt;3.3 Setting up a RequestQueue（创建一个请求队列）&lt;br&gt;&lt;a href=&quot;http://developer.android.com/training/volley/requestqueue.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;http://developer.android.com/training/volley/requestqueue.html&lt;/a&gt;&lt;br&gt;3.4 Making a Standard Request（使用volley自带的request类）&lt;br&gt;&lt;a href=&quot;http://developer.android.com/training/volley/request.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;http://developer.android.com/training/volley/request.html&lt;/a&gt;&lt;br&gt;3.5 Implementing a Custom Request(创建你自己的request类这里的栗子就是创建一个GsonRequest)&lt;br&gt;&lt;a href=&quot;http://developer.android.com/training/volley/request-custom.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;http://developer.android.com/training/volley/request-custom.html&lt;/a&gt;&lt;br&gt;3.6 Google I/O 2013，Volley：Fast, Networking in Android(Google IO大会上的演讲，自备梯子)&lt;br&gt;&lt;a href=&quot;https://www.youtube.com/watch?v=yhv8l9F44qo&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;https://www.youtube.com/watch?v=yhv8l9F44qo&lt;/a&gt;&lt;br&gt;3.7 使用Volley的一个demo 工程&lt;br&gt;&lt;a href=&quot;https://github.com/bxbxbai/FeedListViewDemo&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;https://github.com/bxbxbai/FeedListViewDemo&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&quot;Android开发实例&quot;&gt;&lt;a href=&quot;#Android开发实例&quot; class=&quot;headerlink&quot; title=&quot;Android开发实例&quot;&gt;&lt;/a&gt;Android开发实例&lt;/h2&gt;&lt;ol&gt;
&lt;li&gt;&lt;p&gt;Android Working with ActionBar（讲解Actionbar的使用）&lt;br&gt;&lt;a href=&quot;http://www.androidhive.info/2013/11/android-working-with-action-bar/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;http://www.androidhive.info/2013/11/android-working-with-action-bar/&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;创建一个类似Hello SMS的菜单&lt;br&gt;&lt;a href=&quot;http://blog.robinchutaux.com/blog/how-to-create-a-menu-like-hello-sms/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;http://blog.robinchutaux.com/blog/how-to-create-a-menu-like-hello-sms/&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;一个开源的知乎专栏App&lt;br&gt;&lt;a href=&quot;https://github.com/bxbxbai/ZhuanLan&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;https://github.com/bxbxbai/ZhuanLan&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&quot;Android-开源项目集合&quot;&gt;&lt;a href=&quot;#Android-开源项目集合&quot; class=&quot;headerlink&quot; title=&quot;Android 开源项目集合&quot;&gt;&lt;/a&gt;Android 开源项目集合&lt;/h2&gt;&lt;ol&gt;
&lt;li&gt;最流行的Android组件大全（包括工具和教程，UI组件，类库，游戏引擎和H5应用）&lt;br&gt;&lt;a href=&quot;http://colobu.com/2014/08/15/android-components-collection/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;http://colobu.com/2014/08/15/android-components-collection/&lt;/a&gt;&lt;br&gt;&lt;a href=&quot;http://blog.daimajia.com/android-library-collection/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;http://blog.daimajia.com/android-library-collection/&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&quot;Android-应用性能优化（包含Android-官方文档）&quot;&gt;&lt;a href=&quot;#Android-应用性能优化（包含Android-官方文档）&quot; class=&quot;headerlink&quot; title=&quot;Android 应用性能优化（包含Android 官方文档）&quot;&gt;&lt;/a&gt;Android 应用性能优化（包含Android 官方文档）&lt;/h2&gt;&lt;ol&gt;
&lt;li&gt;&lt;p&gt;Managing Your App’s Memory&lt;br&gt;&lt;a href=&quot;http://developer.android.com/training/articles/memory.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;http://developer.android.com/training/articles/memory.html&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Performance Tips&lt;br&gt;&lt;a href=&quot;http://developer.android.com/training/articles/perf-tips.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;http://developer.android.com/training/articles/perf-tips.html&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Improving Layout Performance&lt;br&gt;&lt;a href=&quot;http://developer.android.com/training/improving-layouts/index.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;http://developer.android.com/training/improving-layouts/index.html&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Sending Operations to Multiple Threads&lt;br&gt;&lt;a href=&quot;http://developer.android.com/training/multiple-threads/index.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;http://developer.android.com/training/multiple-threads/index.html&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Performance Tuning On Android(作者详细介绍了各种分析Android性能的方法以及优化策略，非常好的一篇博客)&lt;br&gt;&lt;a href=&quot;http://blog.venmo.com/hf2t3h4x98p5e13z82pl8j66ngcmry/performance-tuning-on-android&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;http://blog.venmo.com/hf2t3h4x98p5e13z82pl8j66ngcmry/performance-tuning-on-android&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Using Android TraceView&lt;br&gt;&lt;a href=&quot;http://blog.cindypotvin.com/using-android-traceview-in-eclipse/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;http://blog.cindypotvin.com/using-android-traceview-in-eclipse/&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;分析你的App内存使用情况&lt;br&gt;&lt;a href=&quot;https://developer.android.com/tools/debugging/debugging-memory.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;https://developer.android.com/tools/debugging/debugging-memory.html&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Android Performance Case Study&lt;br&gt;&lt;a href=&quot;http://www.curious-creature.org/2012/12/01/android-performance-case-study/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;http://www.curious-creature.org/2012/12/01/android-performance-case-study/&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&quot;Android-ContentProvider介绍&quot;&gt;&lt;a href=&quot;#Android-ContentProvider介绍&quot; class=&quot;headerlink&quot; title=&quot;Android ContentProvider介绍&quot;&gt;&lt;/a&gt;Android ContentProvider介绍&lt;/h2&gt;&lt;ol&gt;
&lt;li&gt;&lt;p&gt;Content Provider Basics&lt;br&gt;&lt;a href=&quot;http://www.grokkingandroid.com/android-tutorial-content-provider-basics/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;http://www.grokkingandroid.com/android-tutorial-content-provider-basics/&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Using Content Providers&lt;br&gt;&lt;a href=&quot;http://www.grokkingandroid.com/android-tutorial-using-content-providers/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;http://www.grokkingandroid.com/android-tutorial-using-content-providers/&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Writing your own Content Provider&lt;br&gt;&lt;a href=&quot;http://www.grokkingandroid.com/android-tutorial-writing-your-own-content-provider/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;http://www.grokkingandroid.com/android-tutorial-writing-your-own-content-provider/&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Better Performance with ContentProviderOperation&lt;br&gt;&lt;a href=&quot;http://www.grokkingandroid.com/better-performance-with-contentprovideroperation/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;http://www.grokkingandroid.com/better-performance-with-contentprovideroperation/&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&quot;Android-开发经验&quot;&gt;&lt;a href=&quot;#Android-开发经验&quot; class=&quot;headerlink&quot; title=&quot;Android 开发经验&quot;&gt;&lt;/a&gt;Android 开发经验&lt;/h2&gt;&lt;p&gt;CodePath Android:  &lt;a href=&quot;http://guides.codepath.com/android&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;http://guides.codepath.com/android&lt;/a&gt;&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;p&gt;Working with the TextView&lt;br&gt;&lt;a href=&quot;http://guides.codepath.com/android/Working-with-the-TextView&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;http://guides.codepath.com/android/Working-with-the-TextView&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Working with the ImageView&lt;br&gt;&lt;a href=&quot;http://guides.codepath.com/android/Working-with-the-ImageView&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;http://guides.codepath.com/android/Working-with-the-ImageView&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Endless Scrolling with AdapterViews（可以无限加载更多的AdapterView，很巧妙的继承了OnScrollListener）&lt;br&gt;&lt;a href=&quot;http://guides.codepath.com/android/Endless-Scrolling-with-AdapterViews&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;http://guides.codepath.com/android/Endless-Scrolling-with-AdapterViews&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Android事件传递机制（有栗子，有分析）&lt;br&gt;&lt;a href=&quot;http://www.infoq.com/cn/articles/android-event-delivery-mechanism&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;http://www.infoq.com/cn/articles/android-event-delivery-mechanism&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Android Tips Round-Up, Part 5（Android开发技巧）&lt;br&gt;&lt;a href=&quot;http://blog.danlew.net/2014/05/28/android-tips-round-up-part-5/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;http://blog.danlew.net/2014/05/28/android-tips-round-up-part-5/&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Activity和Fragment的生命周期图&lt;br&gt;&lt;a href=&quot;http://bxbxbai.github.io/img/complete_android_fragment_lifecycle.png&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;http://bxbxbai.github.io/img/complete_android_fragment_lifecycle.png&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;使用GestureDetector（ListView中左右滑动显示菜单也是使用GestureDetector）&lt;br&gt;&lt;a href=&quot;http://ryanharter.com/blog/2014/10/08/using-gestures/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;http://ryanharter.com/blog/2014/10/08/using-gestures/&lt;/a&gt; （博文中有图片方法缩小的栗子，可能需要梯子）&lt;br&gt;&lt;a href=&quot;https://github.com/rharter/android-gesture-detectors&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;https://github.com/rharter/android-gesture-detectors&lt;/a&gt; （github上使用GestureDetector的一个项目）&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&quot;Android开发在线工具&quot;&gt;&lt;a href=&quot;#Android开发在线工具&quot; class=&quot;headerlink&quot; title=&quot;Android开发在线工具&quot;&gt;&lt;/a&gt;Android开发在线工具&lt;/h2&gt;&lt;ol&gt;
&lt;li&gt;&lt;p&gt;在线创建Holo主题（Android Holo Colors Generator）&lt;br&gt;&lt;a href=&quot;http://android-holo-colors.com/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;http://android-holo-colors.com/&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;在线创建ActionBar样式（Android Action Bar Style Generator）&lt;br&gt;&lt;a href=&quot;http://jgilfelt.github.io/android-actionbarstylegenerator/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;http://jgilfelt.github.io/android-actionbarstylegenerator/&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;在线创建Button样式（Android Button Maker）&lt;br&gt;&lt;a href=&quot;http://angrytools.com/android/button/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;http://angrytools.com/android/button/&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;SQLite数据加密&lt;br&gt;&lt;a href=&quot;https://www.zetetic.net/sqlcipher/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;https://www.zetetic.net/sqlcipher/&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;在线创建Icon资源（包括：Launch Icon，Actionbar和tab icon，Notification Icon等等）&lt;br&gt;&lt;a href=&quot;http://romannurik.github.io/AndroidAssetStudio/index.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;http://romannurik.github.io/AndroidAssetStudio/index.html&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Device Frame Generator&lt;br&gt;&lt;a href=&quot;http://f2prateek.com/android-device-frame-generator/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;http://f2prateek.com/android-device-frame-generator/&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Android Simple Nine-patch Generator&lt;br&gt;&lt;a href=&quot;http://romannurik.github.io/AndroidAssetStudio/nine-patches.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;http://romannurik.github.io/AndroidAssetStudio/nine-patches.html&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;AndroidDrawableFactory&lt;br&gt;&lt;a href=&quot;https://github.com/tizionario/AndroidDrawableFactory&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;https://github.com/tizionario/AndroidDrawableFactory&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Android Layout Resource Binder(根据xml布局文件，生成findViewById 的Java代码)&lt;br&gt;&lt;a href=&quot;http://android.lineten.net/layout.php&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;http://android.lineten.net/layout.php&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Android Fragment Code Generator&lt;br&gt;&lt;a href=&quot;http://techisfun.github.io/pages/android-fragment-generator/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;http://techisfun.github.io/pages/android-fragment-generator/&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Android ContentProvider Generator&lt;br&gt;&lt;a href=&quot;https://github.com/BoD/android-contentprovider-generator&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;https://github.com/BoD/android-contentprovider-generator&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;SelectorChapek for Android（快速生成Select文件）&lt;br&gt;&lt;a href=&quot;https://github.com/inmite/android-selector-chapek&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;https://github.com/inmite/android-selector-chapek&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Android开发工具整理&lt;br&gt;&lt;a href=&quot;https://github.com/inferjay/AndroidDevTools&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;https://github.com/inferjay/AndroidDevTools&lt;/a&gt;&lt;br&gt;&lt;a href=&quot;http://www.androiddevtools.cn/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;http://www.androiddevtools.cn/&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&quot;Android-Design&quot;&gt;&lt;a href=&quot;#Android-Design&quot; class=&quot;headerlink&quot; title=&quot;Android Design&quot;&gt;&lt;/a&gt;Android Design&lt;/h2&gt;&lt;ol&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;台湾人翻译的Material Design文档（非常好！）&lt;/strong&gt;&lt;br&gt;&lt;a href=&quot;http://wcc723.gitbooks.io/google_design_translate/content/material-design-introduction.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;http://wcc723.gitbooks.io/google_design_translate/content/material-design-introduction.html&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Android Design 非官方文档（中文翻译）&lt;br&gt;&lt;a href=&quot;http://adchs.github.io/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;http://adchs.github.io/&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Google 开源的Material Design Icons&lt;br&gt;&lt;a href=&quot;http://google.github.io/material-design-icons/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;http://google.github.io/material-design-icons/&lt;/a&gt;&lt;br&gt;&lt;a href=&quot;https://github.com/google/material-design-icons&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;https://github.com/google/material-design-icons&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Android Desgin规范&lt;br&gt;&lt;a href=&quot;http://www.androiddesign.tips/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;http://www.androiddesign.tips/&lt;/a&gt;&lt;br&gt;&lt;a href=&quot;http://petrnohejl.github.io/Android-Cheatsheet-For-Graphic-Designers/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;http://petrnohejl.github.io/Android-Cheatsheet-For-Graphic-Designers/&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Material Design Center:&lt;br&gt;&lt;a href=&quot;https://github.com/lightSky/MaterialDesignCenter&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;https://github.com/lightSky/MaterialDesignCenter&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&quot;很不错的Android开源库&quot;&gt;&lt;a href=&quot;#很不错的Android开源库&quot; class=&quot;headerlink&quot; title=&quot;很不错的Android开源库&quot;&gt;&lt;/a&gt;很不错的Android开源库&lt;/h2&gt;&lt;ol&gt;
&lt;li&gt;&lt;p&gt;第一必须是Volley，上面已经列出链接了&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Android Asynchronous Http Client（又是一个异步http通信库，也是非常简单好用）&lt;br&gt;&lt;a href=&quot;http://loopj.com/android-async-http/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;http://loopj.com/android-async-http/&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Butter Knife（你再也不需要老是调用findViewById了！！！功能超级强大！！）&lt;br&gt;&lt;a href=&quot;http://jakewharton.github.io/butterknife/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;http://jakewharton.github.io/butterknife/&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Android Smart Image View（可以从Url或者联系人地址簿中加载图片，图片会自动缓存到内存和SD卡上）&lt;br&gt;&lt;a href=&quot;http://loopj.com/android-smart-image-view/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;http://loopj.com/android-smart-image-view/&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Square公司的Android开源项目&lt;br&gt;&lt;a href=&quot;http://square.github.io/#android&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;http://square.github.io/#android&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;ActiveAndroid项目（SQLite数据的ORM框架）&lt;br&gt;&lt;a href=&quot;https://github.com/pardom/ActiveAndroid/wiki/Getting-started&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;https://github.com/pardom/ActiveAndroid/wiki/Getting-started&lt;/a&gt;&lt;br&gt;&lt;a href=&quot;https://github.com/pardom/ActiveAndroid&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;https://github.com/pardom/ActiveAndroid&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;这些都是我在学习Android开发过程中觉得比较好的教程和博客，在这里整理一下，方便自己也方便大家学习使用。&lt;/p&gt;
&lt;p&gt;欢迎补充~&lt;/p&gt;
&lt;p&gt;##介绍LoaderManager的使用&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;p&gt;Life before Loaders(part 1)&lt;br&gt;&lt;a href=&quot;http://www.androiddesignpatterns.com/2012/07/loaders-and-loadermanager-background.html&quot;&gt;http://www.androiddesignpatterns.com/2012/07/loaders-and-loadermanager-background.html&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Understanding the LoaderManager(part 2)&lt;br&gt;&lt;a href=&quot;http://www.androiddesignpatterns.com/2012/07/understanding-loadermanager.html&quot;&gt;http://www.androiddesignpatterns.com/2012/07/understanding-loadermanager.html&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Implementing Loaders(part 3)&lt;br&gt;&lt;a href=&quot;http://www.androiddesignpatterns.com/2012/08/implementing-loaders.html&quot;&gt;http://www.androiddesignpatterns.com/2012/08/implementing-loaders.html&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Tutorial: AppListLoader(part 4)&lt;br&gt;&lt;a href=&quot;http://www.androiddesignpatterns.com/2012/09/tutorial-loader-loadermanager.html&quot;&gt;http://www.androiddesignpatterns.com/2012/09/tutorial-loader-loadermanager.html&lt;/a&gt;&lt;br&gt;&lt;a href=&quot;https://github.com/alexjlockwood/AppListLoader&quot;&gt;https://github.com/alexjlockwood/AppListLoader&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;How to use Loaders in Android&lt;br&gt;&lt;a href=&quot;http://www.grokkingandroid.com/using-loaders-in-android/&quot;&gt;http://www.grokkingandroid.com/using-loaders-in-android/&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
    
    </summary>
    
      <category term="技术" scheme="http://bxbxbai.gitcafe.io/categories/%E6%8A%80%E6%9C%AF/"/>
    
    
      <category term="Android" scheme="http://bxbxbai.gitcafe.io/tags/Android/"/>
    
      <category term="开发资源" scheme="http://bxbxbai.gitcafe.io/tags/%E5%BC%80%E5%8F%91%E8%B5%84%E6%BA%90/"/>
    
  </entry>
  
  <entry>
    <title>Android库Volley的使用介绍</title>
    <link href="http://bxbxbai.gitcafe.io/2014/09/14/android-working-with-volley/"/>
    <id>http://bxbxbai.gitcafe.io/2014/09/14/android-working-with-volley/</id>
    <published>2014-09-14T06:48:39.000Z</published>
    <updated>2016-03-12T07:01:26.000Z</updated>
    
    <content type="html">&lt;p&gt;&lt;a href=&quot;http://developer.android.com/training/volley/index.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Android Volley&lt;/a&gt; 是Google开发的一个网络lib，可以让你更加简单并且快速的访问网络数据。Volley库的网络请求都是异步的，你不必担心异步处理问题。&lt;/p&gt;
&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;
&lt;p&gt;Volley的优点：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;请求队列和请求优先级&lt;/li&gt;
&lt;li&gt;请求Cache和内存管理&lt;/li&gt;
&lt;li&gt;扩展性性强&lt;/li&gt;
&lt;li&gt;可以取消请求&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&quot;下载和编译volley-jar&quot;&gt;&lt;a href=&quot;#下载和编译volley-jar&quot; class=&quot;headerlink&quot; title=&quot;下载和编译volley.jar&quot;&gt;&lt;/a&gt;下载和编译volley.jar&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;需要安装git，ant，android sdk&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;clone代码：&lt;br&gt;&lt;code&gt;git clone https://android.googlesource.com/platform/frameworks/volley&lt;/code&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;编译jar：&lt;br&gt;&lt;code&gt;android update project -p . 
ant jar&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;添加volley.jar到你的项目中&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;&lt;em&gt;不过已经有人将volley的代码放到github上了：&lt;/em&gt;&lt;/strong&gt;&lt;br&gt;&lt;a href=&quot;https://github.com/mcxiaoke/android-volley&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;https://github.com/mcxiaoke/android-volley&lt;/a&gt;，你可以使用更加简单的方式来使用volley：&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;Maven&quot;&gt;&lt;a href=&quot;#Maven&quot; class=&quot;headerlink&quot; title=&quot;Maven&quot;&gt;&lt;/a&gt;Maven&lt;/h3&gt;&lt;p&gt;format: jar&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;&amp;lt;dependency&amp;gt;
    &amp;lt;groupId&amp;gt;com.mcxiaoke.volley&amp;lt;/groupId&amp;gt;
    &amp;lt;artifactId&amp;gt;library&amp;lt;/artifactId&amp;gt;
    &amp;lt;version&amp;gt;1.0.6&amp;lt;/version&amp;gt;
&amp;lt;/dependency&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;hr&gt;
&lt;h3 id=&quot;Gradle&quot;&gt;&lt;a href=&quot;#Gradle&quot; class=&quot;headerlink&quot; title=&quot;Gradle&quot;&gt;&lt;/a&gt;Gradle&lt;/h3&gt;&lt;p&gt;format: jar&lt;/p&gt;
&lt;p&gt;&lt;code&gt;compile &amp;#39;com.mcxiaoke.volley:library:1.0.6&amp;#39;&lt;/code&gt;&lt;/p&gt;
&lt;h2 id=&quot;Volley工作原理图&quot;&gt;&lt;a href=&quot;#Volley工作原理图&quot; class=&quot;headerlink&quot; title=&quot;Volley工作原理图&quot;&gt;&lt;/a&gt;Volley工作原理图&lt;/h2&gt;&lt;p&gt;&lt;img src=&quot;http://bxbxbai.github.io/img/volley.png&quot; alt=&quot;Volley&quot;&gt;&lt;/p&gt;
&lt;h2 id=&quot;创建Volley-单例&quot;&gt;&lt;a href=&quot;#创建Volley-单例&quot; class=&quot;headerlink&quot; title=&quot;创建Volley 单例&quot;&gt;&lt;/a&gt;创建Volley 单例&lt;/h2&gt;&lt;p&gt;使用volley时，必须要创建一个请求队列&lt;code&gt;RequestQueue&lt;/code&gt;，使用请求队列的最佳方式就是将它做成一个单例，整个app使用这么一个请求队列。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;public class AppController extends Application {

public static final String TAG = AppController.class
        .getSimpleName();

private RequestQueue mRequestQueue;
private ImageLoader mImageLoader;

private static AppController mInstance;

@Override
public void onCreate() {
    super.onCreate();
    mInstance = this;
}

public static synchronized AppController getInstance() {
    return mInstance;
}

public RequestQueue getRequestQueue() {
    if (mRequestQueue == null) {
        mRequestQueue = Volley.newRequestQueue(getApplicationContext());
    }

    return mRequestQueue;
}

public ImageLoader getImageLoader() {
    getRequestQueue();
    if (mImageLoader == null) {
        mImageLoader = new ImageLoader(this.mRequestQueue,
                new LruBitmapCache());
    }
    return this.mImageLoader;
}

public &amp;lt;T&amp;gt; void addToRequestQueue(Request&amp;lt;T&amp;gt; req, String tag) {
    // set the default tag if tag is empty
    req.setTag(TextUtils.isEmpty(tag) ? TAG : tag);
    getRequestQueue().add(req);
}

public &amp;lt;T&amp;gt; void addToRequestQueue(Request&amp;lt;T&amp;gt; req) {
    req.setTag(TAG);
    getRequestQueue().add(req);
}

public void cancelPendingRequests(Object tag) {
    if (mRequestQueue != null) {
        mRequestQueue.cancelAll(tag);
    }
}
}
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;另外，你还需要一个Cache来存放请求的图片：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;public class LruBitmapCache extends LruCache&amp;lt;String, Bitmap&amp;gt; implement ImageCache {
    public static int getDefaultLruCacheSize() {
        final int maxMemory = (int) (Runtime.getRuntime().maxMemory() / 1024);
        final int cacheSize = maxMemory / 8;

        return cacheSize;
    }

    public LruBitmapCache() {
        this(getDefaultLruCacheSize());
    }

    public LruBitmapCache(int sizeInKiloBytes) {
        super(sizeInKiloBytes);
    }

    @Override
    protected int sizeOf(String key, Bitmap value) {
        return value.getRowBytes() * value.getHeight() / 1024;
    }

    @Override
    public Bitmap getBitmap(String url) {
        return get(url);
    }

    @Override
    public void putBitmap(String url, Bitmap bitmap) {
        put(url, bitmap);
    }
}
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;别忘记在&lt;code&gt;AndroidManifest.xml&lt;/code&gt;文件中添加&lt;code&gt;android.permission.INTERNET&lt;/code&gt;权限。&lt;/p&gt;
&lt;h2 id=&quot;创建Json请求&quot;&gt;&lt;a href=&quot;#创建Json请求&quot; class=&quot;headerlink&quot; title=&quot;创建Json请求&quot;&gt;&lt;/a&gt;创建Json请求&lt;/h2&gt;&lt;p&gt;volley自带了&lt;code&gt;JsonObjectRequest&lt;/code&gt;和&lt;code&gt;JsonArrayRequest&lt;/code&gt;分别来处理Json对象请求和Json数据请求（但是voley没有使用gson库写一个GsonRequest，发送一个request，volley直接返回一个java对象，不过我们可以自己写）。&lt;/p&gt;
&lt;h3 id=&quot;创建json-object请求&quot;&gt;&lt;a href=&quot;#创建json-object请求&quot; class=&quot;headerlink&quot; title=&quot;创建json object请求&quot;&gt;&lt;/a&gt;创建json object请求&lt;/h3&gt;&lt;p&gt;发送一个请求只要这么简单，创建一个&lt;code&gt;JsonRequest&lt;/code&gt;对象，写好response回调接口，并把这个请求放到请求队列中就可以了。&lt;code&gt;JsonArrayRequest&lt;/code&gt;也类似。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;// Tag used to cancel the request
String tag_json_obj = &amp;quot;json_obj_req&amp;quot;;
String url = &amp;quot;http://api.androidhive.info/volley/person_object.json&amp;quot;;

JsonObjectRequest jsonObjReq = new JsonObjectRequest(Method.GET,url, null,
            new Response.Listener&amp;lt;JSONObject&amp;gt;() {

                @Override
                public void onResponse(JSONObject response) {
                    Log.d(TAG, response.toString());
                }
            }, new Response.ErrorListener() {

                @Override
                public void onErrorResponse(VolleyError error) {
                    VolleyLog.d(TAG, &amp;quot;Error: &amp;quot; + error.getMessage());
                }
            });

// Adding request to request queue
AppController.getInstance().addToRequestQueue(jsonObjReq, tag_json_obj);
&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&quot;创建String请求&quot;&gt;&lt;a href=&quot;#创建String请求&quot; class=&quot;headerlink&quot; title=&quot;创建String请求&quot;&gt;&lt;/a&gt;创建String请求&lt;/h2&gt;&lt;p&gt;&lt;code&gt;StringRequest&lt;/code&gt;可以用来请求任何string类型的数据：json，xml，文本等等。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;// Tag used to cancel the request
String  tag_string_req = &amp;quot;string_req&amp;quot;;

String url = &amp;quot;http://api.androidhive.info/volley/string_response.html&amp;quot;;

ProgressDialog pDialog = new ProgressDialog(this);
pDialog.setMessage(&amp;quot;Loading...&amp;quot;);
pDialog.show();     

StringRequest strReq = new StringRequest(Method.GET,
            url, new Response.Listener&amp;lt;String&amp;gt;() {

                @Override
                public void onResponse(String response) {
                    Log.d(TAG, response.toString());
                    pDialog.hide();

                }
            }, new Response.ErrorListener() {

                @Override
                public void onErrorResponse(VolleyError error) {
                    VolleyLog.d(TAG, &amp;quot;Error: &amp;quot; + error.getMessage());
                    pDialog.hide();
                }
            });

// Adding request to request queue
AppController.getInstance().addToRequestQueue(strReq, tag_string_req);
&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&quot;创建POST请求&quot;&gt;&lt;a href=&quot;#创建POST请求&quot; class=&quot;headerlink&quot; title=&quot;创建POST请求&quot;&gt;&lt;/a&gt;创建POST请求&lt;/h2&gt;&lt;p&gt;上面说的都是GET请求，下面来说一下POST请求，与GET请求不同的是，只要在创建请求的时候将请求类型改为POST请求，并且override &lt;code&gt;Request&lt;/code&gt;的getParams方法即可。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;// Tag used to cancel the request
String tag_json_obj = &amp;quot;json_obj_req&amp;quot;;

String url = &amp;quot;http://api.androidhive.info/volley/person_object.json&amp;quot;;
ProgressDialog pDialog = new ProgressDialog(this);
pDialog.setMessage(&amp;quot;Loading...&amp;quot;);
pDialog.show();     

    JsonObjectRequest jsonObjReq = new JsonObjectRequest(Method.POST,
            url, null,
            new Response.Listener&amp;lt;JSONObject&amp;gt;() {

                @Override
                public void onResponse(JSONObject response) {
                    Log.d(TAG, response.toString());
                    pDialog.hide();
                }
            }, new Response.ErrorListener() {

                @Override
                public void onErrorResponse(VolleyError error) {
                    VolleyLog.d(TAG, &amp;quot;Error: &amp;quot; + error.getMessage());
                    pDialog.hide();
                }
            }) {

        @Override
        protected Map&amp;lt;String, String&amp;gt; getParams() {
            Map&amp;lt;String, String&amp;gt; params = new HashMap&amp;lt;String, String&amp;gt;();
            params.put(&amp;quot;name&amp;quot;, &amp;quot;Androidhive&amp;quot;);
            params.put(&amp;quot;email&amp;quot;, &amp;quot;abc@androidhive.info&amp;quot;);
            params.put(&amp;quot;password&amp;quot;, &amp;quot;password123&amp;quot;);

            return params;
        }

    };

// Adding request to request queue
AppController.getInstance().addToRequestQueue(jsonObjReq, tag_json_obj);
&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&quot;添加请求头部信息&quot;&gt;&lt;a href=&quot;#添加请求头部信息&quot; class=&quot;headerlink&quot; title=&quot;添加请求头部信息&quot;&gt;&lt;/a&gt;添加请求头部信息&lt;/h2&gt;&lt;pre&gt;&lt;code&gt;// Tag used to cancel the request
String tag_json_obj = &amp;quot;json_obj_req&amp;quot;;

String url = &amp;quot;http://api.androidhive.info/volley/person_object.json&amp;quot;;

ProgressDialog pDialog = new ProgressDialog(this);
pDialog.setMessage(&amp;quot;Loading...&amp;quot;);
pDialog.show();     

JsonObjectRequest jsonObjReq = new JsonObjectRequest(Method.POST,url, null,new Response.Listener&amp;lt;JSONObject&amp;gt;() {
    @Override
    public void onResponse(JSONObject response) {
        Log.d(TAG, response.toString());
        pDialog.hide();
    }
}, new Response.ErrorListener() {
    @Override
    public void onErrorResponse(VolleyError error) {
        VolleyLog.d(TAG, &amp;quot;Error: &amp;quot; + error.getMessage());
        pDialog.hide();
    }
}) {

/**
* Passing some request headers
* */
@Override
public Map&amp;lt;String, String&amp;gt; getHeaders() throws AuthFailureError {
    HashMap&amp;lt;String, String&amp;gt; headers = new HashMap&amp;lt;String, String&amp;gt;();
    headers.put(&amp;quot;Content-Type&amp;quot;, &amp;quot;application/json&amp;quot;);
    headers.put(&amp;quot;apiKey&amp;quot;, &amp;quot;xxxxxxxxxxxxxxx&amp;quot;);
    return headers;
}
};
// Adding request to request queue
AppController.getInstance().addToRequestQueue(jsonObjReq, tag_json_obj);
&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&quot;创建Image请求&quot;&gt;&lt;a href=&quot;#创建Image请求&quot; class=&quot;headerlink&quot; title=&quot;创建Image请求&quot;&gt;&lt;/a&gt;创建Image请求&lt;/h2&gt;&lt;p&gt;Volley库中自带了&lt;code&gt;NetworkImageView&lt;/code&gt;类，这个&lt;code&gt;ImageView&lt;/code&gt;可以自动使用volley下载图片&lt;/p&gt;
&lt;h3 id=&quot;用NetworkImageView加载图片&quot;&gt;&lt;a href=&quot;#用NetworkImageView加载图片&quot; class=&quot;headerlink&quot; title=&quot;用NetworkImageView加载图片&quot;&gt;&lt;/a&gt;用&lt;code&gt;NetworkImageView&lt;/code&gt;加载图片&lt;/h3&gt;&lt;p&gt;首先，说明一下，加载图片的原理：&lt;/p&gt;
&lt;p&gt;&lt;code&gt;NetworkImageView&lt;/code&gt;加载图片需要一个ImageLoader和一个图片URL，这个ImageLoader对象需要一个请求队列对象和ImageCahe对象。调用&lt;code&gt;NetworkImageView&lt;/code&gt;的setUrl方法后，首先会判断当前ImageView的URL和新传入的URL是否一致，如果相同，就不用再发送http请求了，如果不同，那么就使用ImageLoader对象来发送http请求获取图片。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;ImageLoader imageLoader = AppController.getInstance().getImageLoader();
// If you are using NetworkImageView
imgNetWorkView.setImageUrl(Const.URL_IMAGE, imageLoader);
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;加载一个图片只要这么简单~~~&lt;/p&gt;
&lt;h3 id=&quot;用ImageView来加载图片&quot;&gt;&lt;a href=&quot;#用ImageView来加载图片&quot; class=&quot;headerlink&quot; title=&quot;用ImageView来加载图片&quot;&gt;&lt;/a&gt;用ImageView来加载图片&lt;/h3&gt;&lt;p&gt;这个过程和&lt;code&gt;NetworkImageView&lt;/code&gt;类似&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;ImageLoader imageLoader = AppController.getInstance().getImageLoader();

// If you are using normal ImageView
imageLoader.get(Const.URL_IMAGE, new ImageListener() {

    @Override
    public void onErrorResponse(VolleyError error) {
        Log.e(TAG, &amp;quot;Image Load Error: &amp;quot; + error.getMessage());
    }

    @Override
    public void onResponse(ImageContainer response, boolean arg1) {
        if (response.getBitmap() != null) {
            // load image into imageview
            imageView.setImageBitmap(response.getBitmap());
        }
    }
});
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;可以再简单一点：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;// Loading image with placeholder and error image
imageLoader.get(Const.URL_IMAGE, ImageLoader.getImageListener(imageView, R.drawable.ico_loading, R.drawable.ico_error));
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;code&gt;ImageLoader.getImageListener&lt;/code&gt;方法中已经写了一个默认的&lt;code&gt;ImageListener&lt;/code&gt;了&lt;/p&gt;
&lt;h2 id=&quot;Volley-Cache&quot;&gt;&lt;a href=&quot;#Volley-Cache&quot; class=&quot;headerlink&quot; title=&quot;Volley Cache&quot;&gt;&lt;/a&gt;Volley Cache&lt;/h2&gt;&lt;p&gt;volley中自带了强大的cache机制来管理请求cache，这会减少网络请求次数和用户等待时间。&lt;/p&gt;
&lt;h3 id=&quot;从请求Cache中加载请求&quot;&gt;&lt;a href=&quot;#从请求Cache中加载请求&quot; class=&quot;headerlink&quot; title=&quot;从请求Cache中加载请求&quot;&gt;&lt;/a&gt;从请求Cache中加载请求&lt;/h3&gt;&lt;pre&gt;&lt;code&gt;Cache cache = AppController.getInstance().getRequestQueue().getCache();
Entry entry = cache.get(url);
if(entry != null){
    try {
        String data = new String(entry.data, &amp;quot;UTF-8&amp;quot;);
        // handle data, like converting it to xml, json, bitmap etc.,
    } catch (UnsupportedEncodingException e) {      
        e.printStackTrace();
        }
    }
}else{
    // Cached response doesn&amp;apos;t exists. Make network call here
}
&lt;/code&gt;&lt;/pre&gt;&lt;h3 id=&quot;使请求缓存失效&quot;&gt;&lt;a href=&quot;#使请求缓存失效&quot; class=&quot;headerlink&quot; title=&quot;使请求缓存失效&quot;&gt;&lt;/a&gt;使请求缓存失效&lt;/h3&gt;&lt;p&gt;失效并不意味这删除，Volley还会继续使用缓存的对象直到从服务器上获取到了新的数据，新的数据会覆盖旧的数据。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;AppController.getInstance().getRequestQueue().getCache().invalidate(url, true);
&lt;/code&gt;&lt;/pre&gt;&lt;h3 id=&quot;关闭Cache&quot;&gt;&lt;a href=&quot;#关闭Cache&quot; class=&quot;headerlink&quot; title=&quot;关闭Cache&quot;&gt;&lt;/a&gt;关闭Cache&lt;/h3&gt;&lt;p&gt;如果你想将某一个请求的Cache功能关闭，直接调用&lt;code&gt;Request&lt;/code&gt;的setShouldCache()方法就可以：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;// String request
StringRequest stringReq = new StringRequest(....);

// disable cache
stringReq.setShouldCache(false);
&lt;/code&gt;&lt;/pre&gt;&lt;h3 id=&quot;将某一URL的Cache删除&quot;&gt;&lt;a href=&quot;#将某一URL的Cache删除&quot; class=&quot;headerlink&quot; title=&quot;将某一URL的Cache删除&quot;&gt;&lt;/a&gt;将某一URL的Cache删除&lt;/h3&gt;&lt;p&gt;调用&lt;code&gt;Cache&lt;/code&gt;的&lt;code&gt;remove&lt;/code&gt;方法可以删除这个URL的cache:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;AppController.getInstance().getRequestQueue().getCache().remove(url);
&lt;/code&gt;&lt;/pre&gt;&lt;h3 id=&quot;删除所有的Cache&quot;&gt;&lt;a href=&quot;#删除所有的Cache&quot; class=&quot;headerlink&quot; title=&quot;删除所有的Cache&quot;&gt;&lt;/a&gt;删除所有的Cache&lt;/h3&gt;&lt;pre&gt;&lt;code&gt;AppController.getInstance().getRequestQueue().getCache().clear();
&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&quot;取消请求&quot;&gt;&lt;a href=&quot;#取消请求&quot; class=&quot;headerlink&quot; title=&quot;取消请求&quot;&gt;&lt;/a&gt;取消请求&lt;/h2&gt;&lt;p&gt;在你添加一个请求到请求队列中的时候，你可以发现，&lt;code&gt;addToRequestQueue(request, tag)&lt;/code&gt;方法还接受一个tag参数，这个tag就是用来标记某一类请求的，这样就可以取消这个tag的所有请求了：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;String tag_json_arry = &amp;quot;json_req&amp;quot;;
ApplicationController.getInstance().getRequestQueue().cancelAll(&amp;quot;feed_request&amp;quot;);
&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&quot;请求优先级&quot;&gt;&lt;a href=&quot;#请求优先级&quot; class=&quot;headerlink&quot; title=&quot;请求优先级&quot;&gt;&lt;/a&gt;请求优先级&lt;/h2&gt;&lt;p&gt;在创建一个request的时候可以Override &lt;code&gt;Request&lt;/code&gt;方法的&lt;code&gt;getPriority&lt;/code&gt;方法返回一个优先级，优先级分为：Normal, Low, Immediate, High&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;private Priority priority = Priority.HIGH;

StringRequest strReq = new StringRequest(Method.GET,
            Const.URL_STRING_REQ, new Response.Listener&amp;lt;String&amp;gt;() {

                @Override
                public void onResponse(String response) {
                    Log.d(TAG, response.toString());
                    msgResponse.setText(response.toString());
                    hideProgressDialog();

                }
            }, new Response.ErrorListener() {

                @Override
                public void onErrorResponse(VolleyError error) {
                    VolleyLog.d(TAG, &amp;quot;Error: &amp;quot; + error.getMessage());
                    hideProgressDialog();
                }
            }) {
        @Override
        public Priority getPriority() {
            return priority;
        }

    };
&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&quot;Missing-创建xml请求&quot;&gt;&lt;a href=&quot;#Missing-创建xml请求&quot; class=&quot;headerlink&quot; title=&quot;Missing! 创建xml请求&quot;&gt;&lt;/a&gt;Missing! 创建xml请求&lt;/h2&gt;&lt;p&gt;就像创建Gson请求一样，你可以自定义一个&lt;code&gt;XMLRequest&lt;/code&gt;类来请求xml数据&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;a href=&quot;http://developer.android.com/training/volley/index.html&quot;&gt;Android Volley&lt;/a&gt; 是Google开发的一个网络lib，可以让你更加简单并且快速的访问网络数据。Volley库的网络请求都是异步的，你不必担心异步处理问题。&lt;/p&gt;
    
    </summary>
    
      <category term="技术" scheme="http://bxbxbai.gitcafe.io/categories/%E6%8A%80%E6%9C%AF/"/>
    
    
      <category term="Android" scheme="http://bxbxbai.gitcafe.io/tags/Android/"/>
    
      <category term="volley" scheme="http://bxbxbai.gitcafe.io/tags/volley/"/>
    
      <category term="开发经验" scheme="http://bxbxbai.gitcafe.io/tags/%E5%BC%80%E5%8F%91%E7%BB%8F%E9%AA%8C/"/>
    
  </entry>
  
  <entry>
    <title>Stopwatch工具类</title>
    <link href="http://bxbxbai.gitcafe.io/2014/08/01/the-stopwatch-class/"/>
    <id>http://bxbxbai.gitcafe.io/2014/08/01/the-stopwatch-class/</id>
    <published>2014-08-01T11:45:01.000Z</published>
    <updated>2015-09-12T07:01:41.000Z</updated>
    
    <content type="html">&lt;p&gt;现在我的一部分工作就是优化客户端的性能，比如优化列表快速滑动卡顿现象。&lt;/p&gt;
&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;
&lt;p&gt;一个很好的办法就是使用DDMS的Method Profiling功能，它可以生成一个表格来显示app中所有执行的方法的执行时间，占cpu运行的百分比，还有图形化的显示。功能很强大！&lt;/p&gt;
&lt;p&gt;但是，有的时候是跨线程工作的，比如，我获得要发送一个http请求到http请求返回时的时间，这个它就无能为力了（或许可能我没有发现这个功能）；还比如，我要获得从sd卡上读一个文件所需的时间。&lt;/p&gt;
&lt;p&gt;一个最原始的方法就是&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;long start = SystemClock.uptimeMillis();
//do something
Log.i(TAG, &amp;quot;time: &amp;quot; + (SystemClock.uptimeMillis() - start));
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;这样就可以获得这段代码的运行时间了，我发现在测试Adapter的&lt;code&gt;getView&lt;/code&gt;方法性能时很管用。因为ListView快速滑动时卡顿最主要的原因就是&lt;code&gt;getView&lt;/code&gt;方法执行时间过长，我的测试过程中发现&lt;code&gt;getView&lt;/code&gt;方法的执行时间不能超过10ms（当然这个在不同手机上运行时间不一样）。也就是如果在一个手机上&lt;code&gt;getView&lt;/code&gt;方法执行时间超过10ms，这个列表快速滑动时就会产生卡顿现象。&lt;/p&gt;
&lt;p&gt;但是Adapter中可能有很多方法，我要在每个方法中都像上面那样写么？我不要烦死了？&lt;/p&gt;
&lt;p&gt;然后，我就从秒表中获得启发，我可不可以也像秒表一样写一个类来对每个方法测试它的运行时间呢？&lt;/p&gt;
&lt;p&gt;下面这个类就诞生了，其实这个类很简单，你只需要在你需要测试时间的方法A前写一句：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;StopWatch.begin(&amp;quot;bxbxbai&amp;quot;);
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;这就相当于按了一下秒表（StopWatch工具就是在HashMap中添加了一条记录），然后在方法A后面写一句：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;StopWatch.end(&amp;quot;bxbxbai&amp;quot;);
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;这就相当于按了一下秒表，系统在Log中输出了方法A的的运行时间，并且把tag删除。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;StopWatch.lap(&amp;quot;bxbxbai&amp;quot;);
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;这个方法不会删除tag，它会输出当前时间到打tag的时候的时间间隔，就是秒表的计次功能。&lt;/p&gt;
&lt;p&gt;不光如此，这个类还支持跨进程，比如，我在A线程中执行begin方法，我可以在一个Callback中执行end方法，输出总共的执行时间。&lt;/p&gt;
&lt;script src=&quot;https://gist.github.com/bxbxbai/6278750.js&quot;&gt;&lt;/script&gt;

</content>
    
    <summary type="html">
    
      &lt;p&gt;现在我的一部分工作就是优化客户端的性能，比如优化列表快速滑动卡顿现象。&lt;/p&gt;
    
    </summary>
    
    
      <category term="Android" scheme="http://bxbxbai.gitcafe.io/tags/Android/"/>
    
      <category term="开发工具" scheme="http://bxbxbai.gitcafe.io/tags/%E5%BC%80%E5%8F%91%E5%B7%A5%E5%85%B7/"/>
    
  </entry>
  
  <entry>
    <title>我如何理解Java中抽象类和接口</title>
    <link href="http://bxbxbai.gitcafe.io/2014/07/20/understood_abstract_class_and_interface/"/>
    <id>http://bxbxbai.gitcafe.io/2014/07/20/understood_abstract_class_and_interface/</id>
    <published>2014-07-20T03:17:42.000Z</published>
    <updated>2016-03-12T06:59:01.000Z</updated>
    
    <content type="html">&lt;p&gt;在面试中我们经常被问到：&lt;strong&gt;Java中抽象类和接口的区别是什么？&lt;/strong&gt;&lt;/p&gt;
&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;
&lt;p&gt;然后，我们就大说一通抽象类可以有方法，接口不能有实际的方法啦；一个类只能继承一个抽象类，却可以继承多个接口啦，balabala一大堆，就好像把标准答案熟练的说出来一样。&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;http://www.importnew.com/12399.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;抽象类和接口&lt;/a&gt;这篇文章讲到了他们的区别和联系，它们确实有很多相似的地方，但是从本质上看，或从语言的设计角度来看，这不是它们最本质的区别。&lt;/p&gt;
&lt;h2 id=&quot;不卖关子，我个人对这两个的理解：&quot;&gt;&lt;a href=&quot;#不卖关子，我个人对这两个的理解：&quot; class=&quot;headerlink&quot; title=&quot;不卖关子，我个人对这两个的理解：&quot;&gt;&lt;/a&gt;不卖关子，我个人对这两个的理解：&lt;/h2&gt;&lt;blockquote&gt;
&lt;p&gt;类是具体实例的抽象，比如一个json字符串的抽象；而抽象类就是类的抽象；接口就是抽象类的抽象，&lt;strong&gt;接口更像是一种协议&lt;/strong&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;听我慢慢道来~&lt;/p&gt;
&lt;h2 id=&quot;吐槽&quot;&gt;&lt;a href=&quot;#吐槽&quot; class=&quot;headerlink&quot; title=&quot;吐槽&quot;&gt;&lt;/a&gt;吐槽&lt;/h2&gt;&lt;p&gt;首先，我必须吐槽一下这种面试，我认为面试官凡事问出这种类似“说说抽象类和接口的区别”，“说说进程和线程的区别”等等问题，都是不负责的表现。&lt;/p&gt;
&lt;p&gt;为什么呢？&lt;/p&gt;
&lt;p&gt;一个原因就是，面试官对想要招的人完全没有自己的评价标准，另一个原因就是对面试者不负责。这种问题根本不能考验面试者的水平。&lt;/p&gt;
&lt;p&gt;那么，如果我来面试别人，我会问：&lt;strong&gt;请你说说你怎么理解抽象类和接口；如果要你向你外婆解释进程和线程的区别，你会怎么解释？&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;我觉得这可以考验面试者对问题的理解程度，我想微软的面试题（你如何向你奶奶解释Excel）一样，考验一个人对某一事物的理解程度（虽然，至今我还不能很好的想明白这个问题 -。-）&lt;/p&gt;
&lt;h2 id=&quot;抽象类和接口的区别&quot;&gt;&lt;a href=&quot;#抽象类和接口的区别&quot; class=&quot;headerlink&quot; title=&quot;抽象类和接口的区别&quot;&gt;&lt;/a&gt;抽象类和接口的区别&lt;/h2&gt;&lt;p&gt;说到抽象类和接口，就必须要说到类。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;一个类就是对现实事物的抽象。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;比如定义一个BenzCar类，就需要对现实的奔驰汽车有很好的抽象（当然奔驰汽车有好多系列，这里不钻牛角尖）。也就是说如果你要造一辆奔驰汽车，就需要BenzCar这个类（这辆奔驰汽车就是内存中的一个Instance）。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;那么抽象类就是对类的抽象。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;怎么理解呢？就是说有很多汽车厂商一起定义一种规范（Car类），说要造一辆汽车就需要有发动机，轮胎，音响设备…（这些就相当于抽象方法），具体用什么发动机，轮胎，音响设备由每个汽车厂商自己去完成。这样就有各种汽车了，奔驰牌的，宝马牌的，丰田牌的…&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;接口就是对抽象类的抽象&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;这只是我个人的理解。&lt;/p&gt;
&lt;p&gt;在我们日常生活中可以看到各种“接口”，电源插座就是一种。开始我是看到耗子叔的博客在开始理解“控制翻转”这个概念的——&lt;a href=&quot;http://coolshell.cn/articles/9949.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;IoC/DIP其实是一种管理思想| 酷壳- CoolShell.cn&lt;/a&gt;。后来我就想，这个东西其实无处不在，制造电源插座的厂和制造电器的厂只要约定一种“接口”——两口插座或三口插座，当然每个国家的接口都不一样，不同接口之间的转换就需要用适配器了。&lt;/p&gt;
&lt;p&gt;其实程序中也一样，比如所有的交通工具可以抽象为一个接口&lt;code&gt;Drivable&lt;/code&gt;（&lt;em&gt;可能由于经验原因，我考虑的不是很完善&lt;/em&gt;），表示实现这个接口的类创建的对象（比如：汽车，飞机，轮船等等）都是可以驾驶的&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;public interface Drivable{
    public void drive();
}
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;然后，我们就可以创建一个&lt;code&gt;AbstractCar&lt;/code&gt;类，表示这个对所有汽车类的一个抽象，所有可以驾驶的汽车都必须继承这个类，这个抽象类中规定了一些抽象方法，比如&lt;code&gt;getEngine()&lt;/code&gt;方法，这说明每种汽车的引擎都不太一样，需要在子类中自定义（&lt;em&gt;当然，你也可以继承&lt;code&gt;AbstractCar&lt;/code&gt;类，对所有可能具有相同引擎的汽车进行一层抽象&lt;/em&gt;）。&lt;/p&gt;
&lt;p&gt;为什么对&lt;code&gt;Drivable&lt;/code&gt;的&lt;code&gt;drive()&lt;/code&gt;方法进行了默认实现，但是默认实现中却直接抛出了异常呢？&lt;/p&gt;
&lt;p&gt;其实这是一种实现接口的方法，还有一种方法就是将&lt;code&gt;drive()&lt;/code&gt;设为abstract。这两种实现方式，我觉得从功能上讲是一样的，但是从类设计上讲是不同的。&lt;/p&gt;
&lt;p&gt;下面代码中的实现，我是参考了&lt;code&gt;java.util.AbstractList&amp;lt;E&amp;gt;&lt;/code&gt;中&lt;code&gt;add(int location, E object)&lt;/code&gt;方法的设计，它的文档中写到：&lt;/p&gt;
&lt;blockquote&gt;
&lt;pre&gt;&lt;code&gt;* @throws UnsupportedOperationException
*                if adding to this List is not supported.
&lt;/code&gt;&lt;/pre&gt;&lt;/blockquote&gt;
&lt;pre&gt;&lt;code&gt;public abstract class AbstractCar implements Drivable {
    public abstract Engine getEngine();

    public abstract Wheel getWheel();

    @Override
    public void drive(){
        throw new UnsupportedOperationException();
    }
    // 省略其他方法和属性
}
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;那么上面这段代码中的&lt;code&gt;drive()&lt;/code&gt;可以理解为：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;默认情况下“汽车”是不能开的，你实现了一个汽车类后，需要Override这个方法，实现自己的&lt;code&gt;drive&lt;/code&gt;方法&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&quot;以java容器中的List举例&quot;&gt;&lt;a href=&quot;#以java容器中的List举例&quot; class=&quot;headerlink&quot; title=&quot;以java容器中的List举例&quot;&gt;&lt;/a&gt;以java容器中的List举例&lt;/h2&gt;&lt;p&gt;&lt;img src=&quot;http://bxbxbai.github.io/img/full_container_taxonomy.png&quot; alt=&quot;Full Container Taxonomy&quot; title=&quot;Full Container Taxonomy&quot;&gt;&lt;/p&gt;
&lt;p&gt;到源码里面找，你就会发现&lt;code&gt;List&amp;lt;E&amp;gt;&lt;/code&gt;的继承关系最顶层的就是&lt;code&gt;Iterable&lt;/code&gt;，就表示说List是可以&lt;strong&gt;遍历&lt;/strong&gt;的，而且它还会产生一个&lt;code&gt;Iterator&lt;/code&gt;接口对象。这表示一个列表可以通过这个&lt;strong&gt;迭代器&lt;/strong&gt;来遍历。&lt;/p&gt;
&lt;p&gt;这就像上面说的，所有的交通工具都是可以&lt;strong&gt;驾驶&lt;/strong&gt;的一样，所有的列表都是可以遍历的。&lt;/p&gt;
&lt;p&gt;一层一层往下，类就变得更加具体。&lt;/p&gt;
&lt;h2 id=&quot;最后&quot;&gt;&lt;a href=&quot;#最后&quot; class=&quot;headerlink&quot; title=&quot;最后&quot;&gt;&lt;/a&gt;最后&lt;/h2&gt;&lt;p&gt;为什么接口可以继承？&lt;/p&gt;
&lt;p&gt;其实这个原理很简单。因为总有一个最本质的&lt;strong&gt;协议&lt;/strong&gt;来约束大家，比如所有的交通工具都是可以驾驶的，所有的容易都是可以遍历的。然后&lt;strong&gt;协议&lt;/strong&gt;会渐渐变得更加具体：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;Iterable &amp;lt;- Collection &amp;lt;- List &amp;lt;- AbstractList &amp;lt;- List
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;strong&gt;从下往上看，就是一层比一层抽象。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;就像我在文章开头说的，&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;你用&lt;code&gt;ArrayList&lt;/code&gt;类可以创建很多个对象，&lt;code&gt;ArrayList&lt;/code&gt;就是这些对象的一次抽象&lt;/li&gt;
&lt;li&gt;而&lt;code&gt;AbstractList&lt;/code&gt;是对&lt;code&gt;ArratList&lt;/code&gt;的一次抽象，你用&lt;code&gt;AbstractList&lt;/code&gt;可以创建&lt;code&gt;ArrayList&lt;/code&gt;，也可以创建&lt;code&gt;Stack&lt;/code&gt;，或&lt;code&gt;LinkedList&lt;/code&gt;等&lt;/li&gt;
&lt;li&gt;&lt;code&gt;List&lt;/code&gt;接口就是对所有的列表类的抽象&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Collection&lt;/code&gt;就是对所有单一元素的容器的抽象&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Iterable&lt;/code&gt;就是一个最高层次的抽象了，表示所有的容器都是可以遍历的&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;注：&quot;&gt;&lt;a href=&quot;#注：&quot; class=&quot;headerlink&quot; title=&quot;注：&quot;&gt;&lt;/a&gt;注：&lt;/h3&gt;&lt;p&gt;应该有很多我考虑不周全的地方，欢迎大家指正并且讨论&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;在面试中我们经常被问到：&lt;strong&gt;Java中抽象类和接口的区别是什么？&lt;/strong&gt;&lt;/p&gt;
    
    </summary>
    
    
      <category term="Java" scheme="http://bxbxbai.gitcafe.io/tags/Java/"/>
    
  </entry>
  
  <entry>
    <title>Context，什么是Context？</title>
    <link href="http://bxbxbai.gitcafe.io/2014/07/16/context/"/>
    <id>http://bxbxbai.gitcafe.io/2014/07/16/context/</id>
    <published>2014-07-16T12:44:29.000Z</published>
    <updated>2016-03-12T07:02:29.000Z</updated>
    
    <content type="html">&lt;p&gt;原文：&lt;a href=&quot;http://www.doubleencore.com/2013/06/context/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;http://www.doubleencore.com/2013/06/context/&lt;/a&gt;&lt;/p&gt;
&lt;h3 id=&quot;译者注：&quot;&gt;&lt;a href=&quot;#译者注：&quot; class=&quot;headerlink&quot; title=&quot;译者注：&quot;&gt;&lt;/a&gt;译者注：&lt;/h3&gt;&lt;p&gt;找到一篇好文章，在开发过程中，经常会使用context对象，但是却不知道context是个什么东西，也不知道&lt;code&gt;getApplicationContext()&lt;/code&gt; 和 &lt;code&gt;getContext()&lt;/code&gt; 如何工作。特地翻译这篇文章，刚开始翻译，英语也不好，有错误还请大家指正。&lt;/p&gt;
&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;
&lt;h3 id=&quot;译文：&quot;&gt;&lt;a href=&quot;#译文：&quot; class=&quot;headerlink&quot; title=&quot;译文：&quot;&gt;&lt;/a&gt;译文：&lt;/h3&gt;&lt;blockquote&gt;
&lt;p&gt;&lt;code&gt;Context&lt;/code&gt;应该是Android应用开发中最常使用的元素吧？它也应该是最滥用的元素。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;code&gt;Context&lt;/code&gt;对象是最常见的对象，经常用于参数传递，因此也会出现一些你意想不到的情况。加载资源文件，启动一个新的&lt;code&gt;Activit&lt;/code&gt;y，获取一个系统服务，获取内部文件路径和创建view全部（这些仅仅是一部分）都需要一个&lt;code&gt;Context&lt;/code&gt;对象来完成这些操作。我们想做的是给你展示&lt;code&gt;Context&lt;/code&gt;如何工作，以及提供一些建议会（希望会）让你在开发中更合理的使用&lt;code&gt;Context&lt;/code&gt;。&lt;/p&gt;
&lt;h2 id=&quot;Context类型&quot;&gt;&lt;a href=&quot;#Context类型&quot; class=&quot;headerlink&quot; title=&quot;Context类型&quot;&gt;&lt;/a&gt;Context类型&lt;/h2&gt;&lt;p&gt;并不是所有的Context对象都相同，根据Android应用组件的不同，可以分为以下几种：&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Application&lt;/strong&gt;：它是应用程序的一个单例，它可以通过Activity或Service的&lt;code&gt;getApplication()&lt;/code&gt;方法获取，也可以在任何继承&lt;code&gt;Context&lt;/code&gt;类的的对象中通过&lt;code&gt;getApplicationContext()&lt;/code&gt;来获取。不管它是怎么获取的，这些方法返回的都是App中同一个实例。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Activity/Service&lt;/strong&gt;：它们继承自&lt;code&gt;ContextWrapper&lt;/code&gt;，&lt;code&gt;ContextWrapper&lt;/code&gt;实现了&lt;code&gt;Context&lt;/code&gt;同样的API，但是隐藏了内部&lt;code&gt;Context&lt;/code&gt;对象的方法调用，&lt;code&gt;Context&lt;/code&gt;也是&lt;code&gt;ContextWrapper&lt;/code&gt;的父类。每当系统创建一个&lt;code&gt;Activity&lt;/code&gt;或&lt;code&gt;Service&lt;/code&gt;对象的时候，它也为它们创建了新的&lt;code&gt;ContextWrapper&lt;/code&gt;对象。每个&lt;code&gt;Activity&lt;/code&gt;或&lt;code&gt;Service&lt;/code&gt;对象，包括他们对应的context对象都是唯一的。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;BroadcastReceiver&lt;/strong&gt;：它并不拥有&lt;code&gt;Context&lt;/code&gt;对象，但是系统在一个新的广播到来的时候通过&lt;code&gt;onReceiver()&lt;/code&gt;方法传入一个&lt;code&gt;Context&lt;/code&gt;对象，这是一个&lt;code&gt;ReceiverRestrictedContext&lt;/code&gt;，它的两个主要方法，&lt;code&gt;registerReceiver()&lt;/code&gt;和&lt;code&gt;bindService()&lt;/code&gt;都被禁用了。每一次receiver处理一个广播，传入的Context对象都是一个新的实例。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;ContentProvider&lt;/strong&gt;：同样也不是一个&lt;code&gt;Context&lt;/code&gt;对象，但是在创建的时候会通过&lt;code&gt;getContext()&lt;/code&gt;方法传入一个context对象。如果&lt;code&gt;ContentProvider&lt;/code&gt;是在本地调用的话（在同一个进程中），那么这会返回一个应用单例。然而，如果是在不同的进程中调用的话，它会新建一个context对象表示当前provider运行的进程。&lt;/p&gt;
&lt;h2 id=&quot;Saved-References&quot;&gt;&lt;a href=&quot;#Saved-References&quot; class=&quot;headerlink&quot; title=&quot;Saved References&quot;&gt;&lt;/a&gt;Saved References&lt;/h2&gt;&lt;p&gt;第一个问题是，我们想在一个对象中保存一个Context对象的引用，并且这个对象的生命周期超过了你保存的Context对象。比如：创建一个需要一个Context对象的单例来加载文件资源或访问一个ContentProvider，并且在这个单例中保存当前Activity或Service的引用。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Bad Singleton&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;public class CustomManager {
    private static CustomManager sInstance;

    public static CustomManager getInstance(Context context) {
        if (sInstance == null) {
            sInstance = new CustomManager(context);
        }

        return sInstance;
    }

    private Context mContext;

    private CustomManager(Context context) {
        mContext = context;
    }
}
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;这里的问题在于，我们并不知道&lt;code&gt;Context&lt;/code&gt;从哪里来，并且如果单例保存了&lt;code&gt;Activity&lt;/code&gt;或&lt;code&gt;Service&lt;/code&gt;的引用，如果它们被销毁了，这样是不安全的。这个问题是因为单例在类里面保存了一个静态引用。这就意味着那个对象，以及这个对象引用的所有对象都不会被gc回收。如果&lt;code&gt;Context&lt;/code&gt;对象是一个&lt;code&gt;Activity&lt;/code&gt;，我们就会始终持有这个&lt;code&gt;Activity&lt;/code&gt;的所有View以及其他可能很大的对象，最终导致内存泄露。&lt;/p&gt;
&lt;p&gt;为了防止出现这种情况，我们可以修改这个类让它持有&lt;code&gt;Application Context&lt;/code&gt;：&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Better Singleton：&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;public class CustomManager {
    private static CustomManager sInstance;

    public static CustomManager getInstance(Context context) {
        if (sInstance == null) {
            //Always pass in the Application Context
            sInstance = new CustomManager(context.getApplicationContext());
        }

        return sInstance;
    }

    private Context mContext;

    private CustomManager(Context context) {
        mContext = context;
    }
}
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;现在，不管context对象是从哪里传入的，因为现在单例持有的是&lt;code&gt;Application Context&lt;/code&gt;，这个是安全的，因为&lt;code&gt;Application Context&lt;/code&gt; 本身就是一个单例，因此不会造成内存泄露。还有一个类似的问题就是在一个后台线程（background thread）或一个延时&lt;code&gt;Handler&lt;/code&gt;中持有一个对&lt;code&gt;Context&lt;/code&gt;的引用。&lt;/p&gt;
&lt;p&gt;既然&lt;code&gt;Application Context&lt;/code&gt;有那么多好处，我们为什么不用&lt;code&gt;Application Context&lt;/code&gt;来处理一切呢？这个问题的答案就是，前面提到过的，是因为&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;这些Context并不都是相同的&lt;/strong&gt;。&lt;/p&gt;
&lt;h2 id=&quot;Context的作用&quot;&gt;&lt;a href=&quot;#Context的作用&quot; class=&quot;headerlink&quot; title=&quot;Context的作用&quot;&gt;&lt;/a&gt;Context的作用&lt;/h2&gt;&lt;p&gt;从上文中可以知道，Context有多种来源，而不同来源的Context所具有的通用操作也不一样，下表列出了各种不同Context 的作用域：&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;.&lt;/th&gt;
&lt;th style=&quot;text-align:center&quot;&gt;Application&lt;/th&gt;
&lt;th style=&quot;text-align:center&quot;&gt;Activity&lt;/th&gt;
&lt;th style=&quot;text-align:center&quot;&gt;Service&lt;/th&gt;
&lt;th style=&quot;text-align:center&quot;&gt;ContentProvider&lt;/th&gt;
&lt;th style=&quot;text-align:center&quot;&gt;BroadcastReceiver&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;Show a Dialog&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;NO&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;YES&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;NO&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;NO&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;NO&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Start an Activity&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;NO&lt;code&gt;1&lt;/code&gt;&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;YES&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;NO&lt;code&gt;1&lt;/code&gt;&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;NO&lt;code&gt;1&lt;/code&gt;&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;NO&lt;code&gt;1&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Layout Inflation&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;NO&lt;code&gt;2&lt;/code&gt;&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;YES&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;NO&lt;code&gt;2&lt;/code&gt;&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;NO&lt;code&gt;2&lt;/code&gt;&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;NO&lt;code&gt;2&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Start a Service&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;YES&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;YES&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;YES&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;YES&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;YES&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Bind to a Service&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;YES&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;YES&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;YES&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;YES&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;NO&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Send a Broadcast&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;YES&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;YES&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;YES&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;YES&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;YES&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Register BroadcastReceiver&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;YES&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;YES&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;YES&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;YES&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;NO&lt;code&gt;3&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Load Resource Values&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;YES&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;YES&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;YES&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;YES&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;YES&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;&lt;strong&gt;译者注&lt;/strong&gt;：这1，2，3标注就不翻译了，说说我自己的理解吧。这几个Context只有Activity的Context是“看的见的”，其他组件的Context都是“看不见的”。因此，如果你想创建一个比如Dialog，Activity等“看的见”的组件就必须要用Activity的Context。比如，你想调用getString或getResource方法获取res文件夹下的资源时，所有的Context对象都可以使用。因为这些东西都是“看不见”的。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;“Show a Dialog”&lt;/strong&gt; 这是我在公司亲身遇到过的一个问题，Dialog必须要依附于一个Activity组件，不然无法显示。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;“Start an Activity”&lt;/strong&gt;这个与Activity运行的&lt;a href=&quot;http://developer.android.com/guide/components/tasks-and-back-stack.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;后退栈&lt;/a&gt;有关系&lt;/p&gt;
&lt;h2 id=&quot;用户界面&quot;&gt;&lt;a href=&quot;#用户界面&quot; class=&quot;headerlink&quot; title=&quot;用户界面&quot;&gt;&lt;/a&gt;用户界面&lt;/h2&gt;&lt;p&gt;你可以从上面的表格中看到&lt;code&gt;Application Context&lt;/code&gt;有很多事情是做不了的，它不能做的事情都与UI有关。事实上，只有Activity才能够处理与UI有关的任务，其他的Context都是非常相似的（不能处理与UI有关的任务）。&lt;/p&gt;
&lt;p&gt;这3个任务（“Show a Dialog”，“Start a Activity”，“Layout Inflation”）似乎就是Android系统就是这么设计的，让Activity来处理这些与UI有关的任务。想要使用Application Context对象来新建一个Dialog或者启动一个Activity系统就会抛出异常，然后程序就会崩溃。&lt;/p&gt;
&lt;p&gt;Infalting layouts是一个容易被忽略的问题，如果你读过这篇文章&lt;a href=&quot;http://www.doubleencore.com/2013/05/layout-inflation-as-intended/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;layout inflation&lt;/a&gt;，你就会明白这里面隐藏着一些坑…使用不同的Context就是会带你走向不同坑。当你使用&lt;em&gt;LayoutInflator&lt;/em&gt;，并且使用&lt;code&gt;Application Context&lt;/code&gt;后，它会返回一个&lt;code&gt;View&lt;/code&gt;，但是这个&lt;code&gt;View&lt;/code&gt;的主题和样式就会被忽略。这是因为，&lt;code&gt;Activity&lt;/code&gt; 才是系统配置文件中的唯一持有主题和样式的&lt;code&gt;Contex&lt;/code&gt;t。其他所有的&lt;code&gt;Context&lt;/code&gt;都会使用系统默认的主题来渲染你的xml来生成&lt;code&gt;View&lt;/code&gt;，最终就导致了界面并不是你想要的。&lt;/p&gt;
&lt;h2 id=&quot;结论&quot;&gt;&lt;a href=&quot;#结论&quot; class=&quot;headerlink&quot; title=&quot;结论&quot;&gt;&lt;/a&gt;结论&lt;/h2&gt;&lt;p&gt;很多情况下，你可以在一个组件内部使用Context对象，你可以很安全的持有Context的引用，前提就是你的对象生命周期小于Context的生命周期。如果你的对象需要持有一个比Context生命周期要长的Context引用时，即使你的对象也是一个临时对象，也请你考虑保存Application Context 的引用！&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;原文：&lt;a href=&quot;http://www.doubleencore.com/2013/06/context/&quot;&gt;http://www.doubleencore.com/2013/06/context/&lt;/a&gt;&lt;/p&gt;
&lt;h3 id=&quot;译者注：&quot;&gt;&lt;a href=&quot;#译者注：&quot; class=&quot;headerlink&quot; title=&quot;译者注：&quot;&gt;&lt;/a&gt;译者注：&lt;/h3&gt;&lt;p&gt;找到一篇好文章，在开发过程中，经常会使用context对象，但是却不知道context是个什么东西，也不知道&lt;code&gt;getApplicationContext()&lt;/code&gt; 和 &lt;code&gt;getContext()&lt;/code&gt; 如何工作。特地翻译这篇文章，刚开始翻译，英语也不好，有错误还请大家指正。&lt;/p&gt;
    
    </summary>
    
      <category term="技术" scheme="http://bxbxbai.gitcafe.io/categories/%E6%8A%80%E6%9C%AF/"/>
    
    
      <category term="Android" scheme="http://bxbxbai.gitcafe.io/tags/Android/"/>
    
      <category term="翻译" scheme="http://bxbxbai.gitcafe.io/tags/%E7%BF%BB%E8%AF%91/"/>
    
  </entry>
  
  <entry>
    <title>Android要点：理解Loopers 和 Handlers</title>
    <link href="http://bxbxbai.gitcafe.io/2014/07/13/android%E8%A6%81%E7%82%B9%E7%90%86%E8%A7%A3looper%E5%92%8Chandler/"/>
    <id>http://bxbxbai.gitcafe.io/2014/07/13/android要点理解looper和handler/</id>
    <published>2014-07-13T09:01:13.000Z</published>
    <updated>2016-03-12T07:01:49.000Z</updated>
    
    <content type="html">&lt;p&gt;原文：&lt;a href=&quot;http://mindtherobot.com/blog/159/android-guts-intro-to-loopers-and-handlers/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;http://mindtherobot.com/blog/159/android-guts-intro-to-loopers-and-handlers/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;我喜欢Android的原因之一就是它有很多非常有用的小工具，其中很多还是与平台无关的。今天，我想介绍两个非常nice 的类——&lt;code&gt;Looper&lt;/code&gt;和&lt;code&gt;Handler&lt;/code&gt;，他们用于Android UI，并且对我们开发者也可用，我们就可以用它们来做很多非常棒的事情了。&lt;/p&gt;
&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;
&lt;p&gt;那么，我们能用&lt;code&gt;Looper&lt;/code&gt;和&lt;code&gt;Handler&lt;/code&gt;做什么呢？首先，这两个类实现了一种通用的并发模型，我把它叫做：Pipeline 线程。它是这样工作的：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Pipeline 线程持有一个任务队列（a queue of tasks），这些任务就是一些可以执行的工作单元（units of work）&lt;/li&gt;
&lt;li&gt;其他线程可以自由的将任务加到Pipeline线程的任务队列中去&lt;/li&gt;
&lt;li&gt;Pipeline线程就按次序一个一个执行任务，如果任务队列中没有任务了，它就会自动阻塞直到有任务到来&lt;/li&gt;
&lt;li&gt;有些时候，任务可以叫做消息（messages）或者其他名字&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;这个架构有一些很好的特征，并且这个架构已经被用于其他平台的框架或应用中了。&lt;/p&gt;
&lt;p&gt;这篇文章中，我们会新建一个简单的app来模拟一个下载任务队列，同时在UI界面显示任务的状态，我们就直接使用Looper和Handler了。（源代码可以去原文中下载）&lt;/p&gt;
&lt;p&gt;但是，我们在开始前先来看一下Pipeline线程，以及Looper和Handler的原理。&lt;/p&gt;
&lt;p&gt;###Pipeline线程的用途&lt;br&gt;Pipeline线程的用途可以在几乎所有的UI框架中找到，包括Swing，SWT，Adobe Flex，以及Android Activity。Pipeline线程模式经常被用于处理UI事件（如按钮的点击事件，手指移动，屏幕方向改变，屏幕重新绘制等等），它可以让你在改变一个按钮文字的时候同时不用担心用户会点击这个按钮（译者注：这两个事件不会并发执行，处理UI事件是单线程的）。&lt;/p&gt;
&lt;p&gt;另一方面，这就迫使你在UI线程中执行较快的操作——任何一个开发都知道如果你在一个按钮的&lt;code&gt;OnClick&lt;/code&gt;方法中去下载一个文件会发生什么事情。&lt;/p&gt;
&lt;p&gt;其他Pipeline线程模式的通用操作有：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;执行一个到远程服务的request（通常你希望它们一个一个按序执行） &lt;/li&gt;
&lt;li&gt;上传一个图片到http服务器&lt;/li&gt;
&lt;li&gt;缩放以及剪裁图片&lt;/li&gt;
&lt;li&gt;下载操作&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;通常，使用一个Pipeline线程而不是为每个后台操作都新建一个线程的好处就是，这样你可以控制每个后台任务的加载以及顺序（优先级）。此外，你也可以开启多个Pipeline线程，把他们当做一个线程池，这样你就可以一次同时执行多个操作。&lt;/p&gt;
&lt;h3 id=&quot;Looping和Handling&quot;&gt;&lt;a href=&quot;#Looping和Handling&quot; class=&quot;headerlink&quot; title=&quot;Looping和Handling&quot;&gt;&lt;/a&gt;Looping和Handling&lt;/h3&gt;&lt;p&gt;&lt;a href=&quot;http://developer.android.com/reference/android/os/Looper.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Looper&lt;/a&gt;类可以将一个线程转换成Pipeline线程，而&lt;a href=&quot;http://developer.android.com/reference/android/os/Handler.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Handler&lt;/a&gt;提供了一种机制，你可以通过它将任务添加到Pipeline线程中。Looper之所以这么命名是因为它实现了循环——取一个task执行，然后再取下一个task执行，如此循环；Handler如此命名是因为他们无法想出一个更好的名字了~（译者注：囧…）&lt;/p&gt;
&lt;p&gt;下面就是你需要添加到Thread类的run方法中的代码来创建一个你自己的Pipeline线程，然后可以将这个Pipeline线程添加到Handler对象中：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;@Override
public void run() {
  try {
    // preparing a looper on current thread     
    // the current thread is being detected implicitly
    Looper.prepare();

    // now, the handler will automatically bind to the
    // Looper that is attached to the current thread
    // You don&amp;apos;t need to specify the Looper explicitly
    handler = new Handler();

    // After the following line the thread will start
    // running the message loop and will not normally
    // exit the loop unless a problem happens or you
    // quit() the looper (see below)
    Looper.loop();
  } catch (Throwable t) {
    Log.e(TAG, &amp;quot;halted due to an error&amp;quot;, t);
  } 
}
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;然后，你只要将这个handler对象传到其他任何线程中去，它有一个线程安全的接口，包括了很多操作，但是最主要的操作就是&lt;code&gt;postMessage()&lt;/code&gt;以及相关的方法了。&lt;/p&gt;
&lt;h5 id=&quot;Notes：Handler类包含了很多非常棒的方法，特别是与消息传递有关的，本文不会写与此相关的内容。&quot;&gt;&lt;a href=&quot;#Notes：Handler类包含了很多非常棒的方法，特别是与消息传递有关的，本文不会写与此相关的内容。&quot; class=&quot;headerlink&quot; title=&quot;Notes：Handler类包含了很多非常棒的方法，特别是与消息传递有关的，本文不会写与此相关的内容。&quot;&gt;&lt;/a&gt;Notes：Handler类包含了很多非常棒的方法，特别是与消息传递有关的，本文不会写与此相关的内容。&lt;/h5&gt;&lt;p&gt;举个栗子：想象一下，一个线程A持有了handler对象的引用，此handler是在Pipeline线程中创建的，下面代码就可以让这个线程A在Pipeline线程中执行操作了：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;handler.post(new Runnable() {
  @Override
  public void run() {       
    // this will be done in the Pipeline Thread       
  }
});
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;在下载的栗子中，我们就会在用户点击按钮（在UI线程中处理）的时候，用这个模板来创建一个下载任务（在下载Pipeline线程中）。我们还用另外一种方式用它——当下载线程下载完成以后会通知Activity，因此在创建下载线程的时候，我们会将Activity中的UI线程handler对象传给它。&lt;/p&gt;
&lt;p&gt;此外，UI线程拥有一个Looper（译者注：可以通过Looper.getMainLooper()方法获取，判断一个线程是否为主线程可以使用Looper.getLooper() == Looper.getMainLooper()来判断）。所以，你可以在Activity的onCreate()方法中直接新建一个handler对象：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;@Override
public void onCreate(Bundle savedInstanceState) {
    super.onCreate(savedInstanceState);
    setContentView(R.layout.main);

    // Create the Handler. It will implicitly bind to the Looper
    // that is internally created for this thread (since it is the UI thread)
    handler = new Handler();
}
&lt;/code&gt;&lt;/pre&gt;&lt;h3 id=&quot;结论&quot;&gt;&lt;a href=&quot;#结论&quot; class=&quot;headerlink&quot; title=&quot;结论&quot;&gt;&lt;/a&gt;结论&lt;/h3&gt;&lt;p&gt;Looper和Handler可以让你很方便的做很多事情，然而他们与并发相关，这就会变得很复杂。&lt;/p&gt;
&lt;h4 id=&quot;译者注：&quot;&gt;&lt;a href=&quot;#译者注：&quot; class=&quot;headerlink&quot; title=&quot;译者注：&quot;&gt;&lt;/a&gt;译者注：&lt;/h4&gt;&lt;p&gt;Looper和Handler是非UI线程更新界面的重要方式，在非UI线程中通过下面代码：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;new Handler(Looper.myLooper()).post(new Runnable() {
    @Override
    public void run() {
        //在UI线程中处理 
    }
});
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;就可以轻松的将一些工作放到UI线程中处理，比如进度条刷新等等。&lt;/p&gt;
&lt;h4 id=&quot;附件：完整源代码&quot;&gt;&lt;a href=&quot;#附件：完整源代码&quot; class=&quot;headerlink&quot; title=&quot;附件：完整源代码&quot;&gt;&lt;/a&gt;附件：&lt;a href=&quot;http://mindtherobot.com/blog/wp-content/uploads/2010/06/downloadqueue.zip&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;完整源代码&lt;/a&gt;&lt;/h4&gt;</content>
    
    <summary type="html">
    
      &lt;p&gt;原文：&lt;a href=&quot;http://mindtherobot.com/blog/159/android-guts-intro-to-loopers-and-handlers/&quot;&gt;http://mindtherobot.com/blog/159/android-guts-intro-to-loopers-and-handlers/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;我喜欢Android的原因之一就是它有很多非常有用的小工具，其中很多还是与平台无关的。今天，我想介绍两个非常nice 的类——&lt;code&gt;Looper&lt;/code&gt;和&lt;code&gt;Handler&lt;/code&gt;，他们用于Android UI，并且对我们开发者也可用，我们就可以用它们来做很多非常棒的事情了。&lt;/p&gt;
    
    </summary>
    
      <category term="技术" scheme="http://bxbxbai.gitcafe.io/categories/%E6%8A%80%E6%9C%AF/"/>
    
    
      <category term="Android" scheme="http://bxbxbai.gitcafe.io/tags/Android/"/>
    
      <category term="开发技巧" scheme="http://bxbxbai.gitcafe.io/tags/%E5%BC%80%E5%8F%91%E6%8A%80%E5%B7%A7/"/>
    
      <category term="翻译" scheme="http://bxbxbai.gitcafe.io/tags/%E7%BF%BB%E8%AF%91/"/>
    
  </entry>
  
</feed>
